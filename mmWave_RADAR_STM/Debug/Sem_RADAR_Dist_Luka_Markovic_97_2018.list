
Sem_RADAR_Dist_Luka_Markovic_97_2018.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000710c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000081c  08007220  08007220  00017220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a3c  08007a3c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007a3c  08007a3c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007a3c  08007a3c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a3c  08007a3c  00017a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a40  08007a40  00017a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  200001dc  08007c20  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  08007c20  00020240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006003  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001894  00000000  00000000  00026208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  00027aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c8  00000000  00000000  00028150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f5f  00000000  00000000  00028718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009509  00000000  00000000  00040677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000850f9  00000000  00000000  00049b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cec79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002df4  00000000  00000000  000ceccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007204 	.word	0x08007204

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007204 	.word	0x08007204

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2iz>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30f      	bcc.n	80010fa <__aeabi_f2iz+0x2a>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d90d      	bls.n	8001100 <__aeabi_f2iz+0x30>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010f0:	fa23 f002 	lsr.w	r0, r3, r2
 80010f4:	bf18      	it	ne
 80010f6:	4240      	negne	r0, r0
 80010f8:	4770      	bx	lr
 80010fa:	f04f 0000 	mov.w	r0, #0
 80010fe:	4770      	bx	lr
 8001100:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001104:	d101      	bne.n	800110a <__aeabi_f2iz+0x3a>
 8001106:	0242      	lsls	r2, r0, #9
 8001108:	d105      	bne.n	8001116 <__aeabi_f2iz+0x46>
 800110a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800110e:	bf08      	it	eq
 8001110:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr

0800111c <lcdStrobe>:
//pin declarations
#define RS GPIO_PIN_12
#define EN GPIO_PIN_13

void lcdStrobe()
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, EN, 1);
 8001120:	2201      	movs	r2, #1
 8001122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <lcdStrobe+0x28>)
 8001128:	f001 fcee 	bl	8002b08 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800112c:	2005      	movs	r0, #5
 800112e:	f000 fd61 	bl	8001bf4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, EN, 0);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <lcdStrobe+0x28>)
 800113a:	f001 fce5 	bl	8002b08 <HAL_GPIO_WritePin>
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40010800 	.word	0x40010800

08001148 <lcdWriteData>:

void lcdWriteData(uint8_t data)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR = data;
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <lcdWriteData+0x28>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	60d3      	str	r3, [r2, #12]
	HAL_GPIO_WritePin(GPIOA, RS, 1); //set RS to HIGH to send data
 8001158:	2201      	movs	r2, #1
 800115a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800115e:	4804      	ldr	r0, [pc, #16]	; (8001170 <lcdWriteData+0x28>)
 8001160:	f001 fcd2 	bl	8002b08 <HAL_GPIO_WritePin>
	lcdStrobe();
 8001164:	f7ff ffda 	bl	800111c <lcdStrobe>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40010800 	.word	0x40010800

08001174 <lcdWriteCmd>:

void lcdWriteCmd(uint8_t data)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR = data;
 800117e:	4a07      	ldr	r2, [pc, #28]	; (800119c <lcdWriteCmd+0x28>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	60d3      	str	r3, [r2, #12]
	HAL_GPIO_WritePin(GPIOA, RS, 0);//set RS to LOW to send commands
 8001184:	2200      	movs	r2, #0
 8001186:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800118a:	4804      	ldr	r0, [pc, #16]	; (800119c <lcdWriteCmd+0x28>)
 800118c:	f001 fcbc 	bl	8002b08 <HAL_GPIO_WritePin>
	lcdStrobe();
 8001190:	f7ff ffc4 	bl	800111c <lcdStrobe>
}
 8001194:	bf00      	nop
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40010800 	.word	0x40010800

080011a0 <lcdInit>:

void lcdInit()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 80011a4:	2032      	movs	r0, #50	; 0x32
 80011a6:	f000 fd25 	bl	8001bf4 <HAL_Delay>
	lcdWriteCmd(0x38);
 80011aa:	2038      	movs	r0, #56	; 0x38
 80011ac:	f7ff ffe2 	bl	8001174 <lcdWriteCmd>
	lcdStrobe();
 80011b0:	f7ff ffb4 	bl	800111c <lcdStrobe>

	lcdWriteCmd(0x0C);
 80011b4:	200c      	movs	r0, #12
 80011b6:	f7ff ffdd 	bl	8001174 <lcdWriteCmd>
	lcdStrobe();
 80011ba:	f7ff ffaf 	bl	800111c <lcdStrobe>

	lcdWriteCmd(0x06);
 80011be:	2006      	movs	r0, #6
 80011c0:	f7ff ffd8 	bl	8001174 <lcdWriteCmd>
	lcdStrobe();
 80011c4:	f7ff ffaa 	bl	800111c <lcdStrobe>

	lcdWriteCmd(0x01);
 80011c8:	2001      	movs	r0, #1
 80011ca:	f7ff ffd3 	bl	8001174 <lcdWriteCmd>
	lcdStrobe();
 80011ce:	f7ff ffa5 	bl	800111c <lcdStrobe>

	lcdWriteCmd(0x80);
 80011d2:	2080      	movs	r0, #128	; 0x80
 80011d4:	f7ff ffce 	bl	8001174 <lcdWriteCmd>
	lcdStrobe();
 80011d8:	f7ff ffa0 	bl	800111c <lcdStrobe>
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <lcdWriteString>:


void lcdWriteString(char const *s)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	while(*s)
 80011e8:	e006      	b.n	80011f8 <lcdWriteString+0x18>
	{
		lcdWriteData(*s++);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	607a      	str	r2, [r7, #4]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ffa8 	bl	8001148 <lcdWriteData>
	while(*s)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f4      	bne.n	80011ea <lcdWriteString+0xa>
	}

}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <lcdClear>:

void lcdClear()
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
	lcdWriteCmd(0x01);
 800120e:	2001      	movs	r0, #1
 8001210:	f7ff ffb0 	bl	8001174 <lcdWriteCmd>
}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}

08001218 <floatToString>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//pomocna funkcija za konverziju float u string
void floatToString(char *buffer, int bufferSize, float value) {
 8001218:	b590      	push	{r4, r7, lr}
 800121a:	b087      	sub	sp, #28
 800121c:	af02      	add	r7, sp, #8
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
    snprintf(buffer, bufferSize, "%.2f", value);
 8001224:	68bc      	ldr	r4, [r7, #8]
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff f8fe 	bl	8000428 <__aeabi_f2d>
 800122c:	4602      	mov	r2, r0
 800122e:	460b      	mov	r3, r1
 8001230:	e9cd 2300 	strd	r2, r3, [sp]
 8001234:	4a04      	ldr	r2, [pc, #16]	; (8001248 <floatToString+0x30>)
 8001236:	4621      	mov	r1, r4
 8001238:	68f8      	ldr	r0, [r7, #12]
 800123a:	f002 fe77 	bl	8003f2c <sniprintf>
}
 800123e:	bf00      	nop
 8001240:	3714      	adds	r7, #20
 8001242:	46bd      	mov	sp, r7
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	bf00      	nop
 8001248:	08007220 	.word	0x08007220

0800124c <collectADCSamples>:

void collectADCSamples(float* samples, uint16_t size) {
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	807b      	strh	r3, [r7, #2]
	lcdWriteString("Gathering data...");
 8001258:	4818      	ldr	r0, [pc, #96]	; (80012bc <collectADCSamples+0x70>)
 800125a:	f7ff ffc1 	bl	80011e0 <lcdWriteString>

	HAL_ADCEx_Calibration_Start(&hadc1);
 800125e:	4818      	ldr	r0, [pc, #96]	; (80012c0 <collectADCSamples+0x74>)
 8001260:	f001 f944 	bl	80024ec <HAL_ADCEx_Calibration_Start>

    for (int i = 0; i < size; i++) {
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	e01d      	b.n	80012a6 <collectADCSamples+0x5a>
    	HAL_ADC_Start(&hadc1);
 800126a:	4815      	ldr	r0, [pc, #84]	; (80012c0 <collectADCSamples+0x74>)
 800126c:	f000 fdbe 	bl	8001dec <HAL_ADC_Start>
        if(HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK){
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	4812      	ldr	r0, [pc, #72]	; (80012c0 <collectADCSamples+0x74>)
 8001276:	f000 fe93 	bl	8001fa0 <HAL_ADC_PollForConversion>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10c      	bne.n	800129a <collectADCSamples+0x4e>

    		samples[i] = HAL_ADC_GetValue(&hadc1);
 8001280:	480f      	ldr	r0, [pc, #60]	; (80012c0 <collectADCSamples+0x74>)
 8001282:	f000 ff93 	bl	80021ac <HAL_ADC_GetValue>
 8001286:	4601      	mov	r1, r0
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	18d4      	adds	r4, r2, r3
 8001290:	4608      	mov	r0, r1
 8001292:	f7ff fcff 	bl	8000c94 <__aeabi_ui2f>
 8001296:	4603      	mov	r3, r0
 8001298:	6023      	str	r3, [r4, #0]
//    		floatToString(myString, sizeof(myString), samples[i]);
//    		lcdWriteString(myString);
//    		lcdClear();

        }
		HAL_ADC_Stop(&hadc1);
 800129a:	4809      	ldr	r0, [pc, #36]	; (80012c0 <collectADCSamples+0x74>)
 800129c:	f000 fe54 	bl	8001f48 <HAL_ADC_Stop>
    for (int i = 0; i < size; i++) {
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dbdd      	blt.n	800126a <collectADCSamples+0x1e>
    }

    lcdClear();
 80012ae:	f7ff ffac 	bl	800120a <lcdClear>
}
 80012b2:	bf00      	nop
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd90      	pop	{r4, r7, pc}
 80012ba:	bf00      	nop
 80012bc:	08007228 	.word	0x08007228
 80012c0:	200001f8 	.word	0x200001f8
 80012c4:	00000000 	.word	0x00000000

080012c8 <calculateDFT>:


void calculateDFT(const float inputSignal[], float realPart[], float imagPart[], int length) {
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b08a      	sub	sp, #40	; 0x28
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	603b      	str	r3, [r7, #0]
    lcdWriteString("Converting...");
 80012d6:	4858      	ldr	r0, [pc, #352]	; (8001438 <calculateDFT+0x170>)
 80012d8:	f7ff ff82 	bl	80011e0 <lcdWriteString>

    for (int k = 0; k < length; k++) {
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
 80012e0:	e09a      	b.n	8001418 <calculateDFT+0x150>
        realPart[k] = 0.0;
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	4413      	add	r3, r2
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
        imagPart[k] = 0.0;
 80012f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	4413      	add	r3, r2
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]

        for (int n = 0; n < length; n++) {
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
 8001302:	e066      	b.n	80013d2 <calculateDFT+0x10a>
            float angle = -2 * PI * k * n / length;
 8001304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001306:	f7ff f87d 	bl	8000404 <__aeabi_i2d>
 800130a:	a349      	add	r3, pc, #292	; (adr r3, 8001430 <calculateDFT+0x168>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff f8e2 	bl	80004d8 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4614      	mov	r4, r2
 800131a:	461d      	mov	r5, r3
 800131c:	6a38      	ldr	r0, [r7, #32]
 800131e:	f7ff f871 	bl	8000404 <__aeabi_i2d>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4620      	mov	r0, r4
 8001328:	4629      	mov	r1, r5
 800132a:	f7ff f8d5 	bl	80004d8 <__aeabi_dmul>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4614      	mov	r4, r2
 8001334:	461d      	mov	r5, r3
 8001336:	6838      	ldr	r0, [r7, #0]
 8001338:	f7ff f864 	bl	8000404 <__aeabi_i2d>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4620      	mov	r0, r4
 8001342:	4629      	mov	r1, r5
 8001344:	f7ff f9f2 	bl	800072c <__aeabi_ddiv>
 8001348:	4602      	mov	r2, r0
 800134a:	460b      	mov	r3, r1
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	f7ff fb9a 	bl	8000a88 <__aeabi_d2f>
 8001354:	4603      	mov	r3, r0
 8001356:	61fb      	str	r3, [r7, #28]
            float cos_val = cosf(angle);
 8001358:	69f8      	ldr	r0, [r7, #28]
 800135a:	f005 f875 	bl	8006448 <cosf>
 800135e:	61b8      	str	r0, [r7, #24]
            float sin_val = sinf(angle);
 8001360:	69f8      	ldr	r0, [r7, #28]
 8001362:	f005 f8a9 	bl	80064b8 <sinf>
 8001366:	6178      	str	r0, [r7, #20]
            realPart[k] += inputSignal[n] * cos_val;
 8001368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	68ba      	ldr	r2, [r7, #8]
 800136e:	4413      	add	r3, r2
 8001370:	681d      	ldr	r5, [r3, #0]
 8001372:	6a3b      	ldr	r3, [r7, #32]
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	4413      	add	r3, r2
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	69b9      	ldr	r1, [r7, #24]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fce0 	bl	8000d44 <__aeabi_fmul>
 8001384:	4603      	mov	r3, r0
 8001386:	4619      	mov	r1, r3
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	18d4      	adds	r4, r2, r3
 8001390:	4628      	mov	r0, r5
 8001392:	f7ff fbcf 	bl	8000b34 <__addsf3>
 8001396:	4603      	mov	r3, r0
 8001398:	6023      	str	r3, [r4, #0]
            imagPart[k] -= inputSignal[n] * sin_val;
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	681d      	ldr	r5, [r3, #0]
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	4413      	add	r3, r2
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6979      	ldr	r1, [r7, #20]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fcc7 	bl	8000d44 <__aeabi_fmul>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4619      	mov	r1, r3
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	18d4      	adds	r4, r2, r3
 80013c2:	4628      	mov	r0, r5
 80013c4:	f7ff fbb4 	bl	8000b30 <__aeabi_fsub>
 80013c8:	4603      	mov	r3, r0
 80013ca:	6023      	str	r3, [r4, #0]
        for (int n = 0; n < length; n++) {
 80013cc:	6a3b      	ldr	r3, [r7, #32]
 80013ce:	3301      	adds	r3, #1
 80013d0:	623b      	str	r3, [r7, #32]
 80013d2:	6a3a      	ldr	r2, [r7, #32]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	db94      	blt.n	8001304 <calculateDFT+0x3c>
        }

        // Correct the DC offset for the first element
        if (k == 0) {
 80013da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d118      	bne.n	8001412 <calculateDFT+0x14a>
            realPart[k] /= length;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	4413      	add	r3, r2
 80013e8:	681d      	ldr	r5, [r3, #0]
 80013ea:	6838      	ldr	r0, [r7, #0]
 80013ec:	f7ff fc56 	bl	8000c9c <__aeabi_i2f>
 80013f0:	4601      	mov	r1, r0
 80013f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	68ba      	ldr	r2, [r7, #8]
 80013f8:	18d4      	adds	r4, r2, r3
 80013fa:	4628      	mov	r0, r5
 80013fc:	f7ff fd56 	bl	8000eac <__aeabi_fdiv>
 8001400:	4603      	mov	r3, r0
 8001402:	6023      	str	r3, [r4, #0]
            imagPart[k] = 0.0;
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
    for (int k = 0; k < length; k++) {
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001414:	3301      	adds	r3, #1
 8001416:	627b      	str	r3, [r7, #36]	; 0x24
 8001418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	429a      	cmp	r2, r3
 800141e:	f6ff af60 	blt.w	80012e2 <calculateDFT+0x1a>
        }
    }

    lcdClear();
 8001422:	f7ff fef2 	bl	800120a <lcdClear>
}
 8001426:	bf00      	nop
 8001428:	3728      	adds	r7, #40	; 0x28
 800142a:	46bd      	mov	sp, r7
 800142c:	bdb0      	pop	{r4, r5, r7, pc}
 800142e:	bf00      	nop
 8001430:	54442eea 	.word	0x54442eea
 8001434:	c01921fb 	.word	0xc01921fb
 8001438:	0800723c 	.word	0x0800723c
 800143c:	00000000 	.word	0x00000000

08001440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001448:	f000 fb72 	bl	8001b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800144c:	f000 f92a 	bl	80016a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001450:	f000 f9b6 	bl	80017c0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001454:	f000 f976 	bl	8001744 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  lcdInit();
 8001458:	f7ff fea2 	bl	80011a0 <lcdInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  collectADCSamples(inputSignal, FFT_SIZE);
 800145c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001460:	2120      	movs	r1, #32
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fef2 	bl	800124c <collectADCSamples>

//	  arm_cfft_radix2_init_q15(&fftInstance, FFT_SIZE, 0, 1);
//	  arm_cfft_radix2_q15(&fftInstance, fftBufIn);
//	  arm_cmplx_mag_q15(fftBufIn, fftBufOut, FFT_SIZE);

	  calculateDFT(inputSignal, realPart, imagPart, FFT_SIZE);
 8001468:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800146c:	f107 01c0 	add.w	r1, r7, #192	; 0xc0
 8001470:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8001474:	2320      	movs	r3, #32
 8001476:	f7ff ff27 	bl	80012c8 <calculateDFT>


	  float amplitudeSpectrum[FFT_SIZE / 2];
	  for (int i = 0; i < FFT_SIZE / 2; i++) {
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8001480:	e04a      	b.n	8001518 <main+0xd8>
	      amplitudeSpectrum[i] = sqrt(realPart[i] * realPart[i] + imagPart[i] * imagPart[i]);
 8001482:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001486:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800148a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800148e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001496:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800149a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800149e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a2:	4619      	mov	r1, r3
 80014a4:	f7ff fc4e 	bl	8000d44 <__aeabi_fmul>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461c      	mov	r4, r3
 80014ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80014b4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80014b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80014bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80014c4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80014c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fc39 	bl	8000d44 <__aeabi_fmul>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4619      	mov	r1, r3
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fb2c 	bl	8000b34 <__addsf3>
 80014dc:	4603      	mov	r3, r0
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe ffa2 	bl	8000428 <__aeabi_f2d>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f005 f81e 	bl	800652c <sqrt>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fac6 	bl	8000a88 <__aeabi_d2f>
 80014fc:	4601      	mov	r1, r0
 80014fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001502:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001506:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 800150a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  for (int i = 0; i < FFT_SIZE / 2; i++) {
 800150e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001512:	3301      	adds	r3, #1
 8001514:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8001518:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800151c:	2b0f      	cmp	r3, #15
 800151e:	ddb0      	ble.n	8001482 <main+0x42>
	  }


	  float maxAmplitude = amplitudeSpectrum[0];
 8001520:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001524:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	  int peakIndex = 0;
 800152e:	2300      	movs	r3, #0
 8001530:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	  for (int i = 1; i < FFT_SIZE / 2; i++) {
 8001534:	2301      	movs	r3, #1
 8001536:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800153a:	e022      	b.n	8001582 <main+0x142>
	      if (amplitudeSpectrum[i] > maxAmplitude) {
 800153c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001540:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001544:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8001548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154c:	4619      	mov	r1, r3
 800154e:	f8d7 01f8 	ldr.w	r0, [r7, #504]	; 0x1f8
 8001552:	f7ff fd95 	bl	8001080 <__aeabi_fcmplt>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d00d      	beq.n	8001578 <main+0x138>
	          maxAmplitude = amplitudeSpectrum[i];
 800155c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001560:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001564:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8001568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	          peakIndex = i;
 8001570:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001574:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
	  for (int i = 1; i < FFT_SIZE / 2; i++) {
 8001578:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800157c:	3301      	adds	r3, #1
 800157e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8001582:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001586:	2b0f      	cmp	r3, #15
 8001588:	ddd8      	ble.n	800153c <main+0xfc>

	      }
	  }


	  float frequencySlope = 200;
 800158a:	4b41      	ldr	r3, [pc, #260]	; (8001690 <main+0x250>)
 800158c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

	  // Constants
	  uint32_t ADC_Clock_Frequency = 8000000;
 8001590:	4b40      	ldr	r3, [pc, #256]	; (8001694 <main+0x254>)
 8001592:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
	  uint32_t ADC_Prescaler = 2;
 8001596:	2302      	movs	r3, #2
 8001598:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
	  uint32_t ADC_Sampling_Time = 239.5;
 800159c:	23ef      	movs	r3, #239	; 0xef
 800159e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

	  float Sampling_Frequency_Hz;
	  Sampling_Frequency_Hz = (float)(ADC_Clock_Frequency / ADC_Prescaler) / ADC_Sampling_Time;
 80015a2:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 80015a6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fb70 	bl	8000c94 <__aeabi_ui2f>
 80015b4:	4604      	mov	r4, r0
 80015b6:	f8d7 01e0 	ldr.w	r0, [r7, #480]	; 0x1e0
 80015ba:	f7ff fb6b 	bl	8000c94 <__aeabi_ui2f>
 80015be:	4603      	mov	r3, r0
 80015c0:	4619      	mov	r1, r3
 80015c2:	4620      	mov	r0, r4
 80015c4:	f7ff fc72 	bl	8000eac <__aeabi_fdiv>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

	  float peakFrequency = peakIndex * (Sampling_Frequency_Hz / FFT_SIZE);
 80015ce:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 80015d2:	f7ff fb63 	bl	8000c9c <__aeabi_i2f>
 80015d6:	4604      	mov	r4, r0
 80015d8:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80015dc:	f8d7 01dc 	ldr.w	r0, [r7, #476]	; 0x1dc
 80015e0:	f7ff fc64 	bl	8000eac <__aeabi_fdiv>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4619      	mov	r1, r3
 80015e8:	4620      	mov	r0, r4
 80015ea:	f7ff fbab 	bl	8000d44 <__aeabi_fmul>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
	  float targetRange = (((peakFrequency/100) * SPEED_OF_LIGHT) / (2*frequencySlope*1000000));
 80015f4:	4928      	ldr	r1, [pc, #160]	; (8001698 <main+0x258>)
 80015f6:	f8d7 01d8 	ldr.w	r0, [r7, #472]	; 0x1d8
 80015fa:	f7ff fc57 	bl	8000eac <__aeabi_fdiv>
 80015fe:	4603      	mov	r3, r0
 8001600:	4618      	mov	r0, r3
 8001602:	f7fe ff11 	bl	8000428 <__aeabi_f2d>
 8001606:	a320      	add	r3, pc, #128	; (adr r3, 8001688 <main+0x248>)
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f7fe ff64 	bl	80004d8 <__aeabi_dmul>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	4614      	mov	r4, r2
 8001616:	461d      	mov	r5, r3
 8001618:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800161c:	4619      	mov	r1, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fa88 	bl	8000b34 <__addsf3>
 8001624:	4603      	mov	r3, r0
 8001626:	491d      	ldr	r1, [pc, #116]	; (800169c <main+0x25c>)
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fb8b 	bl	8000d44 <__aeabi_fmul>
 800162e:	4603      	mov	r3, r0
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fef9 	bl	8000428 <__aeabi_f2d>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4620      	mov	r0, r4
 800163c:	4629      	mov	r1, r5
 800163e:	f7ff f875 	bl	800072c <__aeabi_ddiv>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	f7ff fa1d 	bl	8000a88 <__aeabi_d2f>
 800164e:	4603      	mov	r3, r0
 8001650:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

	  floatToString(distanceString, sizeof(distanceString), targetRange);
 8001654:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001658:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800165c:	2114      	movs	r1, #20
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fdda 	bl	8001218 <floatToString>

	  lcdClear();
 8001664:	f7ff fdd1 	bl	800120a <lcdClear>
	  lcdWriteString(distanceString);
 8001668:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fdb7 	bl	80011e0 <lcdWriteString>
	  lcdWriteString("m");
 8001672:	480b      	ldr	r0, [pc, #44]	; (80016a0 <main+0x260>)
 8001674:	f7ff fdb4 	bl	80011e0 <lcdWriteString>
//
//	  lcdClear();
//	  lcdWriteString(distanceString);
//	  lcdWriteString("Hz");

	  HAL_Delay(1500);
 8001678:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800167c:	f000 faba 	bl	8001bf4 <HAL_Delay>
	  lcdClear();
 8001680:	f7ff fdc3 	bl	800120a <lcdClear>
  {
 8001684:	e6ea      	b.n	800145c <main+0x1c>
 8001686:	bf00      	nop
 8001688:	00000000 	.word	0x00000000
 800168c:	41b1e1a3 	.word	0x41b1e1a3
 8001690:	43480000 	.word	0x43480000
 8001694:	007a1200 	.word	0x007a1200
 8001698:	42c80000 	.word	0x42c80000
 800169c:	49742400 	.word	0x49742400
 80016a0:	0800724c 	.word	0x0800724c

080016a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b094      	sub	sp, #80	; 0x50
 80016a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ae:	2228      	movs	r2, #40	; 0x28
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 ffd2 	bl	800365c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	605a      	str	r2, [r3, #4]
 80016d0:	609a      	str	r2, [r3, #8]
 80016d2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d4:	2302      	movs	r3, #2
 80016d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016d8:	2301      	movs	r3, #1
 80016da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016dc:	2310      	movs	r3, #16
 80016de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016e8:	4618      	mov	r0, r3
 80016ea:	f001 fa25 	bl	8002b38 <HAL_RCC_OscConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80016f4:	f000 f8a4 	bl	8001840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f8:	230f      	movs	r3, #15
 80016fa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001708:	2300      	movs	r3, #0
 800170a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fc92 	bl	800303c <HAL_RCC_ClockConfig>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800171e:	f000 f88f 	bl	8001840 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001722:	2302      	movs	r3, #2
 8001724:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	4618      	mov	r0, r3
 800172e:	f001 fdff 	bl	8003330 <HAL_RCCEx_PeriphCLKConfig>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001738:	f000 f882 	bl	8001840 <Error_Handler>
  }
}
 800173c:	bf00      	nop
 800173e:	3750      	adds	r7, #80	; 0x50
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001754:	4b18      	ldr	r3, [pc, #96]	; (80017b8 <MX_ADC1_Init+0x74>)
 8001756:	4a19      	ldr	r2, [pc, #100]	; (80017bc <MX_ADC1_Init+0x78>)
 8001758:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <MX_ADC1_Init+0x74>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001760:	4b15      	ldr	r3, [pc, #84]	; (80017b8 <MX_ADC1_Init+0x74>)
 8001762:	2201      	movs	r2, #1
 8001764:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001766:	4b14      	ldr	r3, [pc, #80]	; (80017b8 <MX_ADC1_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <MX_ADC1_Init+0x74>)
 800176e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001772:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <MX_ADC1_Init+0x74>)
 8001776:	2200      	movs	r2, #0
 8001778:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800177a:	4b0f      	ldr	r3, [pc, #60]	; (80017b8 <MX_ADC1_Init+0x74>)
 800177c:	2201      	movs	r2, #1
 800177e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001780:	480d      	ldr	r0, [pc, #52]	; (80017b8 <MX_ADC1_Init+0x74>)
 8001782:	f000 fa5b 	bl	8001c3c <HAL_ADC_Init>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800178c:	f000 f858 	bl	8001840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001790:	2308      	movs	r3, #8
 8001792:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001794:	2301      	movs	r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001798:	2307      	movs	r3, #7
 800179a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	4619      	mov	r1, r3
 80017a0:	4805      	ldr	r0, [pc, #20]	; (80017b8 <MX_ADC1_Init+0x74>)
 80017a2:	f000 fd0f 	bl	80021c4 <HAL_ADC_ConfigChannel>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80017ac:	f000 f848 	bl	8001840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	200001f8 	.word	0x200001f8
 80017bc:	40012400 	.word	0x40012400

080017c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b18      	ldr	r3, [pc, #96]	; (8001838 <MX_GPIO_Init+0x78>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a17      	ldr	r2, [pc, #92]	; (8001838 <MX_GPIO_Init+0x78>)
 80017da:	f043 0304 	orr.w	r3, r3, #4
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b15      	ldr	r3, [pc, #84]	; (8001838 <MX_GPIO_Init+0x78>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b12      	ldr	r3, [pc, #72]	; (8001838 <MX_GPIO_Init+0x78>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a11      	ldr	r2, [pc, #68]	; (8001838 <MX_GPIO_Init+0x78>)
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <MX_GPIO_Init+0x78>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	603b      	str	r3, [r7, #0]
 8001802:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001804:	2200      	movs	r2, #0
 8001806:	f243 01ff 	movw	r1, #12543	; 0x30ff
 800180a:	480c      	ldr	r0, [pc, #48]	; (800183c <MX_GPIO_Init+0x7c>)
 800180c:	f001 f97c 	bl	8002b08 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA12 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001810:	f243 03ff 	movw	r3, #12543	; 0x30ff
 8001814:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2302      	movs	r3, #2
 8001820:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	4619      	mov	r1, r3
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <MX_GPIO_Init+0x7c>)
 800182a:	f000 fff1 	bl	8002810 <HAL_GPIO_Init>

}
 800182e:	bf00      	nop
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000
 800183c:	40010800 	.word	0x40010800

08001840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001844:	b672      	cpsid	i
}
 8001846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001848:	e7fe      	b.n	8001848 <Error_Handler+0x8>
	...

0800184c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <HAL_MspInit+0x40>)
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	4a0d      	ldr	r2, [pc, #52]	; (800188c <HAL_MspInit+0x40>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6193      	str	r3, [r2, #24]
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <HAL_MspInit+0x40>)
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	4b08      	ldr	r3, [pc, #32]	; (800188c <HAL_MspInit+0x40>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	4a07      	ldr	r2, [pc, #28]	; (800188c <HAL_MspInit+0x40>)
 8001870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001874:	61d3      	str	r3, [r2, #28]
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <HAL_MspInit+0x40>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr
 800188c:	40021000 	.word	0x40021000

08001890 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a14      	ldr	r2, [pc, #80]	; (80018fc <HAL_ADC_MspInit+0x6c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d121      	bne.n	80018f4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_ADC_MspInit+0x70>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a12      	ldr	r2, [pc, #72]	; (8001900 <HAL_ADC_MspInit+0x70>)
 80018b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <HAL_ADC_MspInit+0x70>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_ADC_MspInit+0x70>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	4a0c      	ldr	r2, [pc, #48]	; (8001900 <HAL_ADC_MspInit+0x70>)
 80018ce:	f043 0308 	orr.w	r3, r3, #8
 80018d2:	6193      	str	r3, [r2, #24]
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <HAL_ADC_MspInit+0x70>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f003 0308 	and.w	r3, r3, #8
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018e0:	2301      	movs	r3, #1
 80018e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e4:	2303      	movs	r3, #3
 80018e6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	f107 0310 	add.w	r3, r7, #16
 80018ec:	4619      	mov	r1, r3
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <HAL_ADC_MspInit+0x74>)
 80018f0:	f000 ff8e 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f4:	bf00      	nop
 80018f6:	3720      	adds	r7, #32
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40012400 	.word	0x40012400
 8001900:	40021000 	.word	0x40021000
 8001904:	40010c00 	.word	0x40010c00

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler+0x4>

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler+0x4>

0800191a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <UsageFault_Handler+0x4>

08001926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr

08001932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr

0800194a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800194e:	f000 f935 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}

08001956 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
	return 1;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	46bd      	mov	sp, r7
 8001960:	bc80      	pop	{r7}
 8001962:	4770      	bx	lr

08001964 <_kill>:

int _kill(int pid, int sig)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800196e:	f001 fe4b 	bl	8003608 <__errno>
 8001972:	4603      	mov	r3, r0
 8001974:	2216      	movs	r2, #22
 8001976:	601a      	str	r2, [r3, #0]
	return -1;
 8001978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_exit>:

void _exit (int status)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ffe7 	bl	8001964 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001996:	e7fe      	b.n	8001996 <_exit+0x12>

08001998 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e00a      	b.n	80019c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019aa:	f3af 8000 	nop.w
 80019ae:	4601      	mov	r1, r0
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	b2ca      	uxtb	r2, r1
 80019b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbf0      	blt.n	80019aa <_read+0x12>
	}

return len;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e009      	b.n	80019f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	60ba      	str	r2, [r7, #8]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dbf1      	blt.n	80019e4 <_write+0x12>
	}
	return len;
 8001a00:	687b      	ldr	r3, [r7, #4]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_close>:

int _close(int file)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	return -1;
 8001a12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a30:	605a      	str	r2, [r3, #4]
	return 0;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr

08001a3e <_isatty>:

int _isatty(int file)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
	return 1;
 8001a46:	2301      	movs	r3, #1
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bc80      	pop	{r7}
 8001a50:	4770      	bx	lr

08001a52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b085      	sub	sp, #20
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
	return 0;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
	...

08001a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a74:	4a14      	ldr	r2, [pc, #80]	; (8001ac8 <_sbrk+0x5c>)
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <_sbrk+0x60>)
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a80:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a88:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <_sbrk+0x64>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <_sbrk+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d207      	bcs.n	8001aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a9c:	f001 fdb4 	bl	8003608 <__errno>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	e009      	b.n	8001ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aac:	4b08      	ldr	r3, [pc, #32]	; (8001ad0 <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a05      	ldr	r2, [pc, #20]	; (8001ad0 <_sbrk+0x64>)
 8001abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20002800 	.word	0x20002800
 8001acc:	00000400 	.word	0x00000400
 8001ad0:	20000228 	.word	0x20000228
 8001ad4:	20000240 	.word	0x20000240

08001ad8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr

08001ae4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ae4:	f7ff fff8 	bl	8001ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ae8:	480b      	ldr	r0, [pc, #44]	; (8001b18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001aea:	490c      	ldr	r1, [pc, #48]	; (8001b1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001aec:	4a0c      	ldr	r2, [pc, #48]	; (8001b20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a09      	ldr	r2, [pc, #36]	; (8001b24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b00:	4c09      	ldr	r4, [pc, #36]	; (8001b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f001 fd81 	bl	8003614 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b12:	f7ff fc95 	bl	8001440 <main>
  bx lr
 8001b16:	4770      	bx	lr
  ldr r0, =_sdata
 8001b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b1c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b20:	08007a44 	.word	0x08007a44
  ldr r2, =_sbss
 8001b24:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b28:	20000240 	.word	0x20000240

08001b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b2c:	e7fe      	b.n	8001b2c <ADC1_2_IRQHandler>
	...

08001b30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_Init+0x28>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_Init+0x28>)
 8001b3a:	f043 0310 	orr.w	r3, r3, #16
 8001b3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 fe31 	bl	80027a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	200f      	movs	r0, #15
 8001b48:	f000 f808 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff fe7e 	bl	800184c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40022000 	.word	0x40022000

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x54>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fe3b 	bl	80027f6 <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f000 fe11 	bl	80027be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_InitTick+0x5c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000000 	.word	0x20000000
 8001bb4:	20000008 	.word	0x20000008
 8001bb8:	20000004 	.word	0x20000004

08001bbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_IncTick+0x1c>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a03      	ldr	r2, [pc, #12]	; (8001bdc <HAL_IncTick+0x20>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	2000022c 	.word	0x2000022c

08001be0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  return uwTick;
 8001be4:	4b02      	ldr	r3, [pc, #8]	; (8001bf0 <HAL_GetTick+0x10>)
 8001be6:	681b      	ldr	r3, [r3, #0]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	2000022c 	.word	0x2000022c

08001bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff fff0 	bl	8001be0 <HAL_GetTick>
 8001c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d005      	beq.n	8001c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_Delay+0x44>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c1a:	bf00      	nop
 8001c1c:	f7ff ffe0 	bl	8001be0 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d8f7      	bhi.n	8001c1c <HAL_Delay+0x28>
  {
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000008 	.word	0x20000008

08001c3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c44:	2300      	movs	r3, #0
 8001c46:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0be      	b.n	8001ddc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d109      	bne.n	8001c80 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f7ff fe08 	bl	8001890 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fbf1 	bl	8002468 <ADC_ConversionStop_Disable>
 8001c86:	4603      	mov	r3, r0
 8001c88:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	f003 0310 	and.w	r3, r3, #16
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 8099 	bne.w	8001dca <HAL_ADC_Init+0x18e>
 8001c98:	7dfb      	ldrb	r3, [r7, #23]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f040 8095 	bne.w	8001dca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ca8:	f023 0302 	bic.w	r3, r3, #2
 8001cac:	f043 0202 	orr.w	r2, r3, #2
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cbc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	7b1b      	ldrb	r3, [r3, #12]
 8001cc2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001cc4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cd4:	d003      	beq.n	8001cde <HAL_ADC_Init+0xa2>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d102      	bne.n	8001ce4 <HAL_ADC_Init+0xa8>
 8001cde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ce2:	e000      	b.n	8001ce6 <HAL_ADC_Init+0xaa>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7d1b      	ldrb	r3, [r3, #20]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d119      	bne.n	8001d28 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	7b1b      	ldrb	r3, [r3, #12]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d109      	bne.n	8001d10 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	035a      	lsls	r2, r3, #13
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	e00b      	b.n	8001d28 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	f043 0220 	orr.w	r2, r3, #32
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d20:	f043 0201 	orr.w	r2, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <HAL_ADC_Init+0x1a8>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6812      	ldr	r2, [r2, #0]
 8001d4a:	68b9      	ldr	r1, [r7, #8]
 8001d4c:	430b      	orrs	r3, r1
 8001d4e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d58:	d003      	beq.n	8001d62 <HAL_ADC_Init+0x126>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d104      	bne.n	8001d6c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	051b      	lsls	r3, r3, #20
 8001d6a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d72:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_ADC_Init+0x1ac>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d10b      	bne.n	8001da8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d9a:	f023 0303 	bic.w	r3, r3, #3
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001da6:	e018      	b.n	8001dda <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	f023 0312 	bic.w	r3, r3, #18
 8001db0:	f043 0210 	orr.w	r2, r3, #16
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	f043 0201 	orr.w	r2, r3, #1
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001dc8:	e007      	b.n	8001dda <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	f043 0210 	orr.w	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	ffe1f7fd 	.word	0xffe1f7fd
 8001de8:	ff1f0efe 	.word	0xff1f0efe

08001dec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_ADC_Start+0x1a>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e098      	b.n	8001f38 <HAL_ADC_Start+0x14c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fad0 	bl	80023b4 <ADC_Enable>
 8001e14:	4603      	mov	r3, r0
 8001e16:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f040 8087 	bne.w	8001f2e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a41      	ldr	r2, [pc, #260]	; (8001f40 <HAL_ADC_Start+0x154>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d105      	bne.n	8001e4a <HAL_ADC_Start+0x5e>
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_ADC_Start+0x158>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d115      	bne.n	8001e76 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d026      	beq.n	8001eb2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e6c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e74:	e01d      	b.n	8001eb2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2f      	ldr	r2, [pc, #188]	; (8001f44 <HAL_ADC_Start+0x158>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d004      	beq.n	8001e96 <HAL_ADC_Start+0xaa>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2b      	ldr	r2, [pc, #172]	; (8001f40 <HAL_ADC_Start+0x154>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10d      	bne.n	8001eb2 <HAL_ADC_Start+0xc6>
 8001e96:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <HAL_ADC_Start+0x158>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d007      	beq.n	8001eb2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eaa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d006      	beq.n	8001ecc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec2:	f023 0206 	bic.w	r2, r3, #6
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001eca:	e002      	b.n	8001ed2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f06f 0202 	mvn.w	r2, #2
 8001ee2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001eee:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ef2:	d113      	bne.n	8001f1c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ef8:	4a11      	ldr	r2, [pc, #68]	; (8001f40 <HAL_ADC_Start+0x154>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d105      	bne.n	8001f0a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <HAL_ADC_Start+0x158>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d108      	bne.n	8001f1c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689a      	ldr	r2, [r3, #8]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001f18:	609a      	str	r2, [r3, #8]
 8001f1a:	e00c      	b.n	8001f36 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	e003      	b.n	8001f36 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40012800 	.word	0x40012800
 8001f44:	40012400 	.word	0x40012400

08001f48 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f50:	2300      	movs	r3, #0
 8001f52:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_ADC_Stop+0x1a>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e01a      	b.n	8001f98 <HAL_ADC_Stop+0x50>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 fa7c 	bl	8002468 <ADC_ConversionStop_Disable>
 8001f70:	4603      	mov	r3, r0
 8001f72:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f74:	7bfb      	ldrb	r3, [r7, #15]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	f043 0201 	orr.w	r2, r3, #1
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001fa0:	b590      	push	{r4, r7, lr}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001fb6:	f7ff fe13 	bl	8001be0 <HAL_GetTick>
 8001fba:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fce:	f043 0220 	orr.w	r2, r3, #32
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e0d3      	b.n	800218a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d131      	bne.n	8002054 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d12a      	bne.n	8002054 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ffe:	e021      	b.n	8002044 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002006:	d01d      	beq.n	8002044 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d007      	beq.n	800201e <HAL_ADC_PollForConversion+0x7e>
 800200e:	f7ff fde7 	bl	8001be0 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d212      	bcs.n	8002044 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10b      	bne.n	8002044 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	f043 0204 	orr.w	r2, r3, #4
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e0a2      	b.n	800218a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0d6      	beq.n	8002000 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002052:	e070      	b.n	8002136 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002054:	4b4f      	ldr	r3, [pc, #316]	; (8002194 <HAL_ADC_PollForConversion+0x1f4>)
 8002056:	681c      	ldr	r4, [r3, #0]
 8002058:	2002      	movs	r0, #2
 800205a:	f001 fa1f 	bl	800349c <HAL_RCCEx_GetPeriphCLKFreq>
 800205e:	4603      	mov	r3, r0
 8002060:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6919      	ldr	r1, [r3, #16]
 800206a:	4b4b      	ldr	r3, [pc, #300]	; (8002198 <HAL_ADC_PollForConversion+0x1f8>)
 800206c:	400b      	ands	r3, r1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d118      	bne.n	80020a4 <HAL_ADC_PollForConversion+0x104>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68d9      	ldr	r1, [r3, #12]
 8002078:	4b48      	ldr	r3, [pc, #288]	; (800219c <HAL_ADC_PollForConversion+0x1fc>)
 800207a:	400b      	ands	r3, r1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d111      	bne.n	80020a4 <HAL_ADC_PollForConversion+0x104>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6919      	ldr	r1, [r3, #16]
 8002086:	4b46      	ldr	r3, [pc, #280]	; (80021a0 <HAL_ADC_PollForConversion+0x200>)
 8002088:	400b      	ands	r3, r1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d108      	bne.n	80020a0 <HAL_ADC_PollForConversion+0x100>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68d9      	ldr	r1, [r3, #12]
 8002094:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <HAL_ADC_PollForConversion+0x204>)
 8002096:	400b      	ands	r3, r1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_PollForConversion+0x100>
 800209c:	2314      	movs	r3, #20
 800209e:	e020      	b.n	80020e2 <HAL_ADC_PollForConversion+0x142>
 80020a0:	2329      	movs	r3, #41	; 0x29
 80020a2:	e01e      	b.n	80020e2 <HAL_ADC_PollForConversion+0x142>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	6919      	ldr	r1, [r3, #16]
 80020aa:	4b3d      	ldr	r3, [pc, #244]	; (80021a0 <HAL_ADC_PollForConversion+0x200>)
 80020ac:	400b      	ands	r3, r1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d106      	bne.n	80020c0 <HAL_ADC_PollForConversion+0x120>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68d9      	ldr	r1, [r3, #12]
 80020b8:	4b3a      	ldr	r3, [pc, #232]	; (80021a4 <HAL_ADC_PollForConversion+0x204>)
 80020ba:	400b      	ands	r3, r1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d00d      	beq.n	80020dc <HAL_ADC_PollForConversion+0x13c>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6919      	ldr	r1, [r3, #16]
 80020c6:	4b38      	ldr	r3, [pc, #224]	; (80021a8 <HAL_ADC_PollForConversion+0x208>)
 80020c8:	400b      	ands	r3, r1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d108      	bne.n	80020e0 <HAL_ADC_PollForConversion+0x140>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68d9      	ldr	r1, [r3, #12]
 80020d4:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <HAL_ADC_PollForConversion+0x208>)
 80020d6:	400b      	ands	r3, r1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d101      	bne.n	80020e0 <HAL_ADC_PollForConversion+0x140>
 80020dc:	2354      	movs	r3, #84	; 0x54
 80020de:	e000      	b.n	80020e2 <HAL_ADC_PollForConversion+0x142>
 80020e0:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80020e2:	fb02 f303 	mul.w	r3, r2, r3
 80020e6:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020e8:	e021      	b.n	800212e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020f0:	d01a      	beq.n	8002128 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d007      	beq.n	8002108 <HAL_ADC_PollForConversion+0x168>
 80020f8:	f7ff fd72 	bl	8001be0 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d20f      	bcs.n	8002128 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	d90b      	bls.n	8002128 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002114:	f043 0204 	orr.w	r2, r3, #4
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e030      	b.n	800218a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3301      	adds	r3, #1
 800212c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	429a      	cmp	r2, r3
 8002134:	d8d9      	bhi.n	80020ea <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f06f 0212 	mvn.w	r2, #18
 800213e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002144:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002156:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800215a:	d115      	bne.n	8002188 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002160:	2b00      	cmp	r3, #0
 8002162:	d111      	bne.n	8002188 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d105      	bne.n	8002188 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	bd90      	pop	{r4, r7, pc}
 8002192:	bf00      	nop
 8002194:	20000000 	.word	0x20000000
 8002198:	24924924 	.word	0x24924924
 800219c:	00924924 	.word	0x00924924
 80021a0:	12492492 	.word	0x12492492
 80021a4:	00492492 	.word	0x00492492
 80021a8:	00249249 	.word	0x00249249

080021ac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021ce:	2300      	movs	r3, #0
 80021d0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_ConfigChannel+0x20>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e0dc      	b.n	800239e <HAL_ADC_ConfigChannel+0x1da>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b06      	cmp	r3, #6
 80021f2:	d81c      	bhi.n	800222e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	4613      	mov	r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	4413      	add	r3, r2
 8002204:	3b05      	subs	r3, #5
 8002206:	221f      	movs	r2, #31
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	4019      	ands	r1, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	6818      	ldr	r0, [r3, #0]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	3b05      	subs	r3, #5
 8002220:	fa00 f203 	lsl.w	r2, r0, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	430a      	orrs	r2, r1
 800222a:	635a      	str	r2, [r3, #52]	; 0x34
 800222c:	e03c      	b.n	80022a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b0c      	cmp	r3, #12
 8002234:	d81c      	bhi.n	8002270 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	3b23      	subs	r3, #35	; 0x23
 8002248:	221f      	movs	r2, #31
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	4019      	ands	r1, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	4413      	add	r3, r2
 8002260:	3b23      	subs	r3, #35	; 0x23
 8002262:	fa00 f203 	lsl.w	r2, r0, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	631a      	str	r2, [r3, #48]	; 0x30
 800226e:	e01b      	b.n	80022a8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	3b41      	subs	r3, #65	; 0x41
 8002282:	221f      	movs	r2, #31
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	4019      	ands	r1, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	6818      	ldr	r0, [r3, #0]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	3b41      	subs	r3, #65	; 0x41
 800229c:	fa00 f203 	lsl.w	r2, r0, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b09      	cmp	r3, #9
 80022ae:	d91c      	bls.n	80022ea <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68d9      	ldr	r1, [r3, #12]
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	3b1e      	subs	r3, #30
 80022c2:	2207      	movs	r2, #7
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	4019      	ands	r1, r3
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	6898      	ldr	r0, [r3, #8]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	4413      	add	r3, r2
 80022da:	3b1e      	subs	r3, #30
 80022dc:	fa00 f203 	lsl.w	r2, r0, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	60da      	str	r2, [r3, #12]
 80022e8:	e019      	b.n	800231e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	6919      	ldr	r1, [r3, #16]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	2207      	movs	r2, #7
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	4019      	ands	r1, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6898      	ldr	r0, [r3, #8]
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	fa00 f203 	lsl.w	r2, r0, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b10      	cmp	r3, #16
 8002324:	d003      	beq.n	800232e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800232a:	2b11      	cmp	r3, #17
 800232c:	d132      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1d      	ldr	r2, [pc, #116]	; (80023a8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d125      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d126      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002354:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b10      	cmp	r3, #16
 800235c:	d11a      	bne.n	8002394 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800235e:	4b13      	ldr	r3, [pc, #76]	; (80023ac <HAL_ADC_ConfigChannel+0x1e8>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a13      	ldr	r2, [pc, #76]	; (80023b0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002364:	fba2 2303 	umull	r2, r3, r2, r3
 8002368:	0c9a      	lsrs	r2, r3, #18
 800236a:	4613      	mov	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002374:	e002      	b.n	800237c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	3b01      	subs	r3, #1
 800237a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f9      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x1b2>
 8002382:	e007      	b.n	8002394 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002388:	f043 0220 	orr.w	r2, r3, #32
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	40012400 	.word	0x40012400
 80023ac:	20000000 	.word	0x20000000
 80023b0:	431bde83 	.word	0x431bde83

080023b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d040      	beq.n	8002454 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0201 	orr.w	r2, r2, #1
 80023e0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023e2:	4b1f      	ldr	r3, [pc, #124]	; (8002460 <ADC_Enable+0xac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a1f      	ldr	r2, [pc, #124]	; (8002464 <ADC_Enable+0xb0>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	0c9b      	lsrs	r3, r3, #18
 80023ee:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023f0:	e002      	b.n	80023f8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f9      	bne.n	80023f2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023fe:	f7ff fbef 	bl	8001be0 <HAL_GetTick>
 8002402:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002404:	e01f      	b.n	8002446 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002406:	f7ff fbeb 	bl	8001be0 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d918      	bls.n	8002446 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b01      	cmp	r3, #1
 8002420:	d011      	beq.n	8002446 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	f043 0210 	orr.w	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e007      	b.n	8002456 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	2b01      	cmp	r3, #1
 8002452:	d1d8      	bne.n	8002406 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3710      	adds	r7, #16
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000
 8002464:	431bde83 	.word	0x431bde83

08002468 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d12e      	bne.n	80024e0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689a      	ldr	r2, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002492:	f7ff fba5 	bl	8001be0 <HAL_GetTick>
 8002496:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002498:	e01b      	b.n	80024d2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800249a:	f7ff fba1 	bl	8001be0 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d914      	bls.n	80024d2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10d      	bne.n	80024d2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ba:	f043 0210 	orr.w	r2, r3, #16
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c6:	f043 0201 	orr.w	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e007      	b.n	80024e2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d0dc      	beq.n	800249a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f4:	2300      	movs	r3, #0
 80024f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002502:	2b01      	cmp	r3, #1
 8002504:	d101      	bne.n	800250a <HAL_ADCEx_Calibration_Start+0x1e>
 8002506:	2302      	movs	r3, #2
 8002508:	e097      	b.n	800263a <HAL_ADCEx_Calibration_Start+0x14e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2201      	movs	r2, #1
 800250e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f7ff ffa8 	bl	8002468 <ADC_ConversionStop_Disable>
 8002518:	4603      	mov	r3, r0
 800251a:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7ff ff49 	bl	80023b4 <ADC_Enable>
 8002522:	4603      	mov	r3, r0
 8002524:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002526:	7dfb      	ldrb	r3, [r7, #23]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f040 8081 	bne.w	8002630 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002536:	f023 0302 	bic.w	r3, r3, #2
 800253a:	f043 0202 	orr.w	r2, r3, #2
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002542:	4b40      	ldr	r3, [pc, #256]	; (8002644 <HAL_ADCEx_Calibration_Start+0x158>)
 8002544:	681c      	ldr	r4, [r3, #0]
 8002546:	2002      	movs	r0, #2
 8002548:	f000 ffa8 	bl	800349c <HAL_RCCEx_GetPeriphCLKFreq>
 800254c:	4603      	mov	r3, r0
 800254e:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002552:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002554:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002556:	e002      	b.n	800255e <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	3b01      	subs	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f9      	bne.n	8002558 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0208 	orr.w	r2, r2, #8
 8002572:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002574:	f7ff fb34 	bl	8001be0 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800257a:	e01b      	b.n	80025b4 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800257c:	f7ff fb30 	bl	8001be0 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b0a      	cmp	r3, #10
 8002588:	d914      	bls.n	80025b4 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00d      	beq.n	80025b4 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	f023 0312 	bic.w	r3, r3, #18
 80025a0:	f043 0210 	orr.w	r2, r3, #16
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e042      	b.n	800263a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 0308 	and.w	r3, r3, #8
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1dc      	bne.n	800257c <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0204 	orr.w	r2, r2, #4
 80025d0:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80025d2:	f7ff fb05 	bl	8001be0 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80025d8:	e01b      	b.n	8002612 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80025da:	f7ff fb01 	bl	8001be0 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b0a      	cmp	r3, #10
 80025e6:	d914      	bls.n	8002612 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 0304 	and.w	r3, r3, #4
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00d      	beq.n	8002612 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fa:	f023 0312 	bic.w	r3, r3, #18
 80025fe:	f043 0210 	orr.w	r2, r3, #16
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e013      	b.n	800263a <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1dc      	bne.n	80025da <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	f023 0303 	bic.w	r3, r3, #3
 8002628:	f043 0201 	orr.w	r2, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002638:	7dfb      	ldrb	r3, [r7, #23]
}
 800263a:	4618      	mov	r0, r3
 800263c:	371c      	adds	r7, #28
 800263e:	46bd      	mov	sp, r7
 8002640:	bd90      	pop	{r4, r7, pc}
 8002642:	bf00      	nop
 8002644:	20000000 	.word	0x20000000

08002648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002658:	4b0c      	ldr	r3, [pc, #48]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002664:	4013      	ands	r3, r2
 8002666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002670:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800267a:	4a04      	ldr	r2, [pc, #16]	; (800268c <__NVIC_SetPriorityGrouping+0x44>)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	60d3      	str	r3, [r2, #12]
}
 8002680:	bf00      	nop
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002694:	4b04      	ldr	r3, [pc, #16]	; (80026a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	0a1b      	lsrs	r3, r3, #8
 800269a:	f003 0307 	and.w	r3, r3, #7
}
 800269e:	4618      	mov	r0, r3
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	e000ed00 	.word	0xe000ed00

080026ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	4603      	mov	r3, r0
 80026b4:	6039      	str	r1, [r7, #0]
 80026b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	db0a      	blt.n	80026d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	490c      	ldr	r1, [pc, #48]	; (80026f8 <__NVIC_SetPriority+0x4c>)
 80026c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ca:	0112      	lsls	r2, r2, #4
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	440b      	add	r3, r1
 80026d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d4:	e00a      	b.n	80026ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	4908      	ldr	r1, [pc, #32]	; (80026fc <__NVIC_SetPriority+0x50>)
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	3b04      	subs	r3, #4
 80026e4:	0112      	lsls	r2, r2, #4
 80026e6:	b2d2      	uxtb	r2, r2
 80026e8:	440b      	add	r3, r1
 80026ea:	761a      	strb	r2, [r3, #24]
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bc80      	pop	{r7}
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000e100 	.word	0xe000e100
 80026fc:	e000ed00 	.word	0xe000ed00

08002700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f003 0307 	and.w	r3, r3, #7
 8002712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f1c3 0307 	rsb	r3, r3, #7
 800271a:	2b04      	cmp	r3, #4
 800271c:	bf28      	it	cs
 800271e:	2304      	movcs	r3, #4
 8002720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3304      	adds	r3, #4
 8002726:	2b06      	cmp	r3, #6
 8002728:	d902      	bls.n	8002730 <NVIC_EncodePriority+0x30>
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3b03      	subs	r3, #3
 800272e:	e000      	b.n	8002732 <NVIC_EncodePriority+0x32>
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002734:	f04f 32ff 	mov.w	r2, #4294967295
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	401a      	ands	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002748:	f04f 31ff 	mov.w	r1, #4294967295
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43d9      	mvns	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002758:	4313      	orrs	r3, r2
         );
}
 800275a:	4618      	mov	r0, r3
 800275c:	3724      	adds	r7, #36	; 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	3b01      	subs	r3, #1
 8002770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002774:	d301      	bcc.n	800277a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002776:	2301      	movs	r3, #1
 8002778:	e00f      	b.n	800279a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800277a:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <SysTick_Config+0x40>)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3b01      	subs	r3, #1
 8002780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002782:	210f      	movs	r1, #15
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f7ff ff90 	bl	80026ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800278c:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <SysTick_Config+0x40>)
 800278e:	2200      	movs	r2, #0
 8002790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002792:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <SysTick_Config+0x40>)
 8002794:	2207      	movs	r2, #7
 8002796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	e000e010 	.word	0xe000e010

080027a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff49 	bl	8002648 <__NVIC_SetPriorityGrouping>
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027be:	b580      	push	{r7, lr}
 80027c0:	b086      	sub	sp, #24
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	4603      	mov	r3, r0
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
 80027ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027d0:	f7ff ff5e 	bl	8002690 <__NVIC_GetPriorityGrouping>
 80027d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	6978      	ldr	r0, [r7, #20]
 80027dc:	f7ff ff90 	bl	8002700 <NVIC_EncodePriority>
 80027e0:	4602      	mov	r2, r0
 80027e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff5f 	bl	80026ac <__NVIC_SetPriority>
}
 80027ee:	bf00      	nop
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffb0 	bl	8002764 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b08b      	sub	sp, #44	; 0x2c
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800281a:	2300      	movs	r3, #0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002822:	e161      	b.n	8002ae8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002824:	2201      	movs	r2, #1
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69fa      	ldr	r2, [r7, #28]
 8002834:	4013      	ands	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	429a      	cmp	r2, r3
 800283e:	f040 8150 	bne.w	8002ae2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a97      	ldr	r2, [pc, #604]	; (8002aa4 <HAL_GPIO_Init+0x294>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d05e      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 800284c:	4a95      	ldr	r2, [pc, #596]	; (8002aa4 <HAL_GPIO_Init+0x294>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d875      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 8002852:	4a95      	ldr	r2, [pc, #596]	; (8002aa8 <HAL_GPIO_Init+0x298>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d058      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 8002858:	4a93      	ldr	r2, [pc, #588]	; (8002aa8 <HAL_GPIO_Init+0x298>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d86f      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 800285e:	4a93      	ldr	r2, [pc, #588]	; (8002aac <HAL_GPIO_Init+0x29c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d052      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 8002864:	4a91      	ldr	r2, [pc, #580]	; (8002aac <HAL_GPIO_Init+0x29c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d869      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 800286a:	4a91      	ldr	r2, [pc, #580]	; (8002ab0 <HAL_GPIO_Init+0x2a0>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d04c      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 8002870:	4a8f      	ldr	r2, [pc, #572]	; (8002ab0 <HAL_GPIO_Init+0x2a0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d863      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 8002876:	4a8f      	ldr	r2, [pc, #572]	; (8002ab4 <HAL_GPIO_Init+0x2a4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d046      	beq.n	800290a <HAL_GPIO_Init+0xfa>
 800287c:	4a8d      	ldr	r2, [pc, #564]	; (8002ab4 <HAL_GPIO_Init+0x2a4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d85d      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 8002882:	2b12      	cmp	r3, #18
 8002884:	d82a      	bhi.n	80028dc <HAL_GPIO_Init+0xcc>
 8002886:	2b12      	cmp	r3, #18
 8002888:	d859      	bhi.n	800293e <HAL_GPIO_Init+0x12e>
 800288a:	a201      	add	r2, pc, #4	; (adr r2, 8002890 <HAL_GPIO_Init+0x80>)
 800288c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002890:	0800290b 	.word	0x0800290b
 8002894:	080028e5 	.word	0x080028e5
 8002898:	080028f7 	.word	0x080028f7
 800289c:	08002939 	.word	0x08002939
 80028a0:	0800293f 	.word	0x0800293f
 80028a4:	0800293f 	.word	0x0800293f
 80028a8:	0800293f 	.word	0x0800293f
 80028ac:	0800293f 	.word	0x0800293f
 80028b0:	0800293f 	.word	0x0800293f
 80028b4:	0800293f 	.word	0x0800293f
 80028b8:	0800293f 	.word	0x0800293f
 80028bc:	0800293f 	.word	0x0800293f
 80028c0:	0800293f 	.word	0x0800293f
 80028c4:	0800293f 	.word	0x0800293f
 80028c8:	0800293f 	.word	0x0800293f
 80028cc:	0800293f 	.word	0x0800293f
 80028d0:	0800293f 	.word	0x0800293f
 80028d4:	080028ed 	.word	0x080028ed
 80028d8:	08002901 	.word	0x08002901
 80028dc:	4a76      	ldr	r2, [pc, #472]	; (8002ab8 <HAL_GPIO_Init+0x2a8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028e2:	e02c      	b.n	800293e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	623b      	str	r3, [r7, #32]
          break;
 80028ea:	e029      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	3304      	adds	r3, #4
 80028f2:	623b      	str	r3, [r7, #32]
          break;
 80028f4:	e024      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	3308      	adds	r3, #8
 80028fc:	623b      	str	r3, [r7, #32]
          break;
 80028fe:	e01f      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	330c      	adds	r3, #12
 8002906:	623b      	str	r3, [r7, #32]
          break;
 8002908:	e01a      	b.n	8002940 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d102      	bne.n	8002918 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002912:	2304      	movs	r3, #4
 8002914:	623b      	str	r3, [r7, #32]
          break;
 8002916:	e013      	b.n	8002940 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002920:	2308      	movs	r3, #8
 8002922:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	611a      	str	r2, [r3, #16]
          break;
 800292a:	e009      	b.n	8002940 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800292c:	2308      	movs	r3, #8
 800292e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	615a      	str	r2, [r3, #20]
          break;
 8002936:	e003      	b.n	8002940 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002938:	2300      	movs	r3, #0
 800293a:	623b      	str	r3, [r7, #32]
          break;
 800293c:	e000      	b.n	8002940 <HAL_GPIO_Init+0x130>
          break;
 800293e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2bff      	cmp	r3, #255	; 0xff
 8002944:	d801      	bhi.n	800294a <HAL_GPIO_Init+0x13a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	e001      	b.n	800294e <HAL_GPIO_Init+0x13e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3304      	adds	r3, #4
 800294e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	2bff      	cmp	r3, #255	; 0xff
 8002954:	d802      	bhi.n	800295c <HAL_GPIO_Init+0x14c>
 8002956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	e002      	b.n	8002962 <HAL_GPIO_Init+0x152>
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	3b08      	subs	r3, #8
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	210f      	movs	r1, #15
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	401a      	ands	r2, r3
 8002974:	6a39      	ldr	r1, [r7, #32]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	fa01 f303 	lsl.w	r3, r1, r3
 800297c:	431a      	orrs	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 80a9 	beq.w	8002ae2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002990:	4b4a      	ldr	r3, [pc, #296]	; (8002abc <HAL_GPIO_Init+0x2ac>)
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	4a49      	ldr	r2, [pc, #292]	; (8002abc <HAL_GPIO_Init+0x2ac>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6193      	str	r3, [r2, #24]
 800299c:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_GPIO_Init+0x2ac>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029a8:	4a45      	ldr	r2, [pc, #276]	; (8002ac0 <HAL_GPIO_Init+0x2b0>)
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	3302      	adds	r3, #2
 80029b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	220f      	movs	r2, #15
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4013      	ands	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a3d      	ldr	r2, [pc, #244]	; (8002ac4 <HAL_GPIO_Init+0x2b4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00d      	beq.n	80029f0 <HAL_GPIO_Init+0x1e0>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a3c      	ldr	r2, [pc, #240]	; (8002ac8 <HAL_GPIO_Init+0x2b8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d007      	beq.n	80029ec <HAL_GPIO_Init+0x1dc>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a3b      	ldr	r2, [pc, #236]	; (8002acc <HAL_GPIO_Init+0x2bc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d101      	bne.n	80029e8 <HAL_GPIO_Init+0x1d8>
 80029e4:	2302      	movs	r3, #2
 80029e6:	e004      	b.n	80029f2 <HAL_GPIO_Init+0x1e2>
 80029e8:	2303      	movs	r3, #3
 80029ea:	e002      	b.n	80029f2 <HAL_GPIO_Init+0x1e2>
 80029ec:	2301      	movs	r3, #1
 80029ee:	e000      	b.n	80029f2 <HAL_GPIO_Init+0x1e2>
 80029f0:	2300      	movs	r3, #0
 80029f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f4:	f002 0203 	and.w	r2, r2, #3
 80029f8:	0092      	lsls	r2, r2, #2
 80029fa:	4093      	lsls	r3, r2
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a02:	492f      	ldr	r1, [pc, #188]	; (8002ac0 <HAL_GPIO_Init+0x2b0>)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	089b      	lsrs	r3, r3, #2
 8002a08:	3302      	adds	r3, #2
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d006      	beq.n	8002a2a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a1c:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	492b      	ldr	r1, [pc, #172]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	608b      	str	r3, [r1, #8]
 8002a28:	e006      	b.n	8002a38 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a2a:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	4927      	ldr	r1, [pc, #156]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d006      	beq.n	8002a52 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a44:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	4921      	ldr	r1, [pc, #132]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60cb      	str	r3, [r1, #12]
 8002a50:	e006      	b.n	8002a60 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a52:	4b1f      	ldr	r3, [pc, #124]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 8002a54:	68da      	ldr	r2, [r3, #12]
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	43db      	mvns	r3, r3
 8002a5a:	491d      	ldr	r1, [pc, #116]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d006      	beq.n	8002a7a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002a6c:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	4917      	ldr	r1, [pc, #92]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
 8002a78:	e006      	b.n	8002a88 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002a7a:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 8002a7c:	685a      	ldr	r2, [r3, #4]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	4913      	ldr	r1, [pc, #76]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d01f      	beq.n	8002ad4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002a94:	4b0e      	ldr	r3, [pc, #56]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	490d      	ldr	r1, [pc, #52]	; (8002ad0 <HAL_GPIO_Init+0x2c0>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]
 8002aa0:	e01f      	b.n	8002ae2 <HAL_GPIO_Init+0x2d2>
 8002aa2:	bf00      	nop
 8002aa4:	10320000 	.word	0x10320000
 8002aa8:	10310000 	.word	0x10310000
 8002aac:	10220000 	.word	0x10220000
 8002ab0:	10210000 	.word	0x10210000
 8002ab4:	10120000 	.word	0x10120000
 8002ab8:	10110000 	.word	0x10110000
 8002abc:	40021000 	.word	0x40021000
 8002ac0:	40010000 	.word	0x40010000
 8002ac4:	40010800 	.word	0x40010800
 8002ac8:	40010c00 	.word	0x40010c00
 8002acc:	40011000 	.word	0x40011000
 8002ad0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_GPIO_Init+0x2f4>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	4909      	ldr	r1, [pc, #36]	; (8002b04 <HAL_GPIO_Init+0x2f4>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	fa22 f303 	lsr.w	r3, r2, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f47f ae96 	bne.w	8002824 <HAL_GPIO_Init+0x14>
  }
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	372c      	adds	r7, #44	; 0x2c
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr
 8002b04:	40010400 	.word	0x40010400

08002b08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	460b      	mov	r3, r1
 8002b12:	807b      	strh	r3, [r7, #2]
 8002b14:	4613      	mov	r3, r2
 8002b16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b18:	787b      	ldrb	r3, [r7, #1]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b24:	e003      	b.n	8002b2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	041a      	lsls	r2, r3, #16
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	611a      	str	r2, [r3, #16]
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e272      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8087 	beq.w	8002c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b58:	4b92      	ldr	r3, [pc, #584]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d00c      	beq.n	8002b7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b64:	4b8f      	ldr	r3, [pc, #572]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d112      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
 8002b70:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7c:	d10b      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7e:	4b89      	ldr	r3, [pc, #548]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x12c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d168      	bne.n	8002c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e24c      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x76>
 8002ba0:	4b80      	ldr	r3, [pc, #512]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a7f      	ldr	r2, [pc, #508]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e02e      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x98>
 8002bb6:	4b7b      	ldr	r3, [pc, #492]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7a      	ldr	r2, [pc, #488]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b78      	ldr	r3, [pc, #480]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a77      	ldr	r2, [pc, #476]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xbc>
 8002bda:	4b72      	ldr	r3, [pc, #456]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a71      	ldr	r2, [pc, #452]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b6f      	ldr	r3, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6e      	ldr	r2, [pc, #440]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bf4:	4b6b      	ldr	r3, [pc, #428]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6a      	ldr	r2, [pc, #424]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b68      	ldr	r3, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a67      	ldr	r2, [pc, #412]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe ffe4 	bl	8001be0 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fe ffe0 	bl	8001be0 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e200      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b5d      	ldr	r3, [pc, #372]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xe4>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fe ffd0 	bl	8001be0 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fe ffcc 	bl	8001be0 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1ec      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x10c>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c72:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c7e:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
 8002c8a:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1c0      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4939      	ldr	r1, [pc, #228]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	e03a      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7fe ff85 	bl	8001be0 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cda:	f7fe ff81 	bl	8001be0 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e1a1      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4927      	ldr	r1, [pc, #156]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fe ff64 	bl	8001be0 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fe ff60 	bl	8001be0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e180      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d03a      	beq.n	8002dbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d019      	beq.n	8002d82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d54:	f7fe ff44 	bl	8001be0 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7fe ff40 	bl	8001be0 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e160      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f000 faba 	bl	80032f4 <RCC_Delay>
 8002d80:	e01c      	b.n	8002dbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d88:	f7fe ff2a 	bl	8001be0 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8e:	e00f      	b.n	8002db0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fe ff26 	bl	8001be0 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d908      	bls.n	8002db0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e146      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	42420000 	.word	0x42420000
 8002dac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b92      	ldr	r3, [pc, #584]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e9      	bne.n	8002d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a6 	beq.w	8002f16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b8b      	ldr	r3, [pc, #556]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10d      	bne.n	8002df6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	4b88      	ldr	r3, [pc, #544]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4a87      	ldr	r2, [pc, #540]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de4:	61d3      	str	r3, [r2, #28]
 8002de6:	4b85      	ldr	r3, [pc, #532]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b82      	ldr	r3, [pc, #520]	; (8003000 <HAL_RCC_OscConfig+0x4c8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d118      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e02:	4b7f      	ldr	r3, [pc, #508]	; (8003000 <HAL_RCC_OscConfig+0x4c8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a7e      	ldr	r2, [pc, #504]	; (8003000 <HAL_RCC_OscConfig+0x4c8>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe fee7 	bl	8001be0 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e16:	f7fe fee3 	bl	8001be0 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b64      	cmp	r3, #100	; 0x64
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e103      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	4b75      	ldr	r3, [pc, #468]	; (8003000 <HAL_RCC_OscConfig+0x4c8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCC_OscConfig+0x312>
 8002e3c:	4b6f      	ldr	r3, [pc, #444]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4a6e      	ldr	r2, [pc, #440]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6213      	str	r3, [r2, #32]
 8002e48:	e02d      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x334>
 8002e52:	4b6a      	ldr	r3, [pc, #424]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4a69      	ldr	r2, [pc, #420]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	6213      	str	r3, [r2, #32]
 8002e5e:	4b67      	ldr	r3, [pc, #412]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4a66      	ldr	r2, [pc, #408]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	6213      	str	r3, [r2, #32]
 8002e6a:	e01c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCC_OscConfig+0x356>
 8002e74:	4b61      	ldr	r3, [pc, #388]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4a60      	ldr	r2, [pc, #384]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	f043 0304 	orr.w	r3, r3, #4
 8002e7e:	6213      	str	r3, [r2, #32]
 8002e80:	4b5e      	ldr	r3, [pc, #376]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4a5d      	ldr	r2, [pc, #372]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6213      	str	r3, [r2, #32]
 8002e8c:	e00b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e8e:	4b5b      	ldr	r3, [pc, #364]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a5a      	ldr	r2, [pc, #360]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6213      	str	r3, [r2, #32]
 8002e9a:	4b58      	ldr	r3, [pc, #352]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a57      	ldr	r2, [pc, #348]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d015      	beq.n	8002eda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fe fe97 	bl	8001be0 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fe fe93 	bl	8001be0 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0b1      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	4b4b      	ldr	r3, [pc, #300]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ee      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x37e>
 8002ed8:	e014      	b.n	8002f04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eda:	f7fe fe81 	bl	8001be0 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fe fe7d 	bl	8001be0 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e09b      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	4b40      	ldr	r3, [pc, #256]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ee      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0a:	4b3c      	ldr	r3, [pc, #240]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4a3b      	ldr	r2, [pc, #236]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8087 	beq.w	800302e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f20:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d061      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d146      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f34:	4b33      	ldr	r3, [pc, #204]	; (8003004 <HAL_RCC_OscConfig+0x4cc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fe fe51 	bl	8001be0 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fe fe4d 	bl	8001be0 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e06d      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f54:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d108      	bne.n	8002f7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f6a:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	4921      	ldr	r1, [pc, #132]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f7c:	4b1f      	ldr	r3, [pc, #124]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a19      	ldr	r1, [r3, #32]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	491b      	ldr	r1, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f94:	4b1b      	ldr	r3, [pc, #108]	; (8003004 <HAL_RCC_OscConfig+0x4cc>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fe21 	bl	8001be0 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7fe fe1d 	bl	8001be0 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e03d      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb4:	4b11      	ldr	r3, [pc, #68]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x46a>
 8002fc0:	e035      	b.n	800302e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <HAL_RCC_OscConfig+0x4cc>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fe0a 	bl	8001be0 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fe fe06 	bl	8001be0 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e026      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_RCC_OscConfig+0x4c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x498>
 8002fee:	e01e      	b.n	800302e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e019      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
 8002ffc:	40021000 	.word	0x40021000
 8003000:	40007000 	.word	0x40007000
 8003004:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003008:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <HAL_RCC_OscConfig+0x500>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a1b      	ldr	r3, [r3, #32]
 8003018:	429a      	cmp	r2, r3
 800301a:	d106      	bne.n	800302a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003026:	429a      	cmp	r2, r3
 8003028:	d001      	beq.n	800302e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000

0800303c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0d0      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003050:	4b6a      	ldr	r3, [pc, #424]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d910      	bls.n	8003080 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b67      	ldr	r3, [pc, #412]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 0207 	bic.w	r2, r3, #7
 8003066:	4965      	ldr	r1, [pc, #404]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b63      	ldr	r3, [pc, #396]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d001      	beq.n	8003080 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0b8      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0302 	and.w	r3, r3, #2
 8003088:	2b00      	cmp	r3, #0
 800308a:	d020      	beq.n	80030ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003098:	4b59      	ldr	r3, [pc, #356]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	4a58      	ldr	r2, [pc, #352]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80030a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d005      	beq.n	80030bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030b0:	4b53      	ldr	r3, [pc, #332]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	4a52      	ldr	r2, [pc, #328]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030bc:	4b50      	ldr	r3, [pc, #320]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	494d      	ldr	r1, [pc, #308]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d040      	beq.n	800315c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d115      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e07f      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fa:	4b41      	ldr	r3, [pc, #260]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e073      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310a:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e06b      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311a:	4b39      	ldr	r3, [pc, #228]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f023 0203 	bic.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4936      	ldr	r1, [pc, #216]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 8003128:	4313      	orrs	r3, r2
 800312a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800312c:	f7fe fd58 	bl	8001be0 <HAL_GetTick>
 8003130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	e00a      	b.n	800314a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003134:	f7fe fd54 	bl	8001be0 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e053      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	4b2d      	ldr	r3, [pc, #180]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 020c 	and.w	r2, r3, #12
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	429a      	cmp	r2, r3
 800315a:	d1eb      	bne.n	8003134 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800315c:	4b27      	ldr	r3, [pc, #156]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d210      	bcs.n	800318c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b24      	ldr	r3, [pc, #144]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 0207 	bic.w	r2, r3, #7
 8003172:	4922      	ldr	r1, [pc, #136]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317a:	4b20      	ldr	r3, [pc, #128]	; (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	683a      	ldr	r2, [r7, #0]
 8003184:	429a      	cmp	r2, r3
 8003186:	d001      	beq.n	800318c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e032      	b.n	80031f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d008      	beq.n	80031aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	4916      	ldr	r1, [pc, #88]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0308 	and.w	r3, r3, #8
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d009      	beq.n	80031ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031b6:	4b12      	ldr	r3, [pc, #72]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	490e      	ldr	r1, [pc, #56]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031ca:	f000 f821 	bl	8003210 <HAL_RCC_GetSysClockFreq>
 80031ce:	4602      	mov	r2, r0
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 030f 	and.w	r3, r3, #15
 80031da:	490a      	ldr	r1, [pc, #40]	; (8003204 <HAL_RCC_ClockConfig+0x1c8>)
 80031dc:	5ccb      	ldrb	r3, [r1, r3]
 80031de:	fa22 f303 	lsr.w	r3, r2, r3
 80031e2:	4a09      	ldr	r2, [pc, #36]	; (8003208 <HAL_RCC_ClockConfig+0x1cc>)
 80031e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <HAL_RCC_ClockConfig+0x1d0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe fcb6 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	40022000 	.word	0x40022000
 8003200:	40021000 	.word	0x40021000
 8003204:	08007250 	.word	0x08007250
 8003208:	20000000 	.word	0x20000000
 800320c:	20000004 	.word	0x20000004

08003210 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	b087      	sub	sp, #28
 8003214:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	2300      	movs	r3, #0
 800321c:	60bb      	str	r3, [r7, #8]
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800322a:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x94>)
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f003 030c 	and.w	r3, r3, #12
 8003236:	2b04      	cmp	r3, #4
 8003238:	d002      	beq.n	8003240 <HAL_RCC_GetSysClockFreq+0x30>
 800323a:	2b08      	cmp	r3, #8
 800323c:	d003      	beq.n	8003246 <HAL_RCC_GetSysClockFreq+0x36>
 800323e:	e027      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003240:	4b19      	ldr	r3, [pc, #100]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003242:	613b      	str	r3, [r7, #16]
      break;
 8003244:	e027      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	0c9b      	lsrs	r3, r3, #18
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	4a17      	ldr	r2, [pc, #92]	; (80032ac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003250:	5cd3      	ldrb	r3, [r2, r3]
 8003252:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d010      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800325e:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	0c5b      	lsrs	r3, r3, #17
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	4a11      	ldr	r2, [pc, #68]	; (80032b0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800326a:	5cd3      	ldrb	r3, [r2, r3]
 800326c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003272:	fb03 f202 	mul.w	r2, r3, r2
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	e004      	b.n	800328a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a0c      	ldr	r2, [pc, #48]	; (80032b4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003284:	fb02 f303 	mul.w	r3, r2, r3
 8003288:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	613b      	str	r3, [r7, #16]
      break;
 800328e:	e002      	b.n	8003296 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003290:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003292:	613b      	str	r3, [r7, #16]
      break;
 8003294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003296:	693b      	ldr	r3, [r7, #16]
}
 8003298:	4618      	mov	r0, r3
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	bc80      	pop	{r7}
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	007a1200 	.word	0x007a1200
 80032ac:	08007268 	.word	0x08007268
 80032b0:	08007278 	.word	0x08007278
 80032b4:	003d0900 	.word	0x003d0900

080032b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032bc:	4b02      	ldr	r3, [pc, #8]	; (80032c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bc80      	pop	{r7}
 80032c6:	4770      	bx	lr
 80032c8:	20000000 	.word	0x20000000

080032cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80032d0:	f7ff fff2 	bl	80032b8 <HAL_RCC_GetHCLKFreq>
 80032d4:	4602      	mov	r2, r0
 80032d6:	4b05      	ldr	r3, [pc, #20]	; (80032ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	0adb      	lsrs	r3, r3, #11
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	4903      	ldr	r1, [pc, #12]	; (80032f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032e2:	5ccb      	ldrb	r3, [r1, r3]
 80032e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021000 	.word	0x40021000
 80032f0:	08007260 	.word	0x08007260

080032f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032fc:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <RCC_Delay+0x34>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0a      	ldr	r2, [pc, #40]	; (800332c <RCC_Delay+0x38>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0a5b      	lsrs	r3, r3, #9
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003310:	bf00      	nop
  }
  while (Delay --);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1e5a      	subs	r2, r3, #1
 8003316:	60fa      	str	r2, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1f9      	bne.n	8003310 <RCC_Delay+0x1c>
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	20000000 	.word	0x20000000
 800332c:	10624dd3 	.word	0x10624dd3

08003330 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003338:	2300      	movs	r3, #0
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	2300      	movs	r3, #0
 800333e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0301 	and.w	r3, r3, #1
 8003348:	2b00      	cmp	r3, #0
 800334a:	d07d      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800334c:	2300      	movs	r3, #0
 800334e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003350:	4b4f      	ldr	r3, [pc, #316]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10d      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800335c:	4b4c      	ldr	r3, [pc, #304]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	4a4b      	ldr	r2, [pc, #300]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003366:	61d3      	str	r3, [r2, #28]
 8003368:	4b49      	ldr	r3, [pc, #292]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003374:	2301      	movs	r3, #1
 8003376:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	4b46      	ldr	r3, [pc, #280]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d118      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003384:	4b43      	ldr	r3, [pc, #268]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a42      	ldr	r2, [pc, #264]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800338a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800338e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003390:	f7fe fc26 	bl	8001be0 <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003396:	e008      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003398:	f7fe fc22 	bl	8001be0 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	2b64      	cmp	r3, #100	; 0x64
 80033a4:	d901      	bls.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e06d      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033aa:	4b3a      	ldr	r3, [pc, #232]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0f0      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033b6:	4b36      	ldr	r3, [pc, #216]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d02e      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d027      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033d4:	4b2e      	ldr	r3, [pc, #184]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033de:	4b2e      	ldr	r3, [pc, #184]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033e0:	2201      	movs	r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033e4:	4b2c      	ldr	r3, [pc, #176]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033ea:	4a29      	ldr	r2, [pc, #164]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d014      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fa:	f7fe fbf1 	bl	8001be0 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003400:	e00a      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003402:	f7fe fbed 	bl	8001be0 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e036      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003418:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0ee      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003424:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4917      	ldr	r1, [pc, #92]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003432:	4313      	orrs	r3, r2
 8003434:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003436:	7dfb      	ldrb	r3, [r7, #23]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d105      	bne.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800343c:	4b14      	ldr	r3, [pc, #80]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	4a13      	ldr	r2, [pc, #76]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003442:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003446:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d008      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003454:	4b0e      	ldr	r3, [pc, #56]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	490b      	ldr	r1, [pc, #44]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0310 	and.w	r3, r3, #16
 800346e:	2b00      	cmp	r3, #0
 8003470:	d008      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003472:	4b07      	ldr	r3, [pc, #28]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	4904      	ldr	r1, [pc, #16]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003480:	4313      	orrs	r3, r2
 8003482:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
 8003498:	42420440 	.word	0x42420440

0800349c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	2300      	movs	r3, #0
 80034ae:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b10      	cmp	r3, #16
 80034c2:	f200 808a 	bhi.w	80035da <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d045      	beq.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d075      	beq.n	80035be <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80034d2:	e082      	b.n	80035da <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80034d4:	4b46      	ldr	r3, [pc, #280]	; (80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80034da:	4b45      	ldr	r3, [pc, #276]	; (80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d07b      	beq.n	80035de <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	0c9b      	lsrs	r3, r3, #18
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	4a41      	ldr	r2, [pc, #260]	; (80035f4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80034f0:	5cd3      	ldrb	r3, [r2, r3]
 80034f2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d015      	beq.n	800352a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034fe:	4b3c      	ldr	r3, [pc, #240]	; (80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	0c5b      	lsrs	r3, r3, #17
 8003504:	f003 0301 	and.w	r3, r3, #1
 8003508:	4a3b      	ldr	r2, [pc, #236]	; (80035f8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800350a:	5cd3      	ldrb	r3, [r2, r3]
 800350c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00d      	beq.n	8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003518:	4a38      	ldr	r2, [pc, #224]	; (80035fc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	61fb      	str	r3, [r7, #28]
 8003528:	e004      	b.n	8003534 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	4a34      	ldr	r2, [pc, #208]	; (8003600 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800352e:	fb02 f303 	mul.w	r3, r2, r3
 8003532:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003534:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003540:	d102      	bne.n	8003548 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	61bb      	str	r3, [r7, #24]
      break;
 8003546:	e04a      	b.n	80035de <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	4a2d      	ldr	r2, [pc, #180]	; (8003604 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	61bb      	str	r3, [r7, #24]
      break;
 8003556:	e042      	b.n	80035de <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003558:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003568:	d108      	bne.n	800357c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d003      	beq.n	800357c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003574:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003578:	61bb      	str	r3, [r7, #24]
 800357a:	e01f      	b.n	80035bc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003586:	d109      	bne.n	800359c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003588:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003594:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	e00f      	b.n	80035bc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035a6:	d11c      	bne.n	80035e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d016      	beq.n	80035e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80035b4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80035b8:	61bb      	str	r3, [r7, #24]
      break;
 80035ba:	e012      	b.n	80035e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80035bc:	e011      	b.n	80035e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80035be:	f7ff fe85 	bl	80032cc <HAL_RCC_GetPCLK2Freq>
 80035c2:	4602      	mov	r2, r0
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	0b9b      	lsrs	r3, r3, #14
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	3301      	adds	r3, #1
 80035d0:	005b      	lsls	r3, r3, #1
 80035d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d6:	61bb      	str	r3, [r7, #24]
      break;
 80035d8:	e004      	b.n	80035e4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80035da:	bf00      	nop
 80035dc:	e002      	b.n	80035e4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80035de:	bf00      	nop
 80035e0:	e000      	b.n	80035e4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80035e2:	bf00      	nop
    }
  }
  return (frequency);
 80035e4:	69bb      	ldr	r3, [r7, #24]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	0800727c 	.word	0x0800727c
 80035f8:	0800728c 	.word	0x0800728c
 80035fc:	007a1200 	.word	0x007a1200
 8003600:	003d0900 	.word	0x003d0900
 8003604:	aaaaaaab 	.word	0xaaaaaaab

08003608 <__errno>:
 8003608:	4b01      	ldr	r3, [pc, #4]	; (8003610 <__errno+0x8>)
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	2000000c 	.word	0x2000000c

08003614 <__libc_init_array>:
 8003614:	b570      	push	{r4, r5, r6, lr}
 8003616:	2600      	movs	r6, #0
 8003618:	4d0c      	ldr	r5, [pc, #48]	; (800364c <__libc_init_array+0x38>)
 800361a:	4c0d      	ldr	r4, [pc, #52]	; (8003650 <__libc_init_array+0x3c>)
 800361c:	1b64      	subs	r4, r4, r5
 800361e:	10a4      	asrs	r4, r4, #2
 8003620:	42a6      	cmp	r6, r4
 8003622:	d109      	bne.n	8003638 <__libc_init_array+0x24>
 8003624:	f003 fdee 	bl	8007204 <_init>
 8003628:	2600      	movs	r6, #0
 800362a:	4d0a      	ldr	r5, [pc, #40]	; (8003654 <__libc_init_array+0x40>)
 800362c:	4c0a      	ldr	r4, [pc, #40]	; (8003658 <__libc_init_array+0x44>)
 800362e:	1b64      	subs	r4, r4, r5
 8003630:	10a4      	asrs	r4, r4, #2
 8003632:	42a6      	cmp	r6, r4
 8003634:	d105      	bne.n	8003642 <__libc_init_array+0x2e>
 8003636:	bd70      	pop	{r4, r5, r6, pc}
 8003638:	f855 3b04 	ldr.w	r3, [r5], #4
 800363c:	4798      	blx	r3
 800363e:	3601      	adds	r6, #1
 8003640:	e7ee      	b.n	8003620 <__libc_init_array+0xc>
 8003642:	f855 3b04 	ldr.w	r3, [r5], #4
 8003646:	4798      	blx	r3
 8003648:	3601      	adds	r6, #1
 800364a:	e7f2      	b.n	8003632 <__libc_init_array+0x1e>
 800364c:	08007a3c 	.word	0x08007a3c
 8003650:	08007a3c 	.word	0x08007a3c
 8003654:	08007a3c 	.word	0x08007a3c
 8003658:	08007a40 	.word	0x08007a40

0800365c <memset>:
 800365c:	4603      	mov	r3, r0
 800365e:	4402      	add	r2, r0
 8003660:	4293      	cmp	r3, r2
 8003662:	d100      	bne.n	8003666 <memset+0xa>
 8003664:	4770      	bx	lr
 8003666:	f803 1b01 	strb.w	r1, [r3], #1
 800366a:	e7f9      	b.n	8003660 <memset+0x4>

0800366c <__cvt>:
 800366c:	2b00      	cmp	r3, #0
 800366e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003672:	461f      	mov	r7, r3
 8003674:	bfbb      	ittet	lt
 8003676:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800367a:	461f      	movlt	r7, r3
 800367c:	2300      	movge	r3, #0
 800367e:	232d      	movlt	r3, #45	; 0x2d
 8003680:	b088      	sub	sp, #32
 8003682:	4614      	mov	r4, r2
 8003684:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003686:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003688:	7013      	strb	r3, [r2, #0]
 800368a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800368c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003690:	f023 0820 	bic.w	r8, r3, #32
 8003694:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003698:	d005      	beq.n	80036a6 <__cvt+0x3a>
 800369a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800369e:	d100      	bne.n	80036a2 <__cvt+0x36>
 80036a0:	3501      	adds	r5, #1
 80036a2:	2302      	movs	r3, #2
 80036a4:	e000      	b.n	80036a8 <__cvt+0x3c>
 80036a6:	2303      	movs	r3, #3
 80036a8:	aa07      	add	r2, sp, #28
 80036aa:	9204      	str	r2, [sp, #16]
 80036ac:	aa06      	add	r2, sp, #24
 80036ae:	e9cd a202 	strd	sl, r2, [sp, #8]
 80036b2:	e9cd 3500 	strd	r3, r5, [sp]
 80036b6:	4622      	mov	r2, r4
 80036b8:	463b      	mov	r3, r7
 80036ba:	f000 fcf9 	bl	80040b0 <_dtoa_r>
 80036be:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80036c2:	4606      	mov	r6, r0
 80036c4:	d102      	bne.n	80036cc <__cvt+0x60>
 80036c6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80036c8:	07db      	lsls	r3, r3, #31
 80036ca:	d522      	bpl.n	8003712 <__cvt+0xa6>
 80036cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80036d0:	eb06 0905 	add.w	r9, r6, r5
 80036d4:	d110      	bne.n	80036f8 <__cvt+0x8c>
 80036d6:	7833      	ldrb	r3, [r6, #0]
 80036d8:	2b30      	cmp	r3, #48	; 0x30
 80036da:	d10a      	bne.n	80036f2 <__cvt+0x86>
 80036dc:	2200      	movs	r2, #0
 80036de:	2300      	movs	r3, #0
 80036e0:	4620      	mov	r0, r4
 80036e2:	4639      	mov	r1, r7
 80036e4:	f7fd f960 	bl	80009a8 <__aeabi_dcmpeq>
 80036e8:	b918      	cbnz	r0, 80036f2 <__cvt+0x86>
 80036ea:	f1c5 0501 	rsb	r5, r5, #1
 80036ee:	f8ca 5000 	str.w	r5, [sl]
 80036f2:	f8da 3000 	ldr.w	r3, [sl]
 80036f6:	4499      	add	r9, r3
 80036f8:	2200      	movs	r2, #0
 80036fa:	2300      	movs	r3, #0
 80036fc:	4620      	mov	r0, r4
 80036fe:	4639      	mov	r1, r7
 8003700:	f7fd f952 	bl	80009a8 <__aeabi_dcmpeq>
 8003704:	b108      	cbz	r0, 800370a <__cvt+0x9e>
 8003706:	f8cd 901c 	str.w	r9, [sp, #28]
 800370a:	2230      	movs	r2, #48	; 0x30
 800370c:	9b07      	ldr	r3, [sp, #28]
 800370e:	454b      	cmp	r3, r9
 8003710:	d307      	bcc.n	8003722 <__cvt+0xb6>
 8003712:	4630      	mov	r0, r6
 8003714:	9b07      	ldr	r3, [sp, #28]
 8003716:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003718:	1b9b      	subs	r3, r3, r6
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	b008      	add	sp, #32
 800371e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003722:	1c59      	adds	r1, r3, #1
 8003724:	9107      	str	r1, [sp, #28]
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e7f0      	b.n	800370c <__cvt+0xa0>

0800372a <__exponent>:
 800372a:	4603      	mov	r3, r0
 800372c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800372e:	2900      	cmp	r1, #0
 8003730:	f803 2b02 	strb.w	r2, [r3], #2
 8003734:	bfb6      	itet	lt
 8003736:	222d      	movlt	r2, #45	; 0x2d
 8003738:	222b      	movge	r2, #43	; 0x2b
 800373a:	4249      	neglt	r1, r1
 800373c:	2909      	cmp	r1, #9
 800373e:	7042      	strb	r2, [r0, #1]
 8003740:	dd2b      	ble.n	800379a <__exponent+0x70>
 8003742:	f10d 0407 	add.w	r4, sp, #7
 8003746:	46a4      	mov	ip, r4
 8003748:	270a      	movs	r7, #10
 800374a:	fb91 f6f7 	sdiv	r6, r1, r7
 800374e:	460a      	mov	r2, r1
 8003750:	46a6      	mov	lr, r4
 8003752:	fb07 1516 	mls	r5, r7, r6, r1
 8003756:	2a63      	cmp	r2, #99	; 0x63
 8003758:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800375c:	4631      	mov	r1, r6
 800375e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003762:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003766:	dcf0      	bgt.n	800374a <__exponent+0x20>
 8003768:	3130      	adds	r1, #48	; 0x30
 800376a:	f1ae 0502 	sub.w	r5, lr, #2
 800376e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003772:	4629      	mov	r1, r5
 8003774:	1c44      	adds	r4, r0, #1
 8003776:	4561      	cmp	r1, ip
 8003778:	d30a      	bcc.n	8003790 <__exponent+0x66>
 800377a:	f10d 0209 	add.w	r2, sp, #9
 800377e:	eba2 020e 	sub.w	r2, r2, lr
 8003782:	4565      	cmp	r5, ip
 8003784:	bf88      	it	hi
 8003786:	2200      	movhi	r2, #0
 8003788:	4413      	add	r3, r2
 800378a:	1a18      	subs	r0, r3, r0
 800378c:	b003      	add	sp, #12
 800378e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003790:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003794:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003798:	e7ed      	b.n	8003776 <__exponent+0x4c>
 800379a:	2330      	movs	r3, #48	; 0x30
 800379c:	3130      	adds	r1, #48	; 0x30
 800379e:	7083      	strb	r3, [r0, #2]
 80037a0:	70c1      	strb	r1, [r0, #3]
 80037a2:	1d03      	adds	r3, r0, #4
 80037a4:	e7f1      	b.n	800378a <__exponent+0x60>
	...

080037a8 <_printf_float>:
 80037a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037ac:	b091      	sub	sp, #68	; 0x44
 80037ae:	460c      	mov	r4, r1
 80037b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80037b4:	4616      	mov	r6, r2
 80037b6:	461f      	mov	r7, r3
 80037b8:	4605      	mov	r5, r0
 80037ba:	f001 fa67 	bl	8004c8c <_localeconv_r>
 80037be:	6803      	ldr	r3, [r0, #0]
 80037c0:	4618      	mov	r0, r3
 80037c2:	9309      	str	r3, [sp, #36]	; 0x24
 80037c4:	f7fc fcc4 	bl	8000150 <strlen>
 80037c8:	2300      	movs	r3, #0
 80037ca:	930e      	str	r3, [sp, #56]	; 0x38
 80037cc:	f8d8 3000 	ldr.w	r3, [r8]
 80037d0:	900a      	str	r0, [sp, #40]	; 0x28
 80037d2:	3307      	adds	r3, #7
 80037d4:	f023 0307 	bic.w	r3, r3, #7
 80037d8:	f103 0208 	add.w	r2, r3, #8
 80037dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80037e0:	f8d4 b000 	ldr.w	fp, [r4]
 80037e4:	f8c8 2000 	str.w	r2, [r8]
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80037f0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80037f4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80037f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80037fa:	f04f 32ff 	mov.w	r2, #4294967295
 80037fe:	4640      	mov	r0, r8
 8003800:	4b9c      	ldr	r3, [pc, #624]	; (8003a74 <_printf_float+0x2cc>)
 8003802:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003804:	f7fd f902 	bl	8000a0c <__aeabi_dcmpun>
 8003808:	bb70      	cbnz	r0, 8003868 <_printf_float+0xc0>
 800380a:	f04f 32ff 	mov.w	r2, #4294967295
 800380e:	4640      	mov	r0, r8
 8003810:	4b98      	ldr	r3, [pc, #608]	; (8003a74 <_printf_float+0x2cc>)
 8003812:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003814:	f7fd f8dc 	bl	80009d0 <__aeabi_dcmple>
 8003818:	bb30      	cbnz	r0, 8003868 <_printf_float+0xc0>
 800381a:	2200      	movs	r2, #0
 800381c:	2300      	movs	r3, #0
 800381e:	4640      	mov	r0, r8
 8003820:	4651      	mov	r1, sl
 8003822:	f7fd f8cb 	bl	80009bc <__aeabi_dcmplt>
 8003826:	b110      	cbz	r0, 800382e <_printf_float+0x86>
 8003828:	232d      	movs	r3, #45	; 0x2d
 800382a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800382e:	4b92      	ldr	r3, [pc, #584]	; (8003a78 <_printf_float+0x2d0>)
 8003830:	4892      	ldr	r0, [pc, #584]	; (8003a7c <_printf_float+0x2d4>)
 8003832:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003836:	bf94      	ite	ls
 8003838:	4698      	movls	r8, r3
 800383a:	4680      	movhi	r8, r0
 800383c:	2303      	movs	r3, #3
 800383e:	f04f 0a00 	mov.w	sl, #0
 8003842:	6123      	str	r3, [r4, #16]
 8003844:	f02b 0304 	bic.w	r3, fp, #4
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	4633      	mov	r3, r6
 800384c:	4621      	mov	r1, r4
 800384e:	4628      	mov	r0, r5
 8003850:	9700      	str	r7, [sp, #0]
 8003852:	aa0f      	add	r2, sp, #60	; 0x3c
 8003854:	f000 f9d4 	bl	8003c00 <_printf_common>
 8003858:	3001      	adds	r0, #1
 800385a:	f040 8090 	bne.w	800397e <_printf_float+0x1d6>
 800385e:	f04f 30ff 	mov.w	r0, #4294967295
 8003862:	b011      	add	sp, #68	; 0x44
 8003864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003868:	4642      	mov	r2, r8
 800386a:	4653      	mov	r3, sl
 800386c:	4640      	mov	r0, r8
 800386e:	4651      	mov	r1, sl
 8003870:	f7fd f8cc 	bl	8000a0c <__aeabi_dcmpun>
 8003874:	b148      	cbz	r0, 800388a <_printf_float+0xe2>
 8003876:	f1ba 0f00 	cmp.w	sl, #0
 800387a:	bfb8      	it	lt
 800387c:	232d      	movlt	r3, #45	; 0x2d
 800387e:	4880      	ldr	r0, [pc, #512]	; (8003a80 <_printf_float+0x2d8>)
 8003880:	bfb8      	it	lt
 8003882:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003886:	4b7f      	ldr	r3, [pc, #508]	; (8003a84 <_printf_float+0x2dc>)
 8003888:	e7d3      	b.n	8003832 <_printf_float+0x8a>
 800388a:	6863      	ldr	r3, [r4, #4]
 800388c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	d142      	bne.n	800391a <_printf_float+0x172>
 8003894:	2306      	movs	r3, #6
 8003896:	6063      	str	r3, [r4, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	9206      	str	r2, [sp, #24]
 800389c:	aa0e      	add	r2, sp, #56	; 0x38
 800389e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80038a2:	aa0d      	add	r2, sp, #52	; 0x34
 80038a4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80038a8:	9203      	str	r2, [sp, #12]
 80038aa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80038ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80038b2:	6023      	str	r3, [r4, #0]
 80038b4:	6863      	ldr	r3, [r4, #4]
 80038b6:	4642      	mov	r2, r8
 80038b8:	9300      	str	r3, [sp, #0]
 80038ba:	4628      	mov	r0, r5
 80038bc:	4653      	mov	r3, sl
 80038be:	910b      	str	r1, [sp, #44]	; 0x2c
 80038c0:	f7ff fed4 	bl	800366c <__cvt>
 80038c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80038c6:	4680      	mov	r8, r0
 80038c8:	2947      	cmp	r1, #71	; 0x47
 80038ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80038cc:	d108      	bne.n	80038e0 <_printf_float+0x138>
 80038ce:	1cc8      	adds	r0, r1, #3
 80038d0:	db02      	blt.n	80038d8 <_printf_float+0x130>
 80038d2:	6863      	ldr	r3, [r4, #4]
 80038d4:	4299      	cmp	r1, r3
 80038d6:	dd40      	ble.n	800395a <_printf_float+0x1b2>
 80038d8:	f1a9 0902 	sub.w	r9, r9, #2
 80038dc:	fa5f f989 	uxtb.w	r9, r9
 80038e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80038e4:	d81f      	bhi.n	8003926 <_printf_float+0x17e>
 80038e6:	464a      	mov	r2, r9
 80038e8:	3901      	subs	r1, #1
 80038ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80038ee:	910d      	str	r1, [sp, #52]	; 0x34
 80038f0:	f7ff ff1b 	bl	800372a <__exponent>
 80038f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038f6:	4682      	mov	sl, r0
 80038f8:	1813      	adds	r3, r2, r0
 80038fa:	2a01      	cmp	r2, #1
 80038fc:	6123      	str	r3, [r4, #16]
 80038fe:	dc02      	bgt.n	8003906 <_printf_float+0x15e>
 8003900:	6822      	ldr	r2, [r4, #0]
 8003902:	07d2      	lsls	r2, r2, #31
 8003904:	d501      	bpl.n	800390a <_printf_float+0x162>
 8003906:	3301      	adds	r3, #1
 8003908:	6123      	str	r3, [r4, #16]
 800390a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800390e:	2b00      	cmp	r3, #0
 8003910:	d09b      	beq.n	800384a <_printf_float+0xa2>
 8003912:	232d      	movs	r3, #45	; 0x2d
 8003914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003918:	e797      	b.n	800384a <_printf_float+0xa2>
 800391a:	2947      	cmp	r1, #71	; 0x47
 800391c:	d1bc      	bne.n	8003898 <_printf_float+0xf0>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1ba      	bne.n	8003898 <_printf_float+0xf0>
 8003922:	2301      	movs	r3, #1
 8003924:	e7b7      	b.n	8003896 <_printf_float+0xee>
 8003926:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800392a:	d118      	bne.n	800395e <_printf_float+0x1b6>
 800392c:	2900      	cmp	r1, #0
 800392e:	6863      	ldr	r3, [r4, #4]
 8003930:	dd0b      	ble.n	800394a <_printf_float+0x1a2>
 8003932:	6121      	str	r1, [r4, #16]
 8003934:	b913      	cbnz	r3, 800393c <_printf_float+0x194>
 8003936:	6822      	ldr	r2, [r4, #0]
 8003938:	07d0      	lsls	r0, r2, #31
 800393a:	d502      	bpl.n	8003942 <_printf_float+0x19a>
 800393c:	3301      	adds	r3, #1
 800393e:	440b      	add	r3, r1
 8003940:	6123      	str	r3, [r4, #16]
 8003942:	f04f 0a00 	mov.w	sl, #0
 8003946:	65a1      	str	r1, [r4, #88]	; 0x58
 8003948:	e7df      	b.n	800390a <_printf_float+0x162>
 800394a:	b913      	cbnz	r3, 8003952 <_printf_float+0x1aa>
 800394c:	6822      	ldr	r2, [r4, #0]
 800394e:	07d2      	lsls	r2, r2, #31
 8003950:	d501      	bpl.n	8003956 <_printf_float+0x1ae>
 8003952:	3302      	adds	r3, #2
 8003954:	e7f4      	b.n	8003940 <_printf_float+0x198>
 8003956:	2301      	movs	r3, #1
 8003958:	e7f2      	b.n	8003940 <_printf_float+0x198>
 800395a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800395e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003960:	4299      	cmp	r1, r3
 8003962:	db05      	blt.n	8003970 <_printf_float+0x1c8>
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	6121      	str	r1, [r4, #16]
 8003968:	07d8      	lsls	r0, r3, #31
 800396a:	d5ea      	bpl.n	8003942 <_printf_float+0x19a>
 800396c:	1c4b      	adds	r3, r1, #1
 800396e:	e7e7      	b.n	8003940 <_printf_float+0x198>
 8003970:	2900      	cmp	r1, #0
 8003972:	bfcc      	ite	gt
 8003974:	2201      	movgt	r2, #1
 8003976:	f1c1 0202 	rsble	r2, r1, #2
 800397a:	4413      	add	r3, r2
 800397c:	e7e0      	b.n	8003940 <_printf_float+0x198>
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	055a      	lsls	r2, r3, #21
 8003982:	d407      	bmi.n	8003994 <_printf_float+0x1ec>
 8003984:	6923      	ldr	r3, [r4, #16]
 8003986:	4642      	mov	r2, r8
 8003988:	4631      	mov	r1, r6
 800398a:	4628      	mov	r0, r5
 800398c:	47b8      	blx	r7
 800398e:	3001      	adds	r0, #1
 8003990:	d12b      	bne.n	80039ea <_printf_float+0x242>
 8003992:	e764      	b.n	800385e <_printf_float+0xb6>
 8003994:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003998:	f240 80dd 	bls.w	8003b56 <_printf_float+0x3ae>
 800399c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039a0:	2200      	movs	r2, #0
 80039a2:	2300      	movs	r3, #0
 80039a4:	f7fd f800 	bl	80009a8 <__aeabi_dcmpeq>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d033      	beq.n	8003a14 <_printf_float+0x26c>
 80039ac:	2301      	movs	r3, #1
 80039ae:	4631      	mov	r1, r6
 80039b0:	4628      	mov	r0, r5
 80039b2:	4a35      	ldr	r2, [pc, #212]	; (8003a88 <_printf_float+0x2e0>)
 80039b4:	47b8      	blx	r7
 80039b6:	3001      	adds	r0, #1
 80039b8:	f43f af51 	beq.w	800385e <_printf_float+0xb6>
 80039bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80039c0:	429a      	cmp	r2, r3
 80039c2:	db02      	blt.n	80039ca <_printf_float+0x222>
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	07d8      	lsls	r0, r3, #31
 80039c8:	d50f      	bpl.n	80039ea <_printf_float+0x242>
 80039ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039ce:	4631      	mov	r1, r6
 80039d0:	4628      	mov	r0, r5
 80039d2:	47b8      	blx	r7
 80039d4:	3001      	adds	r0, #1
 80039d6:	f43f af42 	beq.w	800385e <_printf_float+0xb6>
 80039da:	f04f 0800 	mov.w	r8, #0
 80039de:	f104 091a 	add.w	r9, r4, #26
 80039e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039e4:	3b01      	subs	r3, #1
 80039e6:	4543      	cmp	r3, r8
 80039e8:	dc09      	bgt.n	80039fe <_printf_float+0x256>
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	079b      	lsls	r3, r3, #30
 80039ee:	f100 8102 	bmi.w	8003bf6 <_printf_float+0x44e>
 80039f2:	68e0      	ldr	r0, [r4, #12]
 80039f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80039f6:	4298      	cmp	r0, r3
 80039f8:	bfb8      	it	lt
 80039fa:	4618      	movlt	r0, r3
 80039fc:	e731      	b.n	8003862 <_printf_float+0xba>
 80039fe:	2301      	movs	r3, #1
 8003a00:	464a      	mov	r2, r9
 8003a02:	4631      	mov	r1, r6
 8003a04:	4628      	mov	r0, r5
 8003a06:	47b8      	blx	r7
 8003a08:	3001      	adds	r0, #1
 8003a0a:	f43f af28 	beq.w	800385e <_printf_float+0xb6>
 8003a0e:	f108 0801 	add.w	r8, r8, #1
 8003a12:	e7e6      	b.n	80039e2 <_printf_float+0x23a>
 8003a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	dc38      	bgt.n	8003a8c <_printf_float+0x2e4>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	4631      	mov	r1, r6
 8003a1e:	4628      	mov	r0, r5
 8003a20:	4a19      	ldr	r2, [pc, #100]	; (8003a88 <_printf_float+0x2e0>)
 8003a22:	47b8      	blx	r7
 8003a24:	3001      	adds	r0, #1
 8003a26:	f43f af1a 	beq.w	800385e <_printf_float+0xb6>
 8003a2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	d102      	bne.n	8003a38 <_printf_float+0x290>
 8003a32:	6823      	ldr	r3, [r4, #0]
 8003a34:	07d9      	lsls	r1, r3, #31
 8003a36:	d5d8      	bpl.n	80039ea <_printf_float+0x242>
 8003a38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a3c:	4631      	mov	r1, r6
 8003a3e:	4628      	mov	r0, r5
 8003a40:	47b8      	blx	r7
 8003a42:	3001      	adds	r0, #1
 8003a44:	f43f af0b 	beq.w	800385e <_printf_float+0xb6>
 8003a48:	f04f 0900 	mov.w	r9, #0
 8003a4c:	f104 0a1a 	add.w	sl, r4, #26
 8003a50:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a52:	425b      	negs	r3, r3
 8003a54:	454b      	cmp	r3, r9
 8003a56:	dc01      	bgt.n	8003a5c <_printf_float+0x2b4>
 8003a58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003a5a:	e794      	b.n	8003986 <_printf_float+0x1de>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	4652      	mov	r2, sl
 8003a60:	4631      	mov	r1, r6
 8003a62:	4628      	mov	r0, r5
 8003a64:	47b8      	blx	r7
 8003a66:	3001      	adds	r0, #1
 8003a68:	f43f aef9 	beq.w	800385e <_printf_float+0xb6>
 8003a6c:	f109 0901 	add.w	r9, r9, #1
 8003a70:	e7ee      	b.n	8003a50 <_printf_float+0x2a8>
 8003a72:	bf00      	nop
 8003a74:	7fefffff 	.word	0x7fefffff
 8003a78:	08007294 	.word	0x08007294
 8003a7c:	08007298 	.word	0x08007298
 8003a80:	080072a0 	.word	0x080072a0
 8003a84:	0800729c 	.word	0x0800729c
 8003a88:	080072a4 	.word	0x080072a4
 8003a8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003a8e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a90:	429a      	cmp	r2, r3
 8003a92:	bfa8      	it	ge
 8003a94:	461a      	movge	r2, r3
 8003a96:	2a00      	cmp	r2, #0
 8003a98:	4691      	mov	r9, r2
 8003a9a:	dc37      	bgt.n	8003b0c <_printf_float+0x364>
 8003a9c:	f04f 0b00 	mov.w	fp, #0
 8003aa0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003aa4:	f104 021a 	add.w	r2, r4, #26
 8003aa8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003aac:	ebaa 0309 	sub.w	r3, sl, r9
 8003ab0:	455b      	cmp	r3, fp
 8003ab2:	dc33      	bgt.n	8003b1c <_printf_float+0x374>
 8003ab4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	db3b      	blt.n	8003b34 <_printf_float+0x38c>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	07da      	lsls	r2, r3, #31
 8003ac0:	d438      	bmi.n	8003b34 <_printf_float+0x38c>
 8003ac2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003ac4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003ac6:	eba3 020a 	sub.w	r2, r3, sl
 8003aca:	eba3 0901 	sub.w	r9, r3, r1
 8003ace:	4591      	cmp	r9, r2
 8003ad0:	bfa8      	it	ge
 8003ad2:	4691      	movge	r9, r2
 8003ad4:	f1b9 0f00 	cmp.w	r9, #0
 8003ad8:	dc34      	bgt.n	8003b44 <_printf_float+0x39c>
 8003ada:	f04f 0800 	mov.w	r8, #0
 8003ade:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ae2:	f104 0a1a 	add.w	sl, r4, #26
 8003ae6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003aea:	1a9b      	subs	r3, r3, r2
 8003aec:	eba3 0309 	sub.w	r3, r3, r9
 8003af0:	4543      	cmp	r3, r8
 8003af2:	f77f af7a 	ble.w	80039ea <_printf_float+0x242>
 8003af6:	2301      	movs	r3, #1
 8003af8:	4652      	mov	r2, sl
 8003afa:	4631      	mov	r1, r6
 8003afc:	4628      	mov	r0, r5
 8003afe:	47b8      	blx	r7
 8003b00:	3001      	adds	r0, #1
 8003b02:	f43f aeac 	beq.w	800385e <_printf_float+0xb6>
 8003b06:	f108 0801 	add.w	r8, r8, #1
 8003b0a:	e7ec      	b.n	8003ae6 <_printf_float+0x33e>
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	4631      	mov	r1, r6
 8003b10:	4642      	mov	r2, r8
 8003b12:	4628      	mov	r0, r5
 8003b14:	47b8      	blx	r7
 8003b16:	3001      	adds	r0, #1
 8003b18:	d1c0      	bne.n	8003a9c <_printf_float+0x2f4>
 8003b1a:	e6a0      	b.n	800385e <_printf_float+0xb6>
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	4631      	mov	r1, r6
 8003b20:	4628      	mov	r0, r5
 8003b22:	920b      	str	r2, [sp, #44]	; 0x2c
 8003b24:	47b8      	blx	r7
 8003b26:	3001      	adds	r0, #1
 8003b28:	f43f ae99 	beq.w	800385e <_printf_float+0xb6>
 8003b2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003b2e:	f10b 0b01 	add.w	fp, fp, #1
 8003b32:	e7b9      	b.n	8003aa8 <_printf_float+0x300>
 8003b34:	4631      	mov	r1, r6
 8003b36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	47b8      	blx	r7
 8003b3e:	3001      	adds	r0, #1
 8003b40:	d1bf      	bne.n	8003ac2 <_printf_float+0x31a>
 8003b42:	e68c      	b.n	800385e <_printf_float+0xb6>
 8003b44:	464b      	mov	r3, r9
 8003b46:	4631      	mov	r1, r6
 8003b48:	4628      	mov	r0, r5
 8003b4a:	eb08 020a 	add.w	r2, r8, sl
 8003b4e:	47b8      	blx	r7
 8003b50:	3001      	adds	r0, #1
 8003b52:	d1c2      	bne.n	8003ada <_printf_float+0x332>
 8003b54:	e683      	b.n	800385e <_printf_float+0xb6>
 8003b56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b58:	2a01      	cmp	r2, #1
 8003b5a:	dc01      	bgt.n	8003b60 <_printf_float+0x3b8>
 8003b5c:	07db      	lsls	r3, r3, #31
 8003b5e:	d537      	bpl.n	8003bd0 <_printf_float+0x428>
 8003b60:	2301      	movs	r3, #1
 8003b62:	4642      	mov	r2, r8
 8003b64:	4631      	mov	r1, r6
 8003b66:	4628      	mov	r0, r5
 8003b68:	47b8      	blx	r7
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	f43f ae77 	beq.w	800385e <_printf_float+0xb6>
 8003b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b74:	4631      	mov	r1, r6
 8003b76:	4628      	mov	r0, r5
 8003b78:	47b8      	blx	r7
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	f43f ae6f 	beq.w	800385e <_printf_float+0xb6>
 8003b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b84:	2200      	movs	r2, #0
 8003b86:	2300      	movs	r3, #0
 8003b88:	f7fc ff0e 	bl	80009a8 <__aeabi_dcmpeq>
 8003b8c:	b9d8      	cbnz	r0, 8003bc6 <_printf_float+0x41e>
 8003b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003b90:	f108 0201 	add.w	r2, r8, #1
 8003b94:	3b01      	subs	r3, #1
 8003b96:	4631      	mov	r1, r6
 8003b98:	4628      	mov	r0, r5
 8003b9a:	47b8      	blx	r7
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d10e      	bne.n	8003bbe <_printf_float+0x416>
 8003ba0:	e65d      	b.n	800385e <_printf_float+0xb6>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	464a      	mov	r2, r9
 8003ba6:	4631      	mov	r1, r6
 8003ba8:	4628      	mov	r0, r5
 8003baa:	47b8      	blx	r7
 8003bac:	3001      	adds	r0, #1
 8003bae:	f43f ae56 	beq.w	800385e <_printf_float+0xb6>
 8003bb2:	f108 0801 	add.w	r8, r8, #1
 8003bb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	4543      	cmp	r3, r8
 8003bbc:	dcf1      	bgt.n	8003ba2 <_printf_float+0x3fa>
 8003bbe:	4653      	mov	r3, sl
 8003bc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003bc4:	e6e0      	b.n	8003988 <_printf_float+0x1e0>
 8003bc6:	f04f 0800 	mov.w	r8, #0
 8003bca:	f104 091a 	add.w	r9, r4, #26
 8003bce:	e7f2      	b.n	8003bb6 <_printf_float+0x40e>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	4642      	mov	r2, r8
 8003bd4:	e7df      	b.n	8003b96 <_printf_float+0x3ee>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	464a      	mov	r2, r9
 8003bda:	4631      	mov	r1, r6
 8003bdc:	4628      	mov	r0, r5
 8003bde:	47b8      	blx	r7
 8003be0:	3001      	adds	r0, #1
 8003be2:	f43f ae3c 	beq.w	800385e <_printf_float+0xb6>
 8003be6:	f108 0801 	add.w	r8, r8, #1
 8003bea:	68e3      	ldr	r3, [r4, #12]
 8003bec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003bee:	1a5b      	subs	r3, r3, r1
 8003bf0:	4543      	cmp	r3, r8
 8003bf2:	dcf0      	bgt.n	8003bd6 <_printf_float+0x42e>
 8003bf4:	e6fd      	b.n	80039f2 <_printf_float+0x24a>
 8003bf6:	f04f 0800 	mov.w	r8, #0
 8003bfa:	f104 0919 	add.w	r9, r4, #25
 8003bfe:	e7f4      	b.n	8003bea <_printf_float+0x442>

08003c00 <_printf_common>:
 8003c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c04:	4616      	mov	r6, r2
 8003c06:	4699      	mov	r9, r3
 8003c08:	688a      	ldr	r2, [r1, #8]
 8003c0a:	690b      	ldr	r3, [r1, #16]
 8003c0c:	4607      	mov	r7, r0
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	bfb8      	it	lt
 8003c12:	4613      	movlt	r3, r2
 8003c14:	6033      	str	r3, [r6, #0]
 8003c16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003c20:	b10a      	cbz	r2, 8003c26 <_printf_common+0x26>
 8003c22:	3301      	adds	r3, #1
 8003c24:	6033      	str	r3, [r6, #0]
 8003c26:	6823      	ldr	r3, [r4, #0]
 8003c28:	0699      	lsls	r1, r3, #26
 8003c2a:	bf42      	ittt	mi
 8003c2c:	6833      	ldrmi	r3, [r6, #0]
 8003c2e:	3302      	addmi	r3, #2
 8003c30:	6033      	strmi	r3, [r6, #0]
 8003c32:	6825      	ldr	r5, [r4, #0]
 8003c34:	f015 0506 	ands.w	r5, r5, #6
 8003c38:	d106      	bne.n	8003c48 <_printf_common+0x48>
 8003c3a:	f104 0a19 	add.w	sl, r4, #25
 8003c3e:	68e3      	ldr	r3, [r4, #12]
 8003c40:	6832      	ldr	r2, [r6, #0]
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	42ab      	cmp	r3, r5
 8003c46:	dc28      	bgt.n	8003c9a <_printf_common+0x9a>
 8003c48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c4c:	1e13      	subs	r3, r2, #0
 8003c4e:	6822      	ldr	r2, [r4, #0]
 8003c50:	bf18      	it	ne
 8003c52:	2301      	movne	r3, #1
 8003c54:	0692      	lsls	r2, r2, #26
 8003c56:	d42d      	bmi.n	8003cb4 <_printf_common+0xb4>
 8003c58:	4649      	mov	r1, r9
 8003c5a:	4638      	mov	r0, r7
 8003c5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c60:	47c0      	blx	r8
 8003c62:	3001      	adds	r0, #1
 8003c64:	d020      	beq.n	8003ca8 <_printf_common+0xa8>
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	68e5      	ldr	r5, [r4, #12]
 8003c6a:	f003 0306 	and.w	r3, r3, #6
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	bf18      	it	ne
 8003c72:	2500      	movne	r5, #0
 8003c74:	6832      	ldr	r2, [r6, #0]
 8003c76:	f04f 0600 	mov.w	r6, #0
 8003c7a:	68a3      	ldr	r3, [r4, #8]
 8003c7c:	bf08      	it	eq
 8003c7e:	1aad      	subeq	r5, r5, r2
 8003c80:	6922      	ldr	r2, [r4, #16]
 8003c82:	bf08      	it	eq
 8003c84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	bfc4      	itt	gt
 8003c8c:	1a9b      	subgt	r3, r3, r2
 8003c8e:	18ed      	addgt	r5, r5, r3
 8003c90:	341a      	adds	r4, #26
 8003c92:	42b5      	cmp	r5, r6
 8003c94:	d11a      	bne.n	8003ccc <_printf_common+0xcc>
 8003c96:	2000      	movs	r0, #0
 8003c98:	e008      	b.n	8003cac <_printf_common+0xac>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	4652      	mov	r2, sl
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	4638      	mov	r0, r7
 8003ca2:	47c0      	blx	r8
 8003ca4:	3001      	adds	r0, #1
 8003ca6:	d103      	bne.n	8003cb0 <_printf_common+0xb0>
 8003ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cb0:	3501      	adds	r5, #1
 8003cb2:	e7c4      	b.n	8003c3e <_printf_common+0x3e>
 8003cb4:	2030      	movs	r0, #48	; 0x30
 8003cb6:	18e1      	adds	r1, r4, r3
 8003cb8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003cc2:	4422      	add	r2, r4
 8003cc4:	3302      	adds	r3, #2
 8003cc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003cca:	e7c5      	b.n	8003c58 <_printf_common+0x58>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	4622      	mov	r2, r4
 8003cd0:	4649      	mov	r1, r9
 8003cd2:	4638      	mov	r0, r7
 8003cd4:	47c0      	blx	r8
 8003cd6:	3001      	adds	r0, #1
 8003cd8:	d0e6      	beq.n	8003ca8 <_printf_common+0xa8>
 8003cda:	3601      	adds	r6, #1
 8003cdc:	e7d9      	b.n	8003c92 <_printf_common+0x92>
	...

08003ce0 <_printf_i>:
 8003ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ce4:	7e0f      	ldrb	r7, [r1, #24]
 8003ce6:	4691      	mov	r9, r2
 8003ce8:	2f78      	cmp	r7, #120	; 0x78
 8003cea:	4680      	mov	r8, r0
 8003cec:	460c      	mov	r4, r1
 8003cee:	469a      	mov	sl, r3
 8003cf0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cf2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cf6:	d807      	bhi.n	8003d08 <_printf_i+0x28>
 8003cf8:	2f62      	cmp	r7, #98	; 0x62
 8003cfa:	d80a      	bhi.n	8003d12 <_printf_i+0x32>
 8003cfc:	2f00      	cmp	r7, #0
 8003cfe:	f000 80d9 	beq.w	8003eb4 <_printf_i+0x1d4>
 8003d02:	2f58      	cmp	r7, #88	; 0x58
 8003d04:	f000 80a4 	beq.w	8003e50 <_printf_i+0x170>
 8003d08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003d10:	e03a      	b.n	8003d88 <_printf_i+0xa8>
 8003d12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003d16:	2b15      	cmp	r3, #21
 8003d18:	d8f6      	bhi.n	8003d08 <_printf_i+0x28>
 8003d1a:	a101      	add	r1, pc, #4	; (adr r1, 8003d20 <_printf_i+0x40>)
 8003d1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d20:	08003d79 	.word	0x08003d79
 8003d24:	08003d8d 	.word	0x08003d8d
 8003d28:	08003d09 	.word	0x08003d09
 8003d2c:	08003d09 	.word	0x08003d09
 8003d30:	08003d09 	.word	0x08003d09
 8003d34:	08003d09 	.word	0x08003d09
 8003d38:	08003d8d 	.word	0x08003d8d
 8003d3c:	08003d09 	.word	0x08003d09
 8003d40:	08003d09 	.word	0x08003d09
 8003d44:	08003d09 	.word	0x08003d09
 8003d48:	08003d09 	.word	0x08003d09
 8003d4c:	08003e9b 	.word	0x08003e9b
 8003d50:	08003dbd 	.word	0x08003dbd
 8003d54:	08003e7d 	.word	0x08003e7d
 8003d58:	08003d09 	.word	0x08003d09
 8003d5c:	08003d09 	.word	0x08003d09
 8003d60:	08003ebd 	.word	0x08003ebd
 8003d64:	08003d09 	.word	0x08003d09
 8003d68:	08003dbd 	.word	0x08003dbd
 8003d6c:	08003d09 	.word	0x08003d09
 8003d70:	08003d09 	.word	0x08003d09
 8003d74:	08003e85 	.word	0x08003e85
 8003d78:	682b      	ldr	r3, [r5, #0]
 8003d7a:	1d1a      	adds	r2, r3, #4
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	602a      	str	r2, [r5, #0]
 8003d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0a4      	b.n	8003ed6 <_printf_i+0x1f6>
 8003d8c:	6820      	ldr	r0, [r4, #0]
 8003d8e:	6829      	ldr	r1, [r5, #0]
 8003d90:	0606      	lsls	r6, r0, #24
 8003d92:	f101 0304 	add.w	r3, r1, #4
 8003d96:	d50a      	bpl.n	8003dae <_printf_i+0xce>
 8003d98:	680e      	ldr	r6, [r1, #0]
 8003d9a:	602b      	str	r3, [r5, #0]
 8003d9c:	2e00      	cmp	r6, #0
 8003d9e:	da03      	bge.n	8003da8 <_printf_i+0xc8>
 8003da0:	232d      	movs	r3, #45	; 0x2d
 8003da2:	4276      	negs	r6, r6
 8003da4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003da8:	230a      	movs	r3, #10
 8003daa:	485e      	ldr	r0, [pc, #376]	; (8003f24 <_printf_i+0x244>)
 8003dac:	e019      	b.n	8003de2 <_printf_i+0x102>
 8003dae:	680e      	ldr	r6, [r1, #0]
 8003db0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003db4:	602b      	str	r3, [r5, #0]
 8003db6:	bf18      	it	ne
 8003db8:	b236      	sxthne	r6, r6
 8003dba:	e7ef      	b.n	8003d9c <_printf_i+0xbc>
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	6820      	ldr	r0, [r4, #0]
 8003dc0:	1d19      	adds	r1, r3, #4
 8003dc2:	6029      	str	r1, [r5, #0]
 8003dc4:	0601      	lsls	r1, r0, #24
 8003dc6:	d501      	bpl.n	8003dcc <_printf_i+0xec>
 8003dc8:	681e      	ldr	r6, [r3, #0]
 8003dca:	e002      	b.n	8003dd2 <_printf_i+0xf2>
 8003dcc:	0646      	lsls	r6, r0, #25
 8003dce:	d5fb      	bpl.n	8003dc8 <_printf_i+0xe8>
 8003dd0:	881e      	ldrh	r6, [r3, #0]
 8003dd2:	2f6f      	cmp	r7, #111	; 0x6f
 8003dd4:	bf0c      	ite	eq
 8003dd6:	2308      	moveq	r3, #8
 8003dd8:	230a      	movne	r3, #10
 8003dda:	4852      	ldr	r0, [pc, #328]	; (8003f24 <_printf_i+0x244>)
 8003ddc:	2100      	movs	r1, #0
 8003dde:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003de2:	6865      	ldr	r5, [r4, #4]
 8003de4:	2d00      	cmp	r5, #0
 8003de6:	bfa8      	it	ge
 8003de8:	6821      	ldrge	r1, [r4, #0]
 8003dea:	60a5      	str	r5, [r4, #8]
 8003dec:	bfa4      	itt	ge
 8003dee:	f021 0104 	bicge.w	r1, r1, #4
 8003df2:	6021      	strge	r1, [r4, #0]
 8003df4:	b90e      	cbnz	r6, 8003dfa <_printf_i+0x11a>
 8003df6:	2d00      	cmp	r5, #0
 8003df8:	d04d      	beq.n	8003e96 <_printf_i+0x1b6>
 8003dfa:	4615      	mov	r5, r2
 8003dfc:	fbb6 f1f3 	udiv	r1, r6, r3
 8003e00:	fb03 6711 	mls	r7, r3, r1, r6
 8003e04:	5dc7      	ldrb	r7, [r0, r7]
 8003e06:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003e0a:	4637      	mov	r7, r6
 8003e0c:	42bb      	cmp	r3, r7
 8003e0e:	460e      	mov	r6, r1
 8003e10:	d9f4      	bls.n	8003dfc <_printf_i+0x11c>
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d10b      	bne.n	8003e2e <_printf_i+0x14e>
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	07de      	lsls	r6, r3, #31
 8003e1a:	d508      	bpl.n	8003e2e <_printf_i+0x14e>
 8003e1c:	6923      	ldr	r3, [r4, #16]
 8003e1e:	6861      	ldr	r1, [r4, #4]
 8003e20:	4299      	cmp	r1, r3
 8003e22:	bfde      	ittt	le
 8003e24:	2330      	movle	r3, #48	; 0x30
 8003e26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003e2e:	1b52      	subs	r2, r2, r5
 8003e30:	6122      	str	r2, [r4, #16]
 8003e32:	464b      	mov	r3, r9
 8003e34:	4621      	mov	r1, r4
 8003e36:	4640      	mov	r0, r8
 8003e38:	f8cd a000 	str.w	sl, [sp]
 8003e3c:	aa03      	add	r2, sp, #12
 8003e3e:	f7ff fedf 	bl	8003c00 <_printf_common>
 8003e42:	3001      	adds	r0, #1
 8003e44:	d14c      	bne.n	8003ee0 <_printf_i+0x200>
 8003e46:	f04f 30ff 	mov.w	r0, #4294967295
 8003e4a:	b004      	add	sp, #16
 8003e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e50:	4834      	ldr	r0, [pc, #208]	; (8003f24 <_printf_i+0x244>)
 8003e52:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e56:	6829      	ldr	r1, [r5, #0]
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e5e:	6029      	str	r1, [r5, #0]
 8003e60:	061d      	lsls	r5, r3, #24
 8003e62:	d514      	bpl.n	8003e8e <_printf_i+0x1ae>
 8003e64:	07df      	lsls	r7, r3, #31
 8003e66:	bf44      	itt	mi
 8003e68:	f043 0320 	orrmi.w	r3, r3, #32
 8003e6c:	6023      	strmi	r3, [r4, #0]
 8003e6e:	b91e      	cbnz	r6, 8003e78 <_printf_i+0x198>
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	f023 0320 	bic.w	r3, r3, #32
 8003e76:	6023      	str	r3, [r4, #0]
 8003e78:	2310      	movs	r3, #16
 8003e7a:	e7af      	b.n	8003ddc <_printf_i+0xfc>
 8003e7c:	6823      	ldr	r3, [r4, #0]
 8003e7e:	f043 0320 	orr.w	r3, r3, #32
 8003e82:	6023      	str	r3, [r4, #0]
 8003e84:	2378      	movs	r3, #120	; 0x78
 8003e86:	4828      	ldr	r0, [pc, #160]	; (8003f28 <_printf_i+0x248>)
 8003e88:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e8c:	e7e3      	b.n	8003e56 <_printf_i+0x176>
 8003e8e:	0659      	lsls	r1, r3, #25
 8003e90:	bf48      	it	mi
 8003e92:	b2b6      	uxthmi	r6, r6
 8003e94:	e7e6      	b.n	8003e64 <_printf_i+0x184>
 8003e96:	4615      	mov	r5, r2
 8003e98:	e7bb      	b.n	8003e12 <_printf_i+0x132>
 8003e9a:	682b      	ldr	r3, [r5, #0]
 8003e9c:	6826      	ldr	r6, [r4, #0]
 8003e9e:	1d18      	adds	r0, r3, #4
 8003ea0:	6961      	ldr	r1, [r4, #20]
 8003ea2:	6028      	str	r0, [r5, #0]
 8003ea4:	0635      	lsls	r5, r6, #24
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	d501      	bpl.n	8003eae <_printf_i+0x1ce>
 8003eaa:	6019      	str	r1, [r3, #0]
 8003eac:	e002      	b.n	8003eb4 <_printf_i+0x1d4>
 8003eae:	0670      	lsls	r0, r6, #25
 8003eb0:	d5fb      	bpl.n	8003eaa <_printf_i+0x1ca>
 8003eb2:	8019      	strh	r1, [r3, #0]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	4615      	mov	r5, r2
 8003eb8:	6123      	str	r3, [r4, #16]
 8003eba:	e7ba      	b.n	8003e32 <_printf_i+0x152>
 8003ebc:	682b      	ldr	r3, [r5, #0]
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	1d1a      	adds	r2, r3, #4
 8003ec2:	602a      	str	r2, [r5, #0]
 8003ec4:	681d      	ldr	r5, [r3, #0]
 8003ec6:	6862      	ldr	r2, [r4, #4]
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f000 feeb 	bl	8004ca4 <memchr>
 8003ece:	b108      	cbz	r0, 8003ed4 <_printf_i+0x1f4>
 8003ed0:	1b40      	subs	r0, r0, r5
 8003ed2:	6060      	str	r0, [r4, #4]
 8003ed4:	6863      	ldr	r3, [r4, #4]
 8003ed6:	6123      	str	r3, [r4, #16]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ede:	e7a8      	b.n	8003e32 <_printf_i+0x152>
 8003ee0:	462a      	mov	r2, r5
 8003ee2:	4649      	mov	r1, r9
 8003ee4:	4640      	mov	r0, r8
 8003ee6:	6923      	ldr	r3, [r4, #16]
 8003ee8:	47d0      	blx	sl
 8003eea:	3001      	adds	r0, #1
 8003eec:	d0ab      	beq.n	8003e46 <_printf_i+0x166>
 8003eee:	6823      	ldr	r3, [r4, #0]
 8003ef0:	079b      	lsls	r3, r3, #30
 8003ef2:	d413      	bmi.n	8003f1c <_printf_i+0x23c>
 8003ef4:	68e0      	ldr	r0, [r4, #12]
 8003ef6:	9b03      	ldr	r3, [sp, #12]
 8003ef8:	4298      	cmp	r0, r3
 8003efa:	bfb8      	it	lt
 8003efc:	4618      	movlt	r0, r3
 8003efe:	e7a4      	b.n	8003e4a <_printf_i+0x16a>
 8003f00:	2301      	movs	r3, #1
 8003f02:	4632      	mov	r2, r6
 8003f04:	4649      	mov	r1, r9
 8003f06:	4640      	mov	r0, r8
 8003f08:	47d0      	blx	sl
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	d09b      	beq.n	8003e46 <_printf_i+0x166>
 8003f0e:	3501      	adds	r5, #1
 8003f10:	68e3      	ldr	r3, [r4, #12]
 8003f12:	9903      	ldr	r1, [sp, #12]
 8003f14:	1a5b      	subs	r3, r3, r1
 8003f16:	42ab      	cmp	r3, r5
 8003f18:	dcf2      	bgt.n	8003f00 <_printf_i+0x220>
 8003f1a:	e7eb      	b.n	8003ef4 <_printf_i+0x214>
 8003f1c:	2500      	movs	r5, #0
 8003f1e:	f104 0619 	add.w	r6, r4, #25
 8003f22:	e7f5      	b.n	8003f10 <_printf_i+0x230>
 8003f24:	080072a6 	.word	0x080072a6
 8003f28:	080072b7 	.word	0x080072b7

08003f2c <sniprintf>:
 8003f2c:	b40c      	push	{r2, r3}
 8003f2e:	b530      	push	{r4, r5, lr}
 8003f30:	4b17      	ldr	r3, [pc, #92]	; (8003f90 <sniprintf+0x64>)
 8003f32:	1e0c      	subs	r4, r1, #0
 8003f34:	681d      	ldr	r5, [r3, #0]
 8003f36:	b09d      	sub	sp, #116	; 0x74
 8003f38:	da08      	bge.n	8003f4c <sniprintf+0x20>
 8003f3a:	238b      	movs	r3, #139	; 0x8b
 8003f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f40:	602b      	str	r3, [r5, #0]
 8003f42:	b01d      	add	sp, #116	; 0x74
 8003f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003f48:	b002      	add	sp, #8
 8003f4a:	4770      	bx	lr
 8003f4c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003f50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f54:	bf0c      	ite	eq
 8003f56:	4623      	moveq	r3, r4
 8003f58:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003f5c:	9304      	str	r3, [sp, #16]
 8003f5e:	9307      	str	r3, [sp, #28]
 8003f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f64:	9002      	str	r0, [sp, #8]
 8003f66:	9006      	str	r0, [sp, #24]
 8003f68:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	ab21      	add	r3, sp, #132	; 0x84
 8003f70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f72:	a902      	add	r1, sp, #8
 8003f74:	9301      	str	r3, [sp, #4]
 8003f76:	f001 fb7f 	bl	8005678 <_svfiprintf_r>
 8003f7a:	1c43      	adds	r3, r0, #1
 8003f7c:	bfbc      	itt	lt
 8003f7e:	238b      	movlt	r3, #139	; 0x8b
 8003f80:	602b      	strlt	r3, [r5, #0]
 8003f82:	2c00      	cmp	r4, #0
 8003f84:	d0dd      	beq.n	8003f42 <sniprintf+0x16>
 8003f86:	2200      	movs	r2, #0
 8003f88:	9b02      	ldr	r3, [sp, #8]
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	e7d9      	b.n	8003f42 <sniprintf+0x16>
 8003f8e:	bf00      	nop
 8003f90:	2000000c 	.word	0x2000000c

08003f94 <quorem>:
 8003f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f98:	6903      	ldr	r3, [r0, #16]
 8003f9a:	690c      	ldr	r4, [r1, #16]
 8003f9c:	4607      	mov	r7, r0
 8003f9e:	42a3      	cmp	r3, r4
 8003fa0:	f2c0 8082 	blt.w	80040a8 <quorem+0x114>
 8003fa4:	3c01      	subs	r4, #1
 8003fa6:	f100 0514 	add.w	r5, r0, #20
 8003faa:	f101 0814 	add.w	r8, r1, #20
 8003fae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003fb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003fc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003fc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003fcc:	d331      	bcc.n	8004032 <quorem+0x9e>
 8003fce:	f04f 0e00 	mov.w	lr, #0
 8003fd2:	4640      	mov	r0, r8
 8003fd4:	46ac      	mov	ip, r5
 8003fd6:	46f2      	mov	sl, lr
 8003fd8:	f850 2b04 	ldr.w	r2, [r0], #4
 8003fdc:	b293      	uxth	r3, r2
 8003fde:	fb06 e303 	mla	r3, r6, r3, lr
 8003fe2:	0c12      	lsrs	r2, r2, #16
 8003fe4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	fb06 e202 	mla	r2, r6, r2, lr
 8003fee:	ebaa 0303 	sub.w	r3, sl, r3
 8003ff2:	f8dc a000 	ldr.w	sl, [ip]
 8003ff6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003ffa:	fa1f fa8a 	uxth.w	sl, sl
 8003ffe:	4453      	add	r3, sl
 8004000:	f8dc a000 	ldr.w	sl, [ip]
 8004004:	b292      	uxth	r2, r2
 8004006:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800400a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800400e:	b29b      	uxth	r3, r3
 8004010:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004014:	4581      	cmp	r9, r0
 8004016:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800401a:	f84c 3b04 	str.w	r3, [ip], #4
 800401e:	d2db      	bcs.n	8003fd8 <quorem+0x44>
 8004020:	f855 300b 	ldr.w	r3, [r5, fp]
 8004024:	b92b      	cbnz	r3, 8004032 <quorem+0x9e>
 8004026:	9b01      	ldr	r3, [sp, #4]
 8004028:	3b04      	subs	r3, #4
 800402a:	429d      	cmp	r5, r3
 800402c:	461a      	mov	r2, r3
 800402e:	d32f      	bcc.n	8004090 <quorem+0xfc>
 8004030:	613c      	str	r4, [r7, #16]
 8004032:	4638      	mov	r0, r7
 8004034:	f001 f8d0 	bl	80051d8 <__mcmp>
 8004038:	2800      	cmp	r0, #0
 800403a:	db25      	blt.n	8004088 <quorem+0xf4>
 800403c:	4628      	mov	r0, r5
 800403e:	f04f 0c00 	mov.w	ip, #0
 8004042:	3601      	adds	r6, #1
 8004044:	f858 1b04 	ldr.w	r1, [r8], #4
 8004048:	f8d0 e000 	ldr.w	lr, [r0]
 800404c:	b28b      	uxth	r3, r1
 800404e:	ebac 0303 	sub.w	r3, ip, r3
 8004052:	fa1f f28e 	uxth.w	r2, lr
 8004056:	4413      	add	r3, r2
 8004058:	0c0a      	lsrs	r2, r1, #16
 800405a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800405e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004062:	b29b      	uxth	r3, r3
 8004064:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004068:	45c1      	cmp	r9, r8
 800406a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800406e:	f840 3b04 	str.w	r3, [r0], #4
 8004072:	d2e7      	bcs.n	8004044 <quorem+0xb0>
 8004074:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004078:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800407c:	b922      	cbnz	r2, 8004088 <quorem+0xf4>
 800407e:	3b04      	subs	r3, #4
 8004080:	429d      	cmp	r5, r3
 8004082:	461a      	mov	r2, r3
 8004084:	d30a      	bcc.n	800409c <quorem+0x108>
 8004086:	613c      	str	r4, [r7, #16]
 8004088:	4630      	mov	r0, r6
 800408a:	b003      	add	sp, #12
 800408c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004090:	6812      	ldr	r2, [r2, #0]
 8004092:	3b04      	subs	r3, #4
 8004094:	2a00      	cmp	r2, #0
 8004096:	d1cb      	bne.n	8004030 <quorem+0x9c>
 8004098:	3c01      	subs	r4, #1
 800409a:	e7c6      	b.n	800402a <quorem+0x96>
 800409c:	6812      	ldr	r2, [r2, #0]
 800409e:	3b04      	subs	r3, #4
 80040a0:	2a00      	cmp	r2, #0
 80040a2:	d1f0      	bne.n	8004086 <quorem+0xf2>
 80040a4:	3c01      	subs	r4, #1
 80040a6:	e7eb      	b.n	8004080 <quorem+0xec>
 80040a8:	2000      	movs	r0, #0
 80040aa:	e7ee      	b.n	800408a <quorem+0xf6>
 80040ac:	0000      	movs	r0, r0
	...

080040b0 <_dtoa_r>:
 80040b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040b4:	4616      	mov	r6, r2
 80040b6:	461f      	mov	r7, r3
 80040b8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80040ba:	b099      	sub	sp, #100	; 0x64
 80040bc:	4605      	mov	r5, r0
 80040be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80040c2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80040c6:	b974      	cbnz	r4, 80040e6 <_dtoa_r+0x36>
 80040c8:	2010      	movs	r0, #16
 80040ca:	f000 fde3 	bl	8004c94 <malloc>
 80040ce:	4602      	mov	r2, r0
 80040d0:	6268      	str	r0, [r5, #36]	; 0x24
 80040d2:	b920      	cbnz	r0, 80040de <_dtoa_r+0x2e>
 80040d4:	21ea      	movs	r1, #234	; 0xea
 80040d6:	4ba8      	ldr	r3, [pc, #672]	; (8004378 <_dtoa_r+0x2c8>)
 80040d8:	48a8      	ldr	r0, [pc, #672]	; (800437c <_dtoa_r+0x2cc>)
 80040da:	f001 fbdd 	bl	8005898 <__assert_func>
 80040de:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80040e2:	6004      	str	r4, [r0, #0]
 80040e4:	60c4      	str	r4, [r0, #12]
 80040e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	b151      	cbz	r1, 8004102 <_dtoa_r+0x52>
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	2301      	movs	r3, #1
 80040f0:	4093      	lsls	r3, r2
 80040f2:	604a      	str	r2, [r1, #4]
 80040f4:	608b      	str	r3, [r1, #8]
 80040f6:	4628      	mov	r0, r5
 80040f8:	f000 fe30 	bl	8004d5c <_Bfree>
 80040fc:	2200      	movs	r2, #0
 80040fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	1e3b      	subs	r3, r7, #0
 8004104:	bfaf      	iteee	ge
 8004106:	2300      	movge	r3, #0
 8004108:	2201      	movlt	r2, #1
 800410a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800410e:	9305      	strlt	r3, [sp, #20]
 8004110:	bfa8      	it	ge
 8004112:	f8c8 3000 	strge.w	r3, [r8]
 8004116:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800411a:	4b99      	ldr	r3, [pc, #612]	; (8004380 <_dtoa_r+0x2d0>)
 800411c:	bfb8      	it	lt
 800411e:	f8c8 2000 	strlt.w	r2, [r8]
 8004122:	ea33 0309 	bics.w	r3, r3, r9
 8004126:	d119      	bne.n	800415c <_dtoa_r+0xac>
 8004128:	f242 730f 	movw	r3, #9999	; 0x270f
 800412c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004134:	4333      	orrs	r3, r6
 8004136:	f000 857f 	beq.w	8004c38 <_dtoa_r+0xb88>
 800413a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800413c:	b953      	cbnz	r3, 8004154 <_dtoa_r+0xa4>
 800413e:	4b91      	ldr	r3, [pc, #580]	; (8004384 <_dtoa_r+0x2d4>)
 8004140:	e022      	b.n	8004188 <_dtoa_r+0xd8>
 8004142:	4b91      	ldr	r3, [pc, #580]	; (8004388 <_dtoa_r+0x2d8>)
 8004144:	9303      	str	r3, [sp, #12]
 8004146:	3308      	adds	r3, #8
 8004148:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	9803      	ldr	r0, [sp, #12]
 800414e:	b019      	add	sp, #100	; 0x64
 8004150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004154:	4b8b      	ldr	r3, [pc, #556]	; (8004384 <_dtoa_r+0x2d4>)
 8004156:	9303      	str	r3, [sp, #12]
 8004158:	3303      	adds	r3, #3
 800415a:	e7f5      	b.n	8004148 <_dtoa_r+0x98>
 800415c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004160:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004164:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004168:	2200      	movs	r2, #0
 800416a:	2300      	movs	r3, #0
 800416c:	f7fc fc1c 	bl	80009a8 <__aeabi_dcmpeq>
 8004170:	4680      	mov	r8, r0
 8004172:	b158      	cbz	r0, 800418c <_dtoa_r+0xdc>
 8004174:	2301      	movs	r3, #1
 8004176:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004178:	6013      	str	r3, [r2, #0]
 800417a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 8558 	beq.w	8004c32 <_dtoa_r+0xb82>
 8004182:	4882      	ldr	r0, [pc, #520]	; (800438c <_dtoa_r+0x2dc>)
 8004184:	6018      	str	r0, [r3, #0]
 8004186:	1e43      	subs	r3, r0, #1
 8004188:	9303      	str	r3, [sp, #12]
 800418a:	e7df      	b.n	800414c <_dtoa_r+0x9c>
 800418c:	ab16      	add	r3, sp, #88	; 0x58
 800418e:	9301      	str	r3, [sp, #4]
 8004190:	ab17      	add	r3, sp, #92	; 0x5c
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	4628      	mov	r0, r5
 8004196:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800419a:	f001 f8c5 	bl	8005328 <__d2b>
 800419e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80041a2:	4683      	mov	fp, r0
 80041a4:	2c00      	cmp	r4, #0
 80041a6:	d07f      	beq.n	80042a8 <_dtoa_r+0x1f8>
 80041a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80041ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041ae:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80041b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041b6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80041ba:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80041be:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80041c2:	2200      	movs	r2, #0
 80041c4:	4b72      	ldr	r3, [pc, #456]	; (8004390 <_dtoa_r+0x2e0>)
 80041c6:	f7fb ffcf 	bl	8000168 <__aeabi_dsub>
 80041ca:	a365      	add	r3, pc, #404	; (adr r3, 8004360 <_dtoa_r+0x2b0>)
 80041cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d0:	f7fc f982 	bl	80004d8 <__aeabi_dmul>
 80041d4:	a364      	add	r3, pc, #400	; (adr r3, 8004368 <_dtoa_r+0x2b8>)
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f7fb ffc7 	bl	800016c <__adddf3>
 80041de:	4606      	mov	r6, r0
 80041e0:	4620      	mov	r0, r4
 80041e2:	460f      	mov	r7, r1
 80041e4:	f7fc f90e 	bl	8000404 <__aeabi_i2d>
 80041e8:	a361      	add	r3, pc, #388	; (adr r3, 8004370 <_dtoa_r+0x2c0>)
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f7fc f973 	bl	80004d8 <__aeabi_dmul>
 80041f2:	4602      	mov	r2, r0
 80041f4:	460b      	mov	r3, r1
 80041f6:	4630      	mov	r0, r6
 80041f8:	4639      	mov	r1, r7
 80041fa:	f7fb ffb7 	bl	800016c <__adddf3>
 80041fe:	4606      	mov	r6, r0
 8004200:	460f      	mov	r7, r1
 8004202:	f7fc fc19 	bl	8000a38 <__aeabi_d2iz>
 8004206:	2200      	movs	r2, #0
 8004208:	4682      	mov	sl, r0
 800420a:	2300      	movs	r3, #0
 800420c:	4630      	mov	r0, r6
 800420e:	4639      	mov	r1, r7
 8004210:	f7fc fbd4 	bl	80009bc <__aeabi_dcmplt>
 8004214:	b148      	cbz	r0, 800422a <_dtoa_r+0x17a>
 8004216:	4650      	mov	r0, sl
 8004218:	f7fc f8f4 	bl	8000404 <__aeabi_i2d>
 800421c:	4632      	mov	r2, r6
 800421e:	463b      	mov	r3, r7
 8004220:	f7fc fbc2 	bl	80009a8 <__aeabi_dcmpeq>
 8004224:	b908      	cbnz	r0, 800422a <_dtoa_r+0x17a>
 8004226:	f10a 3aff 	add.w	sl, sl, #4294967295
 800422a:	f1ba 0f16 	cmp.w	sl, #22
 800422e:	d858      	bhi.n	80042e2 <_dtoa_r+0x232>
 8004230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004234:	4b57      	ldr	r3, [pc, #348]	; (8004394 <_dtoa_r+0x2e4>)
 8004236:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800423a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423e:	f7fc fbbd 	bl	80009bc <__aeabi_dcmplt>
 8004242:	2800      	cmp	r0, #0
 8004244:	d04f      	beq.n	80042e6 <_dtoa_r+0x236>
 8004246:	2300      	movs	r3, #0
 8004248:	f10a 3aff 	add.w	sl, sl, #4294967295
 800424c:	930f      	str	r3, [sp, #60]	; 0x3c
 800424e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004250:	1b1c      	subs	r4, r3, r4
 8004252:	1e63      	subs	r3, r4, #1
 8004254:	9309      	str	r3, [sp, #36]	; 0x24
 8004256:	bf49      	itett	mi
 8004258:	f1c4 0301 	rsbmi	r3, r4, #1
 800425c:	2300      	movpl	r3, #0
 800425e:	9306      	strmi	r3, [sp, #24]
 8004260:	2300      	movmi	r3, #0
 8004262:	bf54      	ite	pl
 8004264:	9306      	strpl	r3, [sp, #24]
 8004266:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004268:	f1ba 0f00 	cmp.w	sl, #0
 800426c:	db3d      	blt.n	80042ea <_dtoa_r+0x23a>
 800426e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004270:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004274:	4453      	add	r3, sl
 8004276:	9309      	str	r3, [sp, #36]	; 0x24
 8004278:	2300      	movs	r3, #0
 800427a:	930a      	str	r3, [sp, #40]	; 0x28
 800427c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800427e:	2b09      	cmp	r3, #9
 8004280:	f200 808c 	bhi.w	800439c <_dtoa_r+0x2ec>
 8004284:	2b05      	cmp	r3, #5
 8004286:	bfc4      	itt	gt
 8004288:	3b04      	subgt	r3, #4
 800428a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800428c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800428e:	bfc8      	it	gt
 8004290:	2400      	movgt	r4, #0
 8004292:	f1a3 0302 	sub.w	r3, r3, #2
 8004296:	bfd8      	it	le
 8004298:	2401      	movle	r4, #1
 800429a:	2b03      	cmp	r3, #3
 800429c:	f200 808a 	bhi.w	80043b4 <_dtoa_r+0x304>
 80042a0:	e8df f003 	tbb	[pc, r3]
 80042a4:	5b4d4f2d 	.word	0x5b4d4f2d
 80042a8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80042ac:	441c      	add	r4, r3
 80042ae:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80042b2:	2b20      	cmp	r3, #32
 80042b4:	bfc3      	ittte	gt
 80042b6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80042ba:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80042be:	fa09 f303 	lslgt.w	r3, r9, r3
 80042c2:	f1c3 0320 	rsble	r3, r3, #32
 80042c6:	bfc6      	itte	gt
 80042c8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80042cc:	4318      	orrgt	r0, r3
 80042ce:	fa06 f003 	lslle.w	r0, r6, r3
 80042d2:	f7fc f887 	bl	80003e4 <__aeabi_ui2d>
 80042d6:	2301      	movs	r3, #1
 80042d8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80042dc:	3c01      	subs	r4, #1
 80042de:	9313      	str	r3, [sp, #76]	; 0x4c
 80042e0:	e76f      	b.n	80041c2 <_dtoa_r+0x112>
 80042e2:	2301      	movs	r3, #1
 80042e4:	e7b2      	b.n	800424c <_dtoa_r+0x19c>
 80042e6:	900f      	str	r0, [sp, #60]	; 0x3c
 80042e8:	e7b1      	b.n	800424e <_dtoa_r+0x19e>
 80042ea:	9b06      	ldr	r3, [sp, #24]
 80042ec:	eba3 030a 	sub.w	r3, r3, sl
 80042f0:	9306      	str	r3, [sp, #24]
 80042f2:	f1ca 0300 	rsb	r3, sl, #0
 80042f6:	930a      	str	r3, [sp, #40]	; 0x28
 80042f8:	2300      	movs	r3, #0
 80042fa:	930e      	str	r3, [sp, #56]	; 0x38
 80042fc:	e7be      	b.n	800427c <_dtoa_r+0x1cc>
 80042fe:	2300      	movs	r3, #0
 8004300:	930b      	str	r3, [sp, #44]	; 0x2c
 8004302:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004304:	2b00      	cmp	r3, #0
 8004306:	dc58      	bgt.n	80043ba <_dtoa_r+0x30a>
 8004308:	f04f 0901 	mov.w	r9, #1
 800430c:	464b      	mov	r3, r9
 800430e:	f8cd 9020 	str.w	r9, [sp, #32]
 8004312:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004316:	2200      	movs	r2, #0
 8004318:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800431a:	6042      	str	r2, [r0, #4]
 800431c:	2204      	movs	r2, #4
 800431e:	f102 0614 	add.w	r6, r2, #20
 8004322:	429e      	cmp	r6, r3
 8004324:	6841      	ldr	r1, [r0, #4]
 8004326:	d94e      	bls.n	80043c6 <_dtoa_r+0x316>
 8004328:	4628      	mov	r0, r5
 800432a:	f000 fcd7 	bl	8004cdc <_Balloc>
 800432e:	9003      	str	r0, [sp, #12]
 8004330:	2800      	cmp	r0, #0
 8004332:	d14c      	bne.n	80043ce <_dtoa_r+0x31e>
 8004334:	4602      	mov	r2, r0
 8004336:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800433a:	4b17      	ldr	r3, [pc, #92]	; (8004398 <_dtoa_r+0x2e8>)
 800433c:	e6cc      	b.n	80040d8 <_dtoa_r+0x28>
 800433e:	2301      	movs	r3, #1
 8004340:	e7de      	b.n	8004300 <_dtoa_r+0x250>
 8004342:	2300      	movs	r3, #0
 8004344:	930b      	str	r3, [sp, #44]	; 0x2c
 8004346:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004348:	eb0a 0903 	add.w	r9, sl, r3
 800434c:	f109 0301 	add.w	r3, r9, #1
 8004350:	2b01      	cmp	r3, #1
 8004352:	9308      	str	r3, [sp, #32]
 8004354:	bfb8      	it	lt
 8004356:	2301      	movlt	r3, #1
 8004358:	e7dd      	b.n	8004316 <_dtoa_r+0x266>
 800435a:	2301      	movs	r3, #1
 800435c:	e7f2      	b.n	8004344 <_dtoa_r+0x294>
 800435e:	bf00      	nop
 8004360:	636f4361 	.word	0x636f4361
 8004364:	3fd287a7 	.word	0x3fd287a7
 8004368:	8b60c8b3 	.word	0x8b60c8b3
 800436c:	3fc68a28 	.word	0x3fc68a28
 8004370:	509f79fb 	.word	0x509f79fb
 8004374:	3fd34413 	.word	0x3fd34413
 8004378:	080072d5 	.word	0x080072d5
 800437c:	080072ec 	.word	0x080072ec
 8004380:	7ff00000 	.word	0x7ff00000
 8004384:	080072d1 	.word	0x080072d1
 8004388:	080072c8 	.word	0x080072c8
 800438c:	080072a5 	.word	0x080072a5
 8004390:	3ff80000 	.word	0x3ff80000
 8004394:	080073e0 	.word	0x080073e0
 8004398:	08007347 	.word	0x08007347
 800439c:	2401      	movs	r4, #1
 800439e:	2300      	movs	r3, #0
 80043a0:	940b      	str	r4, [sp, #44]	; 0x2c
 80043a2:	9322      	str	r3, [sp, #136]	; 0x88
 80043a4:	f04f 39ff 	mov.w	r9, #4294967295
 80043a8:	2200      	movs	r2, #0
 80043aa:	2312      	movs	r3, #18
 80043ac:	f8cd 9020 	str.w	r9, [sp, #32]
 80043b0:	9223      	str	r2, [sp, #140]	; 0x8c
 80043b2:	e7b0      	b.n	8004316 <_dtoa_r+0x266>
 80043b4:	2301      	movs	r3, #1
 80043b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80043b8:	e7f4      	b.n	80043a4 <_dtoa_r+0x2f4>
 80043ba:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80043be:	464b      	mov	r3, r9
 80043c0:	f8cd 9020 	str.w	r9, [sp, #32]
 80043c4:	e7a7      	b.n	8004316 <_dtoa_r+0x266>
 80043c6:	3101      	adds	r1, #1
 80043c8:	6041      	str	r1, [r0, #4]
 80043ca:	0052      	lsls	r2, r2, #1
 80043cc:	e7a7      	b.n	800431e <_dtoa_r+0x26e>
 80043ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80043d0:	9a03      	ldr	r2, [sp, #12]
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	9b08      	ldr	r3, [sp, #32]
 80043d6:	2b0e      	cmp	r3, #14
 80043d8:	f200 80a8 	bhi.w	800452c <_dtoa_r+0x47c>
 80043dc:	2c00      	cmp	r4, #0
 80043de:	f000 80a5 	beq.w	800452c <_dtoa_r+0x47c>
 80043e2:	f1ba 0f00 	cmp.w	sl, #0
 80043e6:	dd34      	ble.n	8004452 <_dtoa_r+0x3a2>
 80043e8:	4a9a      	ldr	r2, [pc, #616]	; (8004654 <_dtoa_r+0x5a4>)
 80043ea:	f00a 030f 	and.w	r3, sl, #15
 80043ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80043f2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80043f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043fa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80043fe:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004402:	d016      	beq.n	8004432 <_dtoa_r+0x382>
 8004404:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004408:	4b93      	ldr	r3, [pc, #588]	; (8004658 <_dtoa_r+0x5a8>)
 800440a:	2703      	movs	r7, #3
 800440c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004410:	f7fc f98c 	bl	800072c <__aeabi_ddiv>
 8004414:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004418:	f004 040f 	and.w	r4, r4, #15
 800441c:	4e8e      	ldr	r6, [pc, #568]	; (8004658 <_dtoa_r+0x5a8>)
 800441e:	b954      	cbnz	r4, 8004436 <_dtoa_r+0x386>
 8004420:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004424:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004428:	f7fc f980 	bl	800072c <__aeabi_ddiv>
 800442c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004430:	e029      	b.n	8004486 <_dtoa_r+0x3d6>
 8004432:	2702      	movs	r7, #2
 8004434:	e7f2      	b.n	800441c <_dtoa_r+0x36c>
 8004436:	07e1      	lsls	r1, r4, #31
 8004438:	d508      	bpl.n	800444c <_dtoa_r+0x39c>
 800443a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800443e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004442:	f7fc f849 	bl	80004d8 <__aeabi_dmul>
 8004446:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800444a:	3701      	adds	r7, #1
 800444c:	1064      	asrs	r4, r4, #1
 800444e:	3608      	adds	r6, #8
 8004450:	e7e5      	b.n	800441e <_dtoa_r+0x36e>
 8004452:	f000 80a5 	beq.w	80045a0 <_dtoa_r+0x4f0>
 8004456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800445a:	f1ca 0400 	rsb	r4, sl, #0
 800445e:	4b7d      	ldr	r3, [pc, #500]	; (8004654 <_dtoa_r+0x5a4>)
 8004460:	f004 020f 	and.w	r2, r4, #15
 8004464:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446c:	f7fc f834 	bl	80004d8 <__aeabi_dmul>
 8004470:	2702      	movs	r7, #2
 8004472:	2300      	movs	r3, #0
 8004474:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004478:	4e77      	ldr	r6, [pc, #476]	; (8004658 <_dtoa_r+0x5a8>)
 800447a:	1124      	asrs	r4, r4, #4
 800447c:	2c00      	cmp	r4, #0
 800447e:	f040 8084 	bne.w	800458a <_dtoa_r+0x4da>
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1d2      	bne.n	800442c <_dtoa_r+0x37c>
 8004486:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 808b 	beq.w	80045a4 <_dtoa_r+0x4f4>
 800448e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004492:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004496:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800449a:	2200      	movs	r2, #0
 800449c:	4b6f      	ldr	r3, [pc, #444]	; (800465c <_dtoa_r+0x5ac>)
 800449e:	f7fc fa8d 	bl	80009bc <__aeabi_dcmplt>
 80044a2:	2800      	cmp	r0, #0
 80044a4:	d07e      	beq.n	80045a4 <_dtoa_r+0x4f4>
 80044a6:	9b08      	ldr	r3, [sp, #32]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d07b      	beq.n	80045a4 <_dtoa_r+0x4f4>
 80044ac:	f1b9 0f00 	cmp.w	r9, #0
 80044b0:	dd38      	ble.n	8004524 <_dtoa_r+0x474>
 80044b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80044b6:	2200      	movs	r2, #0
 80044b8:	4b69      	ldr	r3, [pc, #420]	; (8004660 <_dtoa_r+0x5b0>)
 80044ba:	f7fc f80d 	bl	80004d8 <__aeabi_dmul>
 80044be:	464c      	mov	r4, r9
 80044c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044c4:	f10a 38ff 	add.w	r8, sl, #4294967295
 80044c8:	3701      	adds	r7, #1
 80044ca:	4638      	mov	r0, r7
 80044cc:	f7fb ff9a 	bl	8000404 <__aeabi_i2d>
 80044d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044d4:	f7fc f800 	bl	80004d8 <__aeabi_dmul>
 80044d8:	2200      	movs	r2, #0
 80044da:	4b62      	ldr	r3, [pc, #392]	; (8004664 <_dtoa_r+0x5b4>)
 80044dc:	f7fb fe46 	bl	800016c <__adddf3>
 80044e0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80044e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80044e8:	9611      	str	r6, [sp, #68]	; 0x44
 80044ea:	2c00      	cmp	r4, #0
 80044ec:	d15d      	bne.n	80045aa <_dtoa_r+0x4fa>
 80044ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044f2:	2200      	movs	r2, #0
 80044f4:	4b5c      	ldr	r3, [pc, #368]	; (8004668 <_dtoa_r+0x5b8>)
 80044f6:	f7fb fe37 	bl	8000168 <__aeabi_dsub>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004502:	4633      	mov	r3, r6
 8004504:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004506:	f7fc fa77 	bl	80009f8 <__aeabi_dcmpgt>
 800450a:	2800      	cmp	r0, #0
 800450c:	f040 829c 	bne.w	8004a48 <_dtoa_r+0x998>
 8004510:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004514:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004516:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800451a:	f7fc fa4f 	bl	80009bc <__aeabi_dcmplt>
 800451e:	2800      	cmp	r0, #0
 8004520:	f040 8290 	bne.w	8004a44 <_dtoa_r+0x994>
 8004524:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004528:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800452c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800452e:	2b00      	cmp	r3, #0
 8004530:	f2c0 8152 	blt.w	80047d8 <_dtoa_r+0x728>
 8004534:	f1ba 0f0e 	cmp.w	sl, #14
 8004538:	f300 814e 	bgt.w	80047d8 <_dtoa_r+0x728>
 800453c:	4b45      	ldr	r3, [pc, #276]	; (8004654 <_dtoa_r+0x5a4>)
 800453e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004542:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004546:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800454a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800454c:	2b00      	cmp	r3, #0
 800454e:	f280 80db 	bge.w	8004708 <_dtoa_r+0x658>
 8004552:	9b08      	ldr	r3, [sp, #32]
 8004554:	2b00      	cmp	r3, #0
 8004556:	f300 80d7 	bgt.w	8004708 <_dtoa_r+0x658>
 800455a:	f040 8272 	bne.w	8004a42 <_dtoa_r+0x992>
 800455e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004562:	2200      	movs	r2, #0
 8004564:	4b40      	ldr	r3, [pc, #256]	; (8004668 <_dtoa_r+0x5b8>)
 8004566:	f7fb ffb7 	bl	80004d8 <__aeabi_dmul>
 800456a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800456e:	f7fc fa39 	bl	80009e4 <__aeabi_dcmpge>
 8004572:	9c08      	ldr	r4, [sp, #32]
 8004574:	4626      	mov	r6, r4
 8004576:	2800      	cmp	r0, #0
 8004578:	f040 8248 	bne.w	8004a0c <_dtoa_r+0x95c>
 800457c:	2331      	movs	r3, #49	; 0x31
 800457e:	9f03      	ldr	r7, [sp, #12]
 8004580:	f10a 0a01 	add.w	sl, sl, #1
 8004584:	f807 3b01 	strb.w	r3, [r7], #1
 8004588:	e244      	b.n	8004a14 <_dtoa_r+0x964>
 800458a:	07e2      	lsls	r2, r4, #31
 800458c:	d505      	bpl.n	800459a <_dtoa_r+0x4ea>
 800458e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004592:	f7fb ffa1 	bl	80004d8 <__aeabi_dmul>
 8004596:	2301      	movs	r3, #1
 8004598:	3701      	adds	r7, #1
 800459a:	1064      	asrs	r4, r4, #1
 800459c:	3608      	adds	r6, #8
 800459e:	e76d      	b.n	800447c <_dtoa_r+0x3cc>
 80045a0:	2702      	movs	r7, #2
 80045a2:	e770      	b.n	8004486 <_dtoa_r+0x3d6>
 80045a4:	46d0      	mov	r8, sl
 80045a6:	9c08      	ldr	r4, [sp, #32]
 80045a8:	e78f      	b.n	80044ca <_dtoa_r+0x41a>
 80045aa:	9903      	ldr	r1, [sp, #12]
 80045ac:	4b29      	ldr	r3, [pc, #164]	; (8004654 <_dtoa_r+0x5a4>)
 80045ae:	4421      	add	r1, r4
 80045b0:	9112      	str	r1, [sp, #72]	; 0x48
 80045b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80045b8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80045bc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80045c0:	2900      	cmp	r1, #0
 80045c2:	d055      	beq.n	8004670 <_dtoa_r+0x5c0>
 80045c4:	2000      	movs	r0, #0
 80045c6:	4929      	ldr	r1, [pc, #164]	; (800466c <_dtoa_r+0x5bc>)
 80045c8:	f7fc f8b0 	bl	800072c <__aeabi_ddiv>
 80045cc:	463b      	mov	r3, r7
 80045ce:	4632      	mov	r2, r6
 80045d0:	f7fb fdca 	bl	8000168 <__aeabi_dsub>
 80045d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80045d8:	9f03      	ldr	r7, [sp, #12]
 80045da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045de:	f7fc fa2b 	bl	8000a38 <__aeabi_d2iz>
 80045e2:	4604      	mov	r4, r0
 80045e4:	f7fb ff0e 	bl	8000404 <__aeabi_i2d>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045f0:	f7fb fdba 	bl	8000168 <__aeabi_dsub>
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	3430      	adds	r4, #48	; 0x30
 80045fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80045fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004602:	f807 4b01 	strb.w	r4, [r7], #1
 8004606:	f7fc f9d9 	bl	80009bc <__aeabi_dcmplt>
 800460a:	2800      	cmp	r0, #0
 800460c:	d174      	bne.n	80046f8 <_dtoa_r+0x648>
 800460e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004612:	2000      	movs	r0, #0
 8004614:	4911      	ldr	r1, [pc, #68]	; (800465c <_dtoa_r+0x5ac>)
 8004616:	f7fb fda7 	bl	8000168 <__aeabi_dsub>
 800461a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800461e:	f7fc f9cd 	bl	80009bc <__aeabi_dcmplt>
 8004622:	2800      	cmp	r0, #0
 8004624:	f040 80b7 	bne.w	8004796 <_dtoa_r+0x6e6>
 8004628:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800462a:	429f      	cmp	r7, r3
 800462c:	f43f af7a 	beq.w	8004524 <_dtoa_r+0x474>
 8004630:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004634:	2200      	movs	r2, #0
 8004636:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <_dtoa_r+0x5b0>)
 8004638:	f7fb ff4e 	bl	80004d8 <__aeabi_dmul>
 800463c:	2200      	movs	r2, #0
 800463e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <_dtoa_r+0x5b0>)
 8004648:	f7fb ff46 	bl	80004d8 <__aeabi_dmul>
 800464c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004650:	e7c3      	b.n	80045da <_dtoa_r+0x52a>
 8004652:	bf00      	nop
 8004654:	080073e0 	.word	0x080073e0
 8004658:	080073b8 	.word	0x080073b8
 800465c:	3ff00000 	.word	0x3ff00000
 8004660:	40240000 	.word	0x40240000
 8004664:	401c0000 	.word	0x401c0000
 8004668:	40140000 	.word	0x40140000
 800466c:	3fe00000 	.word	0x3fe00000
 8004670:	4630      	mov	r0, r6
 8004672:	4639      	mov	r1, r7
 8004674:	f7fb ff30 	bl	80004d8 <__aeabi_dmul>
 8004678:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800467a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800467e:	9c03      	ldr	r4, [sp, #12]
 8004680:	9314      	str	r3, [sp, #80]	; 0x50
 8004682:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004686:	f7fc f9d7 	bl	8000a38 <__aeabi_d2iz>
 800468a:	9015      	str	r0, [sp, #84]	; 0x54
 800468c:	f7fb feba 	bl	8000404 <__aeabi_i2d>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004698:	f7fb fd66 	bl	8000168 <__aeabi_dsub>
 800469c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800469e:	4606      	mov	r6, r0
 80046a0:	3330      	adds	r3, #48	; 0x30
 80046a2:	f804 3b01 	strb.w	r3, [r4], #1
 80046a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80046a8:	460f      	mov	r7, r1
 80046aa:	429c      	cmp	r4, r3
 80046ac:	f04f 0200 	mov.w	r2, #0
 80046b0:	d124      	bne.n	80046fc <_dtoa_r+0x64c>
 80046b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046b6:	4bb0      	ldr	r3, [pc, #704]	; (8004978 <_dtoa_r+0x8c8>)
 80046b8:	f7fb fd58 	bl	800016c <__adddf3>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4630      	mov	r0, r6
 80046c2:	4639      	mov	r1, r7
 80046c4:	f7fc f998 	bl	80009f8 <__aeabi_dcmpgt>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d163      	bne.n	8004794 <_dtoa_r+0x6e4>
 80046cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80046d0:	2000      	movs	r0, #0
 80046d2:	49a9      	ldr	r1, [pc, #676]	; (8004978 <_dtoa_r+0x8c8>)
 80046d4:	f7fb fd48 	bl	8000168 <__aeabi_dsub>
 80046d8:	4602      	mov	r2, r0
 80046da:	460b      	mov	r3, r1
 80046dc:	4630      	mov	r0, r6
 80046de:	4639      	mov	r1, r7
 80046e0:	f7fc f96c 	bl	80009bc <__aeabi_dcmplt>
 80046e4:	2800      	cmp	r0, #0
 80046e6:	f43f af1d 	beq.w	8004524 <_dtoa_r+0x474>
 80046ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80046ec:	1e7b      	subs	r3, r7, #1
 80046ee:	9314      	str	r3, [sp, #80]	; 0x50
 80046f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80046f4:	2b30      	cmp	r3, #48	; 0x30
 80046f6:	d0f8      	beq.n	80046ea <_dtoa_r+0x63a>
 80046f8:	46c2      	mov	sl, r8
 80046fa:	e03b      	b.n	8004774 <_dtoa_r+0x6c4>
 80046fc:	4b9f      	ldr	r3, [pc, #636]	; (800497c <_dtoa_r+0x8cc>)
 80046fe:	f7fb feeb 	bl	80004d8 <__aeabi_dmul>
 8004702:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004706:	e7bc      	b.n	8004682 <_dtoa_r+0x5d2>
 8004708:	9f03      	ldr	r7, [sp, #12]
 800470a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800470e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004712:	4640      	mov	r0, r8
 8004714:	4649      	mov	r1, r9
 8004716:	f7fc f809 	bl	800072c <__aeabi_ddiv>
 800471a:	f7fc f98d 	bl	8000a38 <__aeabi_d2iz>
 800471e:	4604      	mov	r4, r0
 8004720:	f7fb fe70 	bl	8000404 <__aeabi_i2d>
 8004724:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004728:	f7fb fed6 	bl	80004d8 <__aeabi_dmul>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4640      	mov	r0, r8
 8004732:	4649      	mov	r1, r9
 8004734:	f7fb fd18 	bl	8000168 <__aeabi_dsub>
 8004738:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800473c:	f807 6b01 	strb.w	r6, [r7], #1
 8004740:	9e03      	ldr	r6, [sp, #12]
 8004742:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004746:	1bbe      	subs	r6, r7, r6
 8004748:	45b4      	cmp	ip, r6
 800474a:	4602      	mov	r2, r0
 800474c:	460b      	mov	r3, r1
 800474e:	d136      	bne.n	80047be <_dtoa_r+0x70e>
 8004750:	f7fb fd0c 	bl	800016c <__adddf3>
 8004754:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004758:	4680      	mov	r8, r0
 800475a:	4689      	mov	r9, r1
 800475c:	f7fc f94c 	bl	80009f8 <__aeabi_dcmpgt>
 8004760:	bb58      	cbnz	r0, 80047ba <_dtoa_r+0x70a>
 8004762:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004766:	4640      	mov	r0, r8
 8004768:	4649      	mov	r1, r9
 800476a:	f7fc f91d 	bl	80009a8 <__aeabi_dcmpeq>
 800476e:	b108      	cbz	r0, 8004774 <_dtoa_r+0x6c4>
 8004770:	07e1      	lsls	r1, r4, #31
 8004772:	d422      	bmi.n	80047ba <_dtoa_r+0x70a>
 8004774:	4628      	mov	r0, r5
 8004776:	4659      	mov	r1, fp
 8004778:	f000 faf0 	bl	8004d5c <_Bfree>
 800477c:	2300      	movs	r3, #0
 800477e:	703b      	strb	r3, [r7, #0]
 8004780:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004782:	f10a 0001 	add.w	r0, sl, #1
 8004786:	6018      	str	r0, [r3, #0]
 8004788:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800478a:	2b00      	cmp	r3, #0
 800478c:	f43f acde 	beq.w	800414c <_dtoa_r+0x9c>
 8004790:	601f      	str	r7, [r3, #0]
 8004792:	e4db      	b.n	800414c <_dtoa_r+0x9c>
 8004794:	4627      	mov	r7, r4
 8004796:	463b      	mov	r3, r7
 8004798:	461f      	mov	r7, r3
 800479a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800479e:	2a39      	cmp	r2, #57	; 0x39
 80047a0:	d107      	bne.n	80047b2 <_dtoa_r+0x702>
 80047a2:	9a03      	ldr	r2, [sp, #12]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1f7      	bne.n	8004798 <_dtoa_r+0x6e8>
 80047a8:	2230      	movs	r2, #48	; 0x30
 80047aa:	9903      	ldr	r1, [sp, #12]
 80047ac:	f108 0801 	add.w	r8, r8, #1
 80047b0:	700a      	strb	r2, [r1, #0]
 80047b2:	781a      	ldrb	r2, [r3, #0]
 80047b4:	3201      	adds	r2, #1
 80047b6:	701a      	strb	r2, [r3, #0]
 80047b8:	e79e      	b.n	80046f8 <_dtoa_r+0x648>
 80047ba:	46d0      	mov	r8, sl
 80047bc:	e7eb      	b.n	8004796 <_dtoa_r+0x6e6>
 80047be:	2200      	movs	r2, #0
 80047c0:	4b6e      	ldr	r3, [pc, #440]	; (800497c <_dtoa_r+0x8cc>)
 80047c2:	f7fb fe89 	bl	80004d8 <__aeabi_dmul>
 80047c6:	2200      	movs	r2, #0
 80047c8:	2300      	movs	r3, #0
 80047ca:	4680      	mov	r8, r0
 80047cc:	4689      	mov	r9, r1
 80047ce:	f7fc f8eb 	bl	80009a8 <__aeabi_dcmpeq>
 80047d2:	2800      	cmp	r0, #0
 80047d4:	d09b      	beq.n	800470e <_dtoa_r+0x65e>
 80047d6:	e7cd      	b.n	8004774 <_dtoa_r+0x6c4>
 80047d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047da:	2a00      	cmp	r2, #0
 80047dc:	f000 80d0 	beq.w	8004980 <_dtoa_r+0x8d0>
 80047e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80047e2:	2a01      	cmp	r2, #1
 80047e4:	f300 80ae 	bgt.w	8004944 <_dtoa_r+0x894>
 80047e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80047ea:	2a00      	cmp	r2, #0
 80047ec:	f000 80a6 	beq.w	800493c <_dtoa_r+0x88c>
 80047f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80047f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80047f6:	9f06      	ldr	r7, [sp, #24]
 80047f8:	9a06      	ldr	r2, [sp, #24]
 80047fa:	2101      	movs	r1, #1
 80047fc:	441a      	add	r2, r3
 80047fe:	9206      	str	r2, [sp, #24]
 8004800:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004802:	4628      	mov	r0, r5
 8004804:	441a      	add	r2, r3
 8004806:	9209      	str	r2, [sp, #36]	; 0x24
 8004808:	f000 fb5e 	bl	8004ec8 <__i2b>
 800480c:	4606      	mov	r6, r0
 800480e:	2f00      	cmp	r7, #0
 8004810:	dd0c      	ble.n	800482c <_dtoa_r+0x77c>
 8004812:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004814:	2b00      	cmp	r3, #0
 8004816:	dd09      	ble.n	800482c <_dtoa_r+0x77c>
 8004818:	42bb      	cmp	r3, r7
 800481a:	bfa8      	it	ge
 800481c:	463b      	movge	r3, r7
 800481e:	9a06      	ldr	r2, [sp, #24]
 8004820:	1aff      	subs	r7, r7, r3
 8004822:	1ad2      	subs	r2, r2, r3
 8004824:	9206      	str	r2, [sp, #24]
 8004826:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	9309      	str	r3, [sp, #36]	; 0x24
 800482c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800482e:	b1f3      	cbz	r3, 800486e <_dtoa_r+0x7be>
 8004830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 80a8 	beq.w	8004988 <_dtoa_r+0x8d8>
 8004838:	2c00      	cmp	r4, #0
 800483a:	dd10      	ble.n	800485e <_dtoa_r+0x7ae>
 800483c:	4631      	mov	r1, r6
 800483e:	4622      	mov	r2, r4
 8004840:	4628      	mov	r0, r5
 8004842:	f000 fbff 	bl	8005044 <__pow5mult>
 8004846:	465a      	mov	r2, fp
 8004848:	4601      	mov	r1, r0
 800484a:	4606      	mov	r6, r0
 800484c:	4628      	mov	r0, r5
 800484e:	f000 fb51 	bl	8004ef4 <__multiply>
 8004852:	4680      	mov	r8, r0
 8004854:	4659      	mov	r1, fp
 8004856:	4628      	mov	r0, r5
 8004858:	f000 fa80 	bl	8004d5c <_Bfree>
 800485c:	46c3      	mov	fp, r8
 800485e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004860:	1b1a      	subs	r2, r3, r4
 8004862:	d004      	beq.n	800486e <_dtoa_r+0x7be>
 8004864:	4659      	mov	r1, fp
 8004866:	4628      	mov	r0, r5
 8004868:	f000 fbec 	bl	8005044 <__pow5mult>
 800486c:	4683      	mov	fp, r0
 800486e:	2101      	movs	r1, #1
 8004870:	4628      	mov	r0, r5
 8004872:	f000 fb29 	bl	8004ec8 <__i2b>
 8004876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004878:	4604      	mov	r4, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	f340 8086 	ble.w	800498c <_dtoa_r+0x8dc>
 8004880:	461a      	mov	r2, r3
 8004882:	4601      	mov	r1, r0
 8004884:	4628      	mov	r0, r5
 8004886:	f000 fbdd 	bl	8005044 <__pow5mult>
 800488a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800488c:	4604      	mov	r4, r0
 800488e:	2b01      	cmp	r3, #1
 8004890:	dd7f      	ble.n	8004992 <_dtoa_r+0x8e2>
 8004892:	f04f 0800 	mov.w	r8, #0
 8004896:	6923      	ldr	r3, [r4, #16]
 8004898:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800489c:	6918      	ldr	r0, [r3, #16]
 800489e:	f000 fac5 	bl	8004e2c <__hi0bits>
 80048a2:	f1c0 0020 	rsb	r0, r0, #32
 80048a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048a8:	4418      	add	r0, r3
 80048aa:	f010 001f 	ands.w	r0, r0, #31
 80048ae:	f000 8092 	beq.w	80049d6 <_dtoa_r+0x926>
 80048b2:	f1c0 0320 	rsb	r3, r0, #32
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	f340 808a 	ble.w	80049d0 <_dtoa_r+0x920>
 80048bc:	f1c0 001c 	rsb	r0, r0, #28
 80048c0:	9b06      	ldr	r3, [sp, #24]
 80048c2:	4407      	add	r7, r0
 80048c4:	4403      	add	r3, r0
 80048c6:	9306      	str	r3, [sp, #24]
 80048c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ca:	4403      	add	r3, r0
 80048cc:	9309      	str	r3, [sp, #36]	; 0x24
 80048ce:	9b06      	ldr	r3, [sp, #24]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	dd05      	ble.n	80048e0 <_dtoa_r+0x830>
 80048d4:	4659      	mov	r1, fp
 80048d6:	461a      	mov	r2, r3
 80048d8:	4628      	mov	r0, r5
 80048da:	f000 fc0d 	bl	80050f8 <__lshift>
 80048de:	4683      	mov	fp, r0
 80048e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	dd05      	ble.n	80048f2 <_dtoa_r+0x842>
 80048e6:	4621      	mov	r1, r4
 80048e8:	461a      	mov	r2, r3
 80048ea:	4628      	mov	r0, r5
 80048ec:	f000 fc04 	bl	80050f8 <__lshift>
 80048f0:	4604      	mov	r4, r0
 80048f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d070      	beq.n	80049da <_dtoa_r+0x92a>
 80048f8:	4621      	mov	r1, r4
 80048fa:	4658      	mov	r0, fp
 80048fc:	f000 fc6c 	bl	80051d8 <__mcmp>
 8004900:	2800      	cmp	r0, #0
 8004902:	da6a      	bge.n	80049da <_dtoa_r+0x92a>
 8004904:	2300      	movs	r3, #0
 8004906:	4659      	mov	r1, fp
 8004908:	220a      	movs	r2, #10
 800490a:	4628      	mov	r0, r5
 800490c:	f000 fa48 	bl	8004da0 <__multadd>
 8004910:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004912:	4683      	mov	fp, r0
 8004914:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8194 	beq.w	8004c46 <_dtoa_r+0xb96>
 800491e:	4631      	mov	r1, r6
 8004920:	2300      	movs	r3, #0
 8004922:	220a      	movs	r2, #10
 8004924:	4628      	mov	r0, r5
 8004926:	f000 fa3b 	bl	8004da0 <__multadd>
 800492a:	f1b9 0f00 	cmp.w	r9, #0
 800492e:	4606      	mov	r6, r0
 8004930:	f300 8093 	bgt.w	8004a5a <_dtoa_r+0x9aa>
 8004934:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004936:	2b02      	cmp	r3, #2
 8004938:	dc57      	bgt.n	80049ea <_dtoa_r+0x93a>
 800493a:	e08e      	b.n	8004a5a <_dtoa_r+0x9aa>
 800493c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800493e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004942:	e757      	b.n	80047f4 <_dtoa_r+0x744>
 8004944:	9b08      	ldr	r3, [sp, #32]
 8004946:	1e5c      	subs	r4, r3, #1
 8004948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800494a:	42a3      	cmp	r3, r4
 800494c:	bfb7      	itett	lt
 800494e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004950:	1b1c      	subge	r4, r3, r4
 8004952:	1ae2      	sublt	r2, r4, r3
 8004954:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004956:	bfbe      	ittt	lt
 8004958:	940a      	strlt	r4, [sp, #40]	; 0x28
 800495a:	189b      	addlt	r3, r3, r2
 800495c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800495e:	9b08      	ldr	r3, [sp, #32]
 8004960:	bfb8      	it	lt
 8004962:	2400      	movlt	r4, #0
 8004964:	2b00      	cmp	r3, #0
 8004966:	bfbb      	ittet	lt
 8004968:	9b06      	ldrlt	r3, [sp, #24]
 800496a:	9a08      	ldrlt	r2, [sp, #32]
 800496c:	9f06      	ldrge	r7, [sp, #24]
 800496e:	1a9f      	sublt	r7, r3, r2
 8004970:	bfac      	ite	ge
 8004972:	9b08      	ldrge	r3, [sp, #32]
 8004974:	2300      	movlt	r3, #0
 8004976:	e73f      	b.n	80047f8 <_dtoa_r+0x748>
 8004978:	3fe00000 	.word	0x3fe00000
 800497c:	40240000 	.word	0x40240000
 8004980:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004982:	9f06      	ldr	r7, [sp, #24]
 8004984:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004986:	e742      	b.n	800480e <_dtoa_r+0x75e>
 8004988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800498a:	e76b      	b.n	8004864 <_dtoa_r+0x7b4>
 800498c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800498e:	2b01      	cmp	r3, #1
 8004990:	dc19      	bgt.n	80049c6 <_dtoa_r+0x916>
 8004992:	9b04      	ldr	r3, [sp, #16]
 8004994:	b9bb      	cbnz	r3, 80049c6 <_dtoa_r+0x916>
 8004996:	9b05      	ldr	r3, [sp, #20]
 8004998:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800499c:	b99b      	cbnz	r3, 80049c6 <_dtoa_r+0x916>
 800499e:	9b05      	ldr	r3, [sp, #20]
 80049a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049a4:	0d1b      	lsrs	r3, r3, #20
 80049a6:	051b      	lsls	r3, r3, #20
 80049a8:	b183      	cbz	r3, 80049cc <_dtoa_r+0x91c>
 80049aa:	f04f 0801 	mov.w	r8, #1
 80049ae:	9b06      	ldr	r3, [sp, #24]
 80049b0:	3301      	adds	r3, #1
 80049b2:	9306      	str	r3, [sp, #24]
 80049b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049b6:	3301      	adds	r3, #1
 80049b8:	9309      	str	r3, [sp, #36]	; 0x24
 80049ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f47f af6a 	bne.w	8004896 <_dtoa_r+0x7e6>
 80049c2:	2001      	movs	r0, #1
 80049c4:	e76f      	b.n	80048a6 <_dtoa_r+0x7f6>
 80049c6:	f04f 0800 	mov.w	r8, #0
 80049ca:	e7f6      	b.n	80049ba <_dtoa_r+0x90a>
 80049cc:	4698      	mov	r8, r3
 80049ce:	e7f4      	b.n	80049ba <_dtoa_r+0x90a>
 80049d0:	f43f af7d 	beq.w	80048ce <_dtoa_r+0x81e>
 80049d4:	4618      	mov	r0, r3
 80049d6:	301c      	adds	r0, #28
 80049d8:	e772      	b.n	80048c0 <_dtoa_r+0x810>
 80049da:	9b08      	ldr	r3, [sp, #32]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	dc36      	bgt.n	8004a4e <_dtoa_r+0x99e>
 80049e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	dd33      	ble.n	8004a4e <_dtoa_r+0x99e>
 80049e6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049ea:	f1b9 0f00 	cmp.w	r9, #0
 80049ee:	d10d      	bne.n	8004a0c <_dtoa_r+0x95c>
 80049f0:	4621      	mov	r1, r4
 80049f2:	464b      	mov	r3, r9
 80049f4:	2205      	movs	r2, #5
 80049f6:	4628      	mov	r0, r5
 80049f8:	f000 f9d2 	bl	8004da0 <__multadd>
 80049fc:	4601      	mov	r1, r0
 80049fe:	4604      	mov	r4, r0
 8004a00:	4658      	mov	r0, fp
 8004a02:	f000 fbe9 	bl	80051d8 <__mcmp>
 8004a06:	2800      	cmp	r0, #0
 8004a08:	f73f adb8 	bgt.w	800457c <_dtoa_r+0x4cc>
 8004a0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004a0e:	9f03      	ldr	r7, [sp, #12]
 8004a10:	ea6f 0a03 	mvn.w	sl, r3
 8004a14:	f04f 0800 	mov.w	r8, #0
 8004a18:	4621      	mov	r1, r4
 8004a1a:	4628      	mov	r0, r5
 8004a1c:	f000 f99e 	bl	8004d5c <_Bfree>
 8004a20:	2e00      	cmp	r6, #0
 8004a22:	f43f aea7 	beq.w	8004774 <_dtoa_r+0x6c4>
 8004a26:	f1b8 0f00 	cmp.w	r8, #0
 8004a2a:	d005      	beq.n	8004a38 <_dtoa_r+0x988>
 8004a2c:	45b0      	cmp	r8, r6
 8004a2e:	d003      	beq.n	8004a38 <_dtoa_r+0x988>
 8004a30:	4641      	mov	r1, r8
 8004a32:	4628      	mov	r0, r5
 8004a34:	f000 f992 	bl	8004d5c <_Bfree>
 8004a38:	4631      	mov	r1, r6
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	f000 f98e 	bl	8004d5c <_Bfree>
 8004a40:	e698      	b.n	8004774 <_dtoa_r+0x6c4>
 8004a42:	2400      	movs	r4, #0
 8004a44:	4626      	mov	r6, r4
 8004a46:	e7e1      	b.n	8004a0c <_dtoa_r+0x95c>
 8004a48:	46c2      	mov	sl, r8
 8004a4a:	4626      	mov	r6, r4
 8004a4c:	e596      	b.n	800457c <_dtoa_r+0x4cc>
 8004a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 80fd 	beq.w	8004c54 <_dtoa_r+0xba4>
 8004a5a:	2f00      	cmp	r7, #0
 8004a5c:	dd05      	ble.n	8004a6a <_dtoa_r+0x9ba>
 8004a5e:	4631      	mov	r1, r6
 8004a60:	463a      	mov	r2, r7
 8004a62:	4628      	mov	r0, r5
 8004a64:	f000 fb48 	bl	80050f8 <__lshift>
 8004a68:	4606      	mov	r6, r0
 8004a6a:	f1b8 0f00 	cmp.w	r8, #0
 8004a6e:	d05c      	beq.n	8004b2a <_dtoa_r+0xa7a>
 8004a70:	4628      	mov	r0, r5
 8004a72:	6871      	ldr	r1, [r6, #4]
 8004a74:	f000 f932 	bl	8004cdc <_Balloc>
 8004a78:	4607      	mov	r7, r0
 8004a7a:	b928      	cbnz	r0, 8004a88 <_dtoa_r+0x9d8>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004a82:	4b7f      	ldr	r3, [pc, #508]	; (8004c80 <_dtoa_r+0xbd0>)
 8004a84:	f7ff bb28 	b.w	80040d8 <_dtoa_r+0x28>
 8004a88:	6932      	ldr	r2, [r6, #16]
 8004a8a:	f106 010c 	add.w	r1, r6, #12
 8004a8e:	3202      	adds	r2, #2
 8004a90:	0092      	lsls	r2, r2, #2
 8004a92:	300c      	adds	r0, #12
 8004a94:	f000 f914 	bl	8004cc0 <memcpy>
 8004a98:	2201      	movs	r2, #1
 8004a9a:	4639      	mov	r1, r7
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f000 fb2b 	bl	80050f8 <__lshift>
 8004aa2:	46b0      	mov	r8, r6
 8004aa4:	4606      	mov	r6, r0
 8004aa6:	9b03      	ldr	r3, [sp, #12]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	9308      	str	r3, [sp, #32]
 8004aac:	9b03      	ldr	r3, [sp, #12]
 8004aae:	444b      	add	r3, r9
 8004ab0:	930a      	str	r3, [sp, #40]	; 0x28
 8004ab2:	9b04      	ldr	r3, [sp, #16]
 8004ab4:	f003 0301 	and.w	r3, r3, #1
 8004ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8004aba:	9b08      	ldr	r3, [sp, #32]
 8004abc:	4621      	mov	r1, r4
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	4658      	mov	r0, fp
 8004ac2:	9304      	str	r3, [sp, #16]
 8004ac4:	f7ff fa66 	bl	8003f94 <quorem>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	4641      	mov	r1, r8
 8004acc:	3330      	adds	r3, #48	; 0x30
 8004ace:	9006      	str	r0, [sp, #24]
 8004ad0:	4658      	mov	r0, fp
 8004ad2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004ad4:	f000 fb80 	bl	80051d8 <__mcmp>
 8004ad8:	4632      	mov	r2, r6
 8004ada:	4681      	mov	r9, r0
 8004adc:	4621      	mov	r1, r4
 8004ade:	4628      	mov	r0, r5
 8004ae0:	f000 fb96 	bl	8005210 <__mdiff>
 8004ae4:	68c2      	ldr	r2, [r0, #12]
 8004ae6:	4607      	mov	r7, r0
 8004ae8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004aea:	bb02      	cbnz	r2, 8004b2e <_dtoa_r+0xa7e>
 8004aec:	4601      	mov	r1, r0
 8004aee:	4658      	mov	r0, fp
 8004af0:	f000 fb72 	bl	80051d8 <__mcmp>
 8004af4:	4602      	mov	r2, r0
 8004af6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004af8:	4639      	mov	r1, r7
 8004afa:	4628      	mov	r0, r5
 8004afc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004b00:	f000 f92c 	bl	8004d5c <_Bfree>
 8004b04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b08:	9f08      	ldr	r7, [sp, #32]
 8004b0a:	ea43 0102 	orr.w	r1, r3, r2
 8004b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b10:	430b      	orrs	r3, r1
 8004b12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b14:	d10d      	bne.n	8004b32 <_dtoa_r+0xa82>
 8004b16:	2b39      	cmp	r3, #57	; 0x39
 8004b18:	d029      	beq.n	8004b6e <_dtoa_r+0xabe>
 8004b1a:	f1b9 0f00 	cmp.w	r9, #0
 8004b1e:	dd01      	ble.n	8004b24 <_dtoa_r+0xa74>
 8004b20:	9b06      	ldr	r3, [sp, #24]
 8004b22:	3331      	adds	r3, #49	; 0x31
 8004b24:	9a04      	ldr	r2, [sp, #16]
 8004b26:	7013      	strb	r3, [r2, #0]
 8004b28:	e776      	b.n	8004a18 <_dtoa_r+0x968>
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	e7b9      	b.n	8004aa2 <_dtoa_r+0x9f2>
 8004b2e:	2201      	movs	r2, #1
 8004b30:	e7e2      	b.n	8004af8 <_dtoa_r+0xa48>
 8004b32:	f1b9 0f00 	cmp.w	r9, #0
 8004b36:	db06      	blt.n	8004b46 <_dtoa_r+0xa96>
 8004b38:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004b3a:	ea41 0909 	orr.w	r9, r1, r9
 8004b3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b40:	ea59 0101 	orrs.w	r1, r9, r1
 8004b44:	d120      	bne.n	8004b88 <_dtoa_r+0xad8>
 8004b46:	2a00      	cmp	r2, #0
 8004b48:	ddec      	ble.n	8004b24 <_dtoa_r+0xa74>
 8004b4a:	4659      	mov	r1, fp
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	4628      	mov	r0, r5
 8004b50:	9308      	str	r3, [sp, #32]
 8004b52:	f000 fad1 	bl	80050f8 <__lshift>
 8004b56:	4621      	mov	r1, r4
 8004b58:	4683      	mov	fp, r0
 8004b5a:	f000 fb3d 	bl	80051d8 <__mcmp>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	9b08      	ldr	r3, [sp, #32]
 8004b62:	dc02      	bgt.n	8004b6a <_dtoa_r+0xaba>
 8004b64:	d1de      	bne.n	8004b24 <_dtoa_r+0xa74>
 8004b66:	07da      	lsls	r2, r3, #31
 8004b68:	d5dc      	bpl.n	8004b24 <_dtoa_r+0xa74>
 8004b6a:	2b39      	cmp	r3, #57	; 0x39
 8004b6c:	d1d8      	bne.n	8004b20 <_dtoa_r+0xa70>
 8004b6e:	2339      	movs	r3, #57	; 0x39
 8004b70:	9a04      	ldr	r2, [sp, #16]
 8004b72:	7013      	strb	r3, [r2, #0]
 8004b74:	463b      	mov	r3, r7
 8004b76:	461f      	mov	r7, r3
 8004b78:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	2a39      	cmp	r2, #57	; 0x39
 8004b80:	d050      	beq.n	8004c24 <_dtoa_r+0xb74>
 8004b82:	3201      	adds	r2, #1
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	e747      	b.n	8004a18 <_dtoa_r+0x968>
 8004b88:	2a00      	cmp	r2, #0
 8004b8a:	dd03      	ble.n	8004b94 <_dtoa_r+0xae4>
 8004b8c:	2b39      	cmp	r3, #57	; 0x39
 8004b8e:	d0ee      	beq.n	8004b6e <_dtoa_r+0xabe>
 8004b90:	3301      	adds	r3, #1
 8004b92:	e7c7      	b.n	8004b24 <_dtoa_r+0xa74>
 8004b94:	9a08      	ldr	r2, [sp, #32]
 8004b96:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004b98:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b9c:	428a      	cmp	r2, r1
 8004b9e:	d02a      	beq.n	8004bf6 <_dtoa_r+0xb46>
 8004ba0:	4659      	mov	r1, fp
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	220a      	movs	r2, #10
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f000 f8fa 	bl	8004da0 <__multadd>
 8004bac:	45b0      	cmp	r8, r6
 8004bae:	4683      	mov	fp, r0
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	f04f 020a 	mov.w	r2, #10
 8004bb8:	4641      	mov	r1, r8
 8004bba:	4628      	mov	r0, r5
 8004bbc:	d107      	bne.n	8004bce <_dtoa_r+0xb1e>
 8004bbe:	f000 f8ef 	bl	8004da0 <__multadd>
 8004bc2:	4680      	mov	r8, r0
 8004bc4:	4606      	mov	r6, r0
 8004bc6:	9b08      	ldr	r3, [sp, #32]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	9308      	str	r3, [sp, #32]
 8004bcc:	e775      	b.n	8004aba <_dtoa_r+0xa0a>
 8004bce:	f000 f8e7 	bl	8004da0 <__multadd>
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	4680      	mov	r8, r0
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	220a      	movs	r2, #10
 8004bda:	4628      	mov	r0, r5
 8004bdc:	f000 f8e0 	bl	8004da0 <__multadd>
 8004be0:	4606      	mov	r6, r0
 8004be2:	e7f0      	b.n	8004bc6 <_dtoa_r+0xb16>
 8004be4:	f1b9 0f00 	cmp.w	r9, #0
 8004be8:	bfcc      	ite	gt
 8004bea:	464f      	movgt	r7, r9
 8004bec:	2701      	movle	r7, #1
 8004bee:	f04f 0800 	mov.w	r8, #0
 8004bf2:	9a03      	ldr	r2, [sp, #12]
 8004bf4:	4417      	add	r7, r2
 8004bf6:	4659      	mov	r1, fp
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	4628      	mov	r0, r5
 8004bfc:	9308      	str	r3, [sp, #32]
 8004bfe:	f000 fa7b 	bl	80050f8 <__lshift>
 8004c02:	4621      	mov	r1, r4
 8004c04:	4683      	mov	fp, r0
 8004c06:	f000 fae7 	bl	80051d8 <__mcmp>
 8004c0a:	2800      	cmp	r0, #0
 8004c0c:	dcb2      	bgt.n	8004b74 <_dtoa_r+0xac4>
 8004c0e:	d102      	bne.n	8004c16 <_dtoa_r+0xb66>
 8004c10:	9b08      	ldr	r3, [sp, #32]
 8004c12:	07db      	lsls	r3, r3, #31
 8004c14:	d4ae      	bmi.n	8004b74 <_dtoa_r+0xac4>
 8004c16:	463b      	mov	r3, r7
 8004c18:	461f      	mov	r7, r3
 8004c1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004c1e:	2a30      	cmp	r2, #48	; 0x30
 8004c20:	d0fa      	beq.n	8004c18 <_dtoa_r+0xb68>
 8004c22:	e6f9      	b.n	8004a18 <_dtoa_r+0x968>
 8004c24:	9a03      	ldr	r2, [sp, #12]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d1a5      	bne.n	8004b76 <_dtoa_r+0xac6>
 8004c2a:	2331      	movs	r3, #49	; 0x31
 8004c2c:	f10a 0a01 	add.w	sl, sl, #1
 8004c30:	e779      	b.n	8004b26 <_dtoa_r+0xa76>
 8004c32:	4b14      	ldr	r3, [pc, #80]	; (8004c84 <_dtoa_r+0xbd4>)
 8004c34:	f7ff baa8 	b.w	8004188 <_dtoa_r+0xd8>
 8004c38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f47f aa81 	bne.w	8004142 <_dtoa_r+0x92>
 8004c40:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <_dtoa_r+0xbd8>)
 8004c42:	f7ff baa1 	b.w	8004188 <_dtoa_r+0xd8>
 8004c46:	f1b9 0f00 	cmp.w	r9, #0
 8004c4a:	dc03      	bgt.n	8004c54 <_dtoa_r+0xba4>
 8004c4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	f73f aecb 	bgt.w	80049ea <_dtoa_r+0x93a>
 8004c54:	9f03      	ldr	r7, [sp, #12]
 8004c56:	4621      	mov	r1, r4
 8004c58:	4658      	mov	r0, fp
 8004c5a:	f7ff f99b 	bl	8003f94 <quorem>
 8004c5e:	9a03      	ldr	r2, [sp, #12]
 8004c60:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004c64:	f807 3b01 	strb.w	r3, [r7], #1
 8004c68:	1aba      	subs	r2, r7, r2
 8004c6a:	4591      	cmp	r9, r2
 8004c6c:	ddba      	ble.n	8004be4 <_dtoa_r+0xb34>
 8004c6e:	4659      	mov	r1, fp
 8004c70:	2300      	movs	r3, #0
 8004c72:	220a      	movs	r2, #10
 8004c74:	4628      	mov	r0, r5
 8004c76:	f000 f893 	bl	8004da0 <__multadd>
 8004c7a:	4683      	mov	fp, r0
 8004c7c:	e7eb      	b.n	8004c56 <_dtoa_r+0xba6>
 8004c7e:	bf00      	nop
 8004c80:	08007347 	.word	0x08007347
 8004c84:	080072a4 	.word	0x080072a4
 8004c88:	080072c8 	.word	0x080072c8

08004c8c <_localeconv_r>:
 8004c8c:	4800      	ldr	r0, [pc, #0]	; (8004c90 <_localeconv_r+0x4>)
 8004c8e:	4770      	bx	lr
 8004c90:	20000160 	.word	0x20000160

08004c94 <malloc>:
 8004c94:	4b02      	ldr	r3, [pc, #8]	; (8004ca0 <malloc+0xc>)
 8004c96:	4601      	mov	r1, r0
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	f000 bc1d 	b.w	80054d8 <_malloc_r>
 8004c9e:	bf00      	nop
 8004ca0:	2000000c 	.word	0x2000000c

08004ca4 <memchr>:
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	b510      	push	{r4, lr}
 8004ca8:	b2c9      	uxtb	r1, r1
 8004caa:	4402      	add	r2, r0
 8004cac:	4293      	cmp	r3, r2
 8004cae:	4618      	mov	r0, r3
 8004cb0:	d101      	bne.n	8004cb6 <memchr+0x12>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	e003      	b.n	8004cbe <memchr+0x1a>
 8004cb6:	7804      	ldrb	r4, [r0, #0]
 8004cb8:	3301      	adds	r3, #1
 8004cba:	428c      	cmp	r4, r1
 8004cbc:	d1f6      	bne.n	8004cac <memchr+0x8>
 8004cbe:	bd10      	pop	{r4, pc}

08004cc0 <memcpy>:
 8004cc0:	440a      	add	r2, r1
 8004cc2:	4291      	cmp	r1, r2
 8004cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cc8:	d100      	bne.n	8004ccc <memcpy+0xc>
 8004cca:	4770      	bx	lr
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cd2:	4291      	cmp	r1, r2
 8004cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cd8:	d1f9      	bne.n	8004cce <memcpy+0xe>
 8004cda:	bd10      	pop	{r4, pc}

08004cdc <_Balloc>:
 8004cdc:	b570      	push	{r4, r5, r6, lr}
 8004cde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	460d      	mov	r5, r1
 8004ce4:	b976      	cbnz	r6, 8004d04 <_Balloc+0x28>
 8004ce6:	2010      	movs	r0, #16
 8004ce8:	f7ff ffd4 	bl	8004c94 <malloc>
 8004cec:	4602      	mov	r2, r0
 8004cee:	6260      	str	r0, [r4, #36]	; 0x24
 8004cf0:	b920      	cbnz	r0, 8004cfc <_Balloc+0x20>
 8004cf2:	2166      	movs	r1, #102	; 0x66
 8004cf4:	4b17      	ldr	r3, [pc, #92]	; (8004d54 <_Balloc+0x78>)
 8004cf6:	4818      	ldr	r0, [pc, #96]	; (8004d58 <_Balloc+0x7c>)
 8004cf8:	f000 fdce 	bl	8005898 <__assert_func>
 8004cfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d00:	6006      	str	r6, [r0, #0]
 8004d02:	60c6      	str	r6, [r0, #12]
 8004d04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d06:	68f3      	ldr	r3, [r6, #12]
 8004d08:	b183      	cbz	r3, 8004d2c <_Balloc+0x50>
 8004d0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d12:	b9b8      	cbnz	r0, 8004d44 <_Balloc+0x68>
 8004d14:	2101      	movs	r1, #1
 8004d16:	fa01 f605 	lsl.w	r6, r1, r5
 8004d1a:	1d72      	adds	r2, r6, #5
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	0092      	lsls	r2, r2, #2
 8004d20:	f000 fb5e 	bl	80053e0 <_calloc_r>
 8004d24:	b160      	cbz	r0, 8004d40 <_Balloc+0x64>
 8004d26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d2a:	e00e      	b.n	8004d4a <_Balloc+0x6e>
 8004d2c:	2221      	movs	r2, #33	; 0x21
 8004d2e:	2104      	movs	r1, #4
 8004d30:	4620      	mov	r0, r4
 8004d32:	f000 fb55 	bl	80053e0 <_calloc_r>
 8004d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d38:	60f0      	str	r0, [r6, #12]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e4      	bne.n	8004d0a <_Balloc+0x2e>
 8004d40:	2000      	movs	r0, #0
 8004d42:	bd70      	pop	{r4, r5, r6, pc}
 8004d44:	6802      	ldr	r2, [r0, #0]
 8004d46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004d50:	e7f7      	b.n	8004d42 <_Balloc+0x66>
 8004d52:	bf00      	nop
 8004d54:	080072d5 	.word	0x080072d5
 8004d58:	08007358 	.word	0x08007358

08004d5c <_Bfree>:
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d60:	4605      	mov	r5, r0
 8004d62:	460c      	mov	r4, r1
 8004d64:	b976      	cbnz	r6, 8004d84 <_Bfree+0x28>
 8004d66:	2010      	movs	r0, #16
 8004d68:	f7ff ff94 	bl	8004c94 <malloc>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	6268      	str	r0, [r5, #36]	; 0x24
 8004d70:	b920      	cbnz	r0, 8004d7c <_Bfree+0x20>
 8004d72:	218a      	movs	r1, #138	; 0x8a
 8004d74:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <_Bfree+0x3c>)
 8004d76:	4809      	ldr	r0, [pc, #36]	; (8004d9c <_Bfree+0x40>)
 8004d78:	f000 fd8e 	bl	8005898 <__assert_func>
 8004d7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d80:	6006      	str	r6, [r0, #0]
 8004d82:	60c6      	str	r6, [r0, #12]
 8004d84:	b13c      	cbz	r4, 8004d96 <_Bfree+0x3a>
 8004d86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004d88:	6862      	ldr	r2, [r4, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d90:	6021      	str	r1, [r4, #0]
 8004d92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004d96:	bd70      	pop	{r4, r5, r6, pc}
 8004d98:	080072d5 	.word	0x080072d5
 8004d9c:	08007358 	.word	0x08007358

08004da0 <__multadd>:
 8004da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da4:	4607      	mov	r7, r0
 8004da6:	460c      	mov	r4, r1
 8004da8:	461e      	mov	r6, r3
 8004daa:	2000      	movs	r0, #0
 8004dac:	690d      	ldr	r5, [r1, #16]
 8004dae:	f101 0c14 	add.w	ip, r1, #20
 8004db2:	f8dc 3000 	ldr.w	r3, [ip]
 8004db6:	3001      	adds	r0, #1
 8004db8:	b299      	uxth	r1, r3
 8004dba:	fb02 6101 	mla	r1, r2, r1, r6
 8004dbe:	0c1e      	lsrs	r6, r3, #16
 8004dc0:	0c0b      	lsrs	r3, r1, #16
 8004dc2:	fb02 3306 	mla	r3, r2, r6, r3
 8004dc6:	b289      	uxth	r1, r1
 8004dc8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004dcc:	4285      	cmp	r5, r0
 8004dce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004dd2:	f84c 1b04 	str.w	r1, [ip], #4
 8004dd6:	dcec      	bgt.n	8004db2 <__multadd+0x12>
 8004dd8:	b30e      	cbz	r6, 8004e1e <__multadd+0x7e>
 8004dda:	68a3      	ldr	r3, [r4, #8]
 8004ddc:	42ab      	cmp	r3, r5
 8004dde:	dc19      	bgt.n	8004e14 <__multadd+0x74>
 8004de0:	6861      	ldr	r1, [r4, #4]
 8004de2:	4638      	mov	r0, r7
 8004de4:	3101      	adds	r1, #1
 8004de6:	f7ff ff79 	bl	8004cdc <_Balloc>
 8004dea:	4680      	mov	r8, r0
 8004dec:	b928      	cbnz	r0, 8004dfa <__multadd+0x5a>
 8004dee:	4602      	mov	r2, r0
 8004df0:	21b5      	movs	r1, #181	; 0xb5
 8004df2:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <__multadd+0x84>)
 8004df4:	480c      	ldr	r0, [pc, #48]	; (8004e28 <__multadd+0x88>)
 8004df6:	f000 fd4f 	bl	8005898 <__assert_func>
 8004dfa:	6922      	ldr	r2, [r4, #16]
 8004dfc:	f104 010c 	add.w	r1, r4, #12
 8004e00:	3202      	adds	r2, #2
 8004e02:	0092      	lsls	r2, r2, #2
 8004e04:	300c      	adds	r0, #12
 8004e06:	f7ff ff5b 	bl	8004cc0 <memcpy>
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	4638      	mov	r0, r7
 8004e0e:	f7ff ffa5 	bl	8004d5c <_Bfree>
 8004e12:	4644      	mov	r4, r8
 8004e14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004e18:	3501      	adds	r5, #1
 8004e1a:	615e      	str	r6, [r3, #20]
 8004e1c:	6125      	str	r5, [r4, #16]
 8004e1e:	4620      	mov	r0, r4
 8004e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e24:	08007347 	.word	0x08007347
 8004e28:	08007358 	.word	0x08007358

08004e2c <__hi0bits>:
 8004e2c:	0c02      	lsrs	r2, r0, #16
 8004e2e:	0412      	lsls	r2, r2, #16
 8004e30:	4603      	mov	r3, r0
 8004e32:	b9ca      	cbnz	r2, 8004e68 <__hi0bits+0x3c>
 8004e34:	0403      	lsls	r3, r0, #16
 8004e36:	2010      	movs	r0, #16
 8004e38:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004e3c:	bf04      	itt	eq
 8004e3e:	021b      	lsleq	r3, r3, #8
 8004e40:	3008      	addeq	r0, #8
 8004e42:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004e46:	bf04      	itt	eq
 8004e48:	011b      	lsleq	r3, r3, #4
 8004e4a:	3004      	addeq	r0, #4
 8004e4c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004e50:	bf04      	itt	eq
 8004e52:	009b      	lsleq	r3, r3, #2
 8004e54:	3002      	addeq	r0, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	db05      	blt.n	8004e66 <__hi0bits+0x3a>
 8004e5a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004e5e:	f100 0001 	add.w	r0, r0, #1
 8004e62:	bf08      	it	eq
 8004e64:	2020      	moveq	r0, #32
 8004e66:	4770      	bx	lr
 8004e68:	2000      	movs	r0, #0
 8004e6a:	e7e5      	b.n	8004e38 <__hi0bits+0xc>

08004e6c <__lo0bits>:
 8004e6c:	6803      	ldr	r3, [r0, #0]
 8004e6e:	4602      	mov	r2, r0
 8004e70:	f013 0007 	ands.w	r0, r3, #7
 8004e74:	d00b      	beq.n	8004e8e <__lo0bits+0x22>
 8004e76:	07d9      	lsls	r1, r3, #31
 8004e78:	d421      	bmi.n	8004ebe <__lo0bits+0x52>
 8004e7a:	0798      	lsls	r0, r3, #30
 8004e7c:	bf49      	itett	mi
 8004e7e:	085b      	lsrmi	r3, r3, #1
 8004e80:	089b      	lsrpl	r3, r3, #2
 8004e82:	2001      	movmi	r0, #1
 8004e84:	6013      	strmi	r3, [r2, #0]
 8004e86:	bf5c      	itt	pl
 8004e88:	2002      	movpl	r0, #2
 8004e8a:	6013      	strpl	r3, [r2, #0]
 8004e8c:	4770      	bx	lr
 8004e8e:	b299      	uxth	r1, r3
 8004e90:	b909      	cbnz	r1, 8004e96 <__lo0bits+0x2a>
 8004e92:	2010      	movs	r0, #16
 8004e94:	0c1b      	lsrs	r3, r3, #16
 8004e96:	b2d9      	uxtb	r1, r3
 8004e98:	b909      	cbnz	r1, 8004e9e <__lo0bits+0x32>
 8004e9a:	3008      	adds	r0, #8
 8004e9c:	0a1b      	lsrs	r3, r3, #8
 8004e9e:	0719      	lsls	r1, r3, #28
 8004ea0:	bf04      	itt	eq
 8004ea2:	091b      	lsreq	r3, r3, #4
 8004ea4:	3004      	addeq	r0, #4
 8004ea6:	0799      	lsls	r1, r3, #30
 8004ea8:	bf04      	itt	eq
 8004eaa:	089b      	lsreq	r3, r3, #2
 8004eac:	3002      	addeq	r0, #2
 8004eae:	07d9      	lsls	r1, r3, #31
 8004eb0:	d403      	bmi.n	8004eba <__lo0bits+0x4e>
 8004eb2:	085b      	lsrs	r3, r3, #1
 8004eb4:	f100 0001 	add.w	r0, r0, #1
 8004eb8:	d003      	beq.n	8004ec2 <__lo0bits+0x56>
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	4770      	bx	lr
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	4770      	bx	lr
 8004ec2:	2020      	movs	r0, #32
 8004ec4:	4770      	bx	lr
	...

08004ec8 <__i2b>:
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	460c      	mov	r4, r1
 8004ecc:	2101      	movs	r1, #1
 8004ece:	f7ff ff05 	bl	8004cdc <_Balloc>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	b928      	cbnz	r0, 8004ee2 <__i2b+0x1a>
 8004ed6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004eda:	4b04      	ldr	r3, [pc, #16]	; (8004eec <__i2b+0x24>)
 8004edc:	4804      	ldr	r0, [pc, #16]	; (8004ef0 <__i2b+0x28>)
 8004ede:	f000 fcdb 	bl	8005898 <__assert_func>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	6144      	str	r4, [r0, #20]
 8004ee6:	6103      	str	r3, [r0, #16]
 8004ee8:	bd10      	pop	{r4, pc}
 8004eea:	bf00      	nop
 8004eec:	08007347 	.word	0x08007347
 8004ef0:	08007358 	.word	0x08007358

08004ef4 <__multiply>:
 8004ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef8:	4691      	mov	r9, r2
 8004efa:	690a      	ldr	r2, [r1, #16]
 8004efc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004f00:	460c      	mov	r4, r1
 8004f02:	429a      	cmp	r2, r3
 8004f04:	bfbe      	ittt	lt
 8004f06:	460b      	movlt	r3, r1
 8004f08:	464c      	movlt	r4, r9
 8004f0a:	4699      	movlt	r9, r3
 8004f0c:	6927      	ldr	r7, [r4, #16]
 8004f0e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004f12:	68a3      	ldr	r3, [r4, #8]
 8004f14:	6861      	ldr	r1, [r4, #4]
 8004f16:	eb07 060a 	add.w	r6, r7, sl
 8004f1a:	42b3      	cmp	r3, r6
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	bfb8      	it	lt
 8004f20:	3101      	addlt	r1, #1
 8004f22:	f7ff fedb 	bl	8004cdc <_Balloc>
 8004f26:	b930      	cbnz	r0, 8004f36 <__multiply+0x42>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	f240 115d 	movw	r1, #349	; 0x15d
 8004f2e:	4b43      	ldr	r3, [pc, #268]	; (800503c <__multiply+0x148>)
 8004f30:	4843      	ldr	r0, [pc, #268]	; (8005040 <__multiply+0x14c>)
 8004f32:	f000 fcb1 	bl	8005898 <__assert_func>
 8004f36:	f100 0514 	add.w	r5, r0, #20
 8004f3a:	462b      	mov	r3, r5
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004f42:	4543      	cmp	r3, r8
 8004f44:	d321      	bcc.n	8004f8a <__multiply+0x96>
 8004f46:	f104 0314 	add.w	r3, r4, #20
 8004f4a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004f4e:	f109 0314 	add.w	r3, r9, #20
 8004f52:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004f56:	9202      	str	r2, [sp, #8]
 8004f58:	1b3a      	subs	r2, r7, r4
 8004f5a:	3a15      	subs	r2, #21
 8004f5c:	f022 0203 	bic.w	r2, r2, #3
 8004f60:	3204      	adds	r2, #4
 8004f62:	f104 0115 	add.w	r1, r4, #21
 8004f66:	428f      	cmp	r7, r1
 8004f68:	bf38      	it	cc
 8004f6a:	2204      	movcc	r2, #4
 8004f6c:	9201      	str	r2, [sp, #4]
 8004f6e:	9a02      	ldr	r2, [sp, #8]
 8004f70:	9303      	str	r3, [sp, #12]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d80c      	bhi.n	8004f90 <__multiply+0x9c>
 8004f76:	2e00      	cmp	r6, #0
 8004f78:	dd03      	ble.n	8004f82 <__multiply+0x8e>
 8004f7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d059      	beq.n	8005036 <__multiply+0x142>
 8004f82:	6106      	str	r6, [r0, #16]
 8004f84:	b005      	add	sp, #20
 8004f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8a:	f843 2b04 	str.w	r2, [r3], #4
 8004f8e:	e7d8      	b.n	8004f42 <__multiply+0x4e>
 8004f90:	f8b3 a000 	ldrh.w	sl, [r3]
 8004f94:	f1ba 0f00 	cmp.w	sl, #0
 8004f98:	d023      	beq.n	8004fe2 <__multiply+0xee>
 8004f9a:	46a9      	mov	r9, r5
 8004f9c:	f04f 0c00 	mov.w	ip, #0
 8004fa0:	f104 0e14 	add.w	lr, r4, #20
 8004fa4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004fa8:	f8d9 1000 	ldr.w	r1, [r9]
 8004fac:	fa1f fb82 	uxth.w	fp, r2
 8004fb0:	b289      	uxth	r1, r1
 8004fb2:	fb0a 110b 	mla	r1, sl, fp, r1
 8004fb6:	4461      	add	r1, ip
 8004fb8:	f8d9 c000 	ldr.w	ip, [r9]
 8004fbc:	0c12      	lsrs	r2, r2, #16
 8004fbe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004fc2:	fb0a c202 	mla	r2, sl, r2, ip
 8004fc6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004fca:	b289      	uxth	r1, r1
 8004fcc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004fd0:	4577      	cmp	r7, lr
 8004fd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004fd6:	f849 1b04 	str.w	r1, [r9], #4
 8004fda:	d8e3      	bhi.n	8004fa4 <__multiply+0xb0>
 8004fdc:	9a01      	ldr	r2, [sp, #4]
 8004fde:	f845 c002 	str.w	ip, [r5, r2]
 8004fe2:	9a03      	ldr	r2, [sp, #12]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004fea:	f1b9 0f00 	cmp.w	r9, #0
 8004fee:	d020      	beq.n	8005032 <__multiply+0x13e>
 8004ff0:	46ae      	mov	lr, r5
 8004ff2:	f04f 0a00 	mov.w	sl, #0
 8004ff6:	6829      	ldr	r1, [r5, #0]
 8004ff8:	f104 0c14 	add.w	ip, r4, #20
 8004ffc:	f8bc b000 	ldrh.w	fp, [ip]
 8005000:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005004:	b289      	uxth	r1, r1
 8005006:	fb09 220b 	mla	r2, r9, fp, r2
 800500a:	4492      	add	sl, r2
 800500c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005010:	f84e 1b04 	str.w	r1, [lr], #4
 8005014:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005018:	f8be 1000 	ldrh.w	r1, [lr]
 800501c:	0c12      	lsrs	r2, r2, #16
 800501e:	fb09 1102 	mla	r1, r9, r2, r1
 8005022:	4567      	cmp	r7, ip
 8005024:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005028:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800502c:	d8e6      	bhi.n	8004ffc <__multiply+0x108>
 800502e:	9a01      	ldr	r2, [sp, #4]
 8005030:	50a9      	str	r1, [r5, r2]
 8005032:	3504      	adds	r5, #4
 8005034:	e79b      	b.n	8004f6e <__multiply+0x7a>
 8005036:	3e01      	subs	r6, #1
 8005038:	e79d      	b.n	8004f76 <__multiply+0x82>
 800503a:	bf00      	nop
 800503c:	08007347 	.word	0x08007347
 8005040:	08007358 	.word	0x08007358

08005044 <__pow5mult>:
 8005044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005048:	4615      	mov	r5, r2
 800504a:	f012 0203 	ands.w	r2, r2, #3
 800504e:	4606      	mov	r6, r0
 8005050:	460f      	mov	r7, r1
 8005052:	d007      	beq.n	8005064 <__pow5mult+0x20>
 8005054:	4c25      	ldr	r4, [pc, #148]	; (80050ec <__pow5mult+0xa8>)
 8005056:	3a01      	subs	r2, #1
 8005058:	2300      	movs	r3, #0
 800505a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800505e:	f7ff fe9f 	bl	8004da0 <__multadd>
 8005062:	4607      	mov	r7, r0
 8005064:	10ad      	asrs	r5, r5, #2
 8005066:	d03d      	beq.n	80050e4 <__pow5mult+0xa0>
 8005068:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800506a:	b97c      	cbnz	r4, 800508c <__pow5mult+0x48>
 800506c:	2010      	movs	r0, #16
 800506e:	f7ff fe11 	bl	8004c94 <malloc>
 8005072:	4602      	mov	r2, r0
 8005074:	6270      	str	r0, [r6, #36]	; 0x24
 8005076:	b928      	cbnz	r0, 8005084 <__pow5mult+0x40>
 8005078:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800507c:	4b1c      	ldr	r3, [pc, #112]	; (80050f0 <__pow5mult+0xac>)
 800507e:	481d      	ldr	r0, [pc, #116]	; (80050f4 <__pow5mult+0xb0>)
 8005080:	f000 fc0a 	bl	8005898 <__assert_func>
 8005084:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005088:	6004      	str	r4, [r0, #0]
 800508a:	60c4      	str	r4, [r0, #12]
 800508c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005090:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005094:	b94c      	cbnz	r4, 80050aa <__pow5mult+0x66>
 8005096:	f240 2171 	movw	r1, #625	; 0x271
 800509a:	4630      	mov	r0, r6
 800509c:	f7ff ff14 	bl	8004ec8 <__i2b>
 80050a0:	2300      	movs	r3, #0
 80050a2:	4604      	mov	r4, r0
 80050a4:	f8c8 0008 	str.w	r0, [r8, #8]
 80050a8:	6003      	str	r3, [r0, #0]
 80050aa:	f04f 0900 	mov.w	r9, #0
 80050ae:	07eb      	lsls	r3, r5, #31
 80050b0:	d50a      	bpl.n	80050c8 <__pow5mult+0x84>
 80050b2:	4639      	mov	r1, r7
 80050b4:	4622      	mov	r2, r4
 80050b6:	4630      	mov	r0, r6
 80050b8:	f7ff ff1c 	bl	8004ef4 <__multiply>
 80050bc:	4680      	mov	r8, r0
 80050be:	4639      	mov	r1, r7
 80050c0:	4630      	mov	r0, r6
 80050c2:	f7ff fe4b 	bl	8004d5c <_Bfree>
 80050c6:	4647      	mov	r7, r8
 80050c8:	106d      	asrs	r5, r5, #1
 80050ca:	d00b      	beq.n	80050e4 <__pow5mult+0xa0>
 80050cc:	6820      	ldr	r0, [r4, #0]
 80050ce:	b938      	cbnz	r0, 80050e0 <__pow5mult+0x9c>
 80050d0:	4622      	mov	r2, r4
 80050d2:	4621      	mov	r1, r4
 80050d4:	4630      	mov	r0, r6
 80050d6:	f7ff ff0d 	bl	8004ef4 <__multiply>
 80050da:	6020      	str	r0, [r4, #0]
 80050dc:	f8c0 9000 	str.w	r9, [r0]
 80050e0:	4604      	mov	r4, r0
 80050e2:	e7e4      	b.n	80050ae <__pow5mult+0x6a>
 80050e4:	4638      	mov	r0, r7
 80050e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ea:	bf00      	nop
 80050ec:	080074a8 	.word	0x080074a8
 80050f0:	080072d5 	.word	0x080072d5
 80050f4:	08007358 	.word	0x08007358

080050f8 <__lshift>:
 80050f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050fc:	460c      	mov	r4, r1
 80050fe:	4607      	mov	r7, r0
 8005100:	4691      	mov	r9, r2
 8005102:	6923      	ldr	r3, [r4, #16]
 8005104:	6849      	ldr	r1, [r1, #4]
 8005106:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800510a:	68a3      	ldr	r3, [r4, #8]
 800510c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005110:	f108 0601 	add.w	r6, r8, #1
 8005114:	42b3      	cmp	r3, r6
 8005116:	db0b      	blt.n	8005130 <__lshift+0x38>
 8005118:	4638      	mov	r0, r7
 800511a:	f7ff fddf 	bl	8004cdc <_Balloc>
 800511e:	4605      	mov	r5, r0
 8005120:	b948      	cbnz	r0, 8005136 <__lshift+0x3e>
 8005122:	4602      	mov	r2, r0
 8005124:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005128:	4b29      	ldr	r3, [pc, #164]	; (80051d0 <__lshift+0xd8>)
 800512a:	482a      	ldr	r0, [pc, #168]	; (80051d4 <__lshift+0xdc>)
 800512c:	f000 fbb4 	bl	8005898 <__assert_func>
 8005130:	3101      	adds	r1, #1
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	e7ee      	b.n	8005114 <__lshift+0x1c>
 8005136:	2300      	movs	r3, #0
 8005138:	f100 0114 	add.w	r1, r0, #20
 800513c:	f100 0210 	add.w	r2, r0, #16
 8005140:	4618      	mov	r0, r3
 8005142:	4553      	cmp	r3, sl
 8005144:	db37      	blt.n	80051b6 <__lshift+0xbe>
 8005146:	6920      	ldr	r0, [r4, #16]
 8005148:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800514c:	f104 0314 	add.w	r3, r4, #20
 8005150:	f019 091f 	ands.w	r9, r9, #31
 8005154:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005158:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800515c:	d02f      	beq.n	80051be <__lshift+0xc6>
 800515e:	468a      	mov	sl, r1
 8005160:	f04f 0c00 	mov.w	ip, #0
 8005164:	f1c9 0e20 	rsb	lr, r9, #32
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	fa02 f209 	lsl.w	r2, r2, r9
 800516e:	ea42 020c 	orr.w	r2, r2, ip
 8005172:	f84a 2b04 	str.w	r2, [sl], #4
 8005176:	f853 2b04 	ldr.w	r2, [r3], #4
 800517a:	4298      	cmp	r0, r3
 800517c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005180:	d8f2      	bhi.n	8005168 <__lshift+0x70>
 8005182:	1b03      	subs	r3, r0, r4
 8005184:	3b15      	subs	r3, #21
 8005186:	f023 0303 	bic.w	r3, r3, #3
 800518a:	3304      	adds	r3, #4
 800518c:	f104 0215 	add.w	r2, r4, #21
 8005190:	4290      	cmp	r0, r2
 8005192:	bf38      	it	cc
 8005194:	2304      	movcc	r3, #4
 8005196:	f841 c003 	str.w	ip, [r1, r3]
 800519a:	f1bc 0f00 	cmp.w	ip, #0
 800519e:	d001      	beq.n	80051a4 <__lshift+0xac>
 80051a0:	f108 0602 	add.w	r6, r8, #2
 80051a4:	3e01      	subs	r6, #1
 80051a6:	4638      	mov	r0, r7
 80051a8:	4621      	mov	r1, r4
 80051aa:	612e      	str	r6, [r5, #16]
 80051ac:	f7ff fdd6 	bl	8004d5c <_Bfree>
 80051b0:	4628      	mov	r0, r5
 80051b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80051ba:	3301      	adds	r3, #1
 80051bc:	e7c1      	b.n	8005142 <__lshift+0x4a>
 80051be:	3904      	subs	r1, #4
 80051c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80051c4:	4298      	cmp	r0, r3
 80051c6:	f841 2f04 	str.w	r2, [r1, #4]!
 80051ca:	d8f9      	bhi.n	80051c0 <__lshift+0xc8>
 80051cc:	e7ea      	b.n	80051a4 <__lshift+0xac>
 80051ce:	bf00      	nop
 80051d0:	08007347 	.word	0x08007347
 80051d4:	08007358 	.word	0x08007358

080051d8 <__mcmp>:
 80051d8:	4603      	mov	r3, r0
 80051da:	690a      	ldr	r2, [r1, #16]
 80051dc:	6900      	ldr	r0, [r0, #16]
 80051de:	b530      	push	{r4, r5, lr}
 80051e0:	1a80      	subs	r0, r0, r2
 80051e2:	d10d      	bne.n	8005200 <__mcmp+0x28>
 80051e4:	3314      	adds	r3, #20
 80051e6:	3114      	adds	r1, #20
 80051e8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80051ec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80051f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80051f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80051f8:	4295      	cmp	r5, r2
 80051fa:	d002      	beq.n	8005202 <__mcmp+0x2a>
 80051fc:	d304      	bcc.n	8005208 <__mcmp+0x30>
 80051fe:	2001      	movs	r0, #1
 8005200:	bd30      	pop	{r4, r5, pc}
 8005202:	42a3      	cmp	r3, r4
 8005204:	d3f4      	bcc.n	80051f0 <__mcmp+0x18>
 8005206:	e7fb      	b.n	8005200 <__mcmp+0x28>
 8005208:	f04f 30ff 	mov.w	r0, #4294967295
 800520c:	e7f8      	b.n	8005200 <__mcmp+0x28>
	...

08005210 <__mdiff>:
 8005210:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005214:	460d      	mov	r5, r1
 8005216:	4607      	mov	r7, r0
 8005218:	4611      	mov	r1, r2
 800521a:	4628      	mov	r0, r5
 800521c:	4614      	mov	r4, r2
 800521e:	f7ff ffdb 	bl	80051d8 <__mcmp>
 8005222:	1e06      	subs	r6, r0, #0
 8005224:	d111      	bne.n	800524a <__mdiff+0x3a>
 8005226:	4631      	mov	r1, r6
 8005228:	4638      	mov	r0, r7
 800522a:	f7ff fd57 	bl	8004cdc <_Balloc>
 800522e:	4602      	mov	r2, r0
 8005230:	b928      	cbnz	r0, 800523e <__mdiff+0x2e>
 8005232:	f240 2132 	movw	r1, #562	; 0x232
 8005236:	4b3a      	ldr	r3, [pc, #232]	; (8005320 <__mdiff+0x110>)
 8005238:	483a      	ldr	r0, [pc, #232]	; (8005324 <__mdiff+0x114>)
 800523a:	f000 fb2d 	bl	8005898 <__assert_func>
 800523e:	2301      	movs	r3, #1
 8005240:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005244:	4610      	mov	r0, r2
 8005246:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800524a:	bfa4      	itt	ge
 800524c:	4623      	movge	r3, r4
 800524e:	462c      	movge	r4, r5
 8005250:	4638      	mov	r0, r7
 8005252:	6861      	ldr	r1, [r4, #4]
 8005254:	bfa6      	itte	ge
 8005256:	461d      	movge	r5, r3
 8005258:	2600      	movge	r6, #0
 800525a:	2601      	movlt	r6, #1
 800525c:	f7ff fd3e 	bl	8004cdc <_Balloc>
 8005260:	4602      	mov	r2, r0
 8005262:	b918      	cbnz	r0, 800526c <__mdiff+0x5c>
 8005264:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005268:	4b2d      	ldr	r3, [pc, #180]	; (8005320 <__mdiff+0x110>)
 800526a:	e7e5      	b.n	8005238 <__mdiff+0x28>
 800526c:	f102 0814 	add.w	r8, r2, #20
 8005270:	46c2      	mov	sl, r8
 8005272:	f04f 0c00 	mov.w	ip, #0
 8005276:	6927      	ldr	r7, [r4, #16]
 8005278:	60c6      	str	r6, [r0, #12]
 800527a:	692e      	ldr	r6, [r5, #16]
 800527c:	f104 0014 	add.w	r0, r4, #20
 8005280:	f105 0914 	add.w	r9, r5, #20
 8005284:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005288:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800528c:	3410      	adds	r4, #16
 800528e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005292:	f859 3b04 	ldr.w	r3, [r9], #4
 8005296:	fa1f f18b 	uxth.w	r1, fp
 800529a:	448c      	add	ip, r1
 800529c:	b299      	uxth	r1, r3
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	ebac 0101 	sub.w	r1, ip, r1
 80052a4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80052a8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80052ac:	b289      	uxth	r1, r1
 80052ae:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80052b2:	454e      	cmp	r6, r9
 80052b4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80052b8:	f84a 3b04 	str.w	r3, [sl], #4
 80052bc:	d8e7      	bhi.n	800528e <__mdiff+0x7e>
 80052be:	1b73      	subs	r3, r6, r5
 80052c0:	3b15      	subs	r3, #21
 80052c2:	f023 0303 	bic.w	r3, r3, #3
 80052c6:	3515      	adds	r5, #21
 80052c8:	3304      	adds	r3, #4
 80052ca:	42ae      	cmp	r6, r5
 80052cc:	bf38      	it	cc
 80052ce:	2304      	movcc	r3, #4
 80052d0:	4418      	add	r0, r3
 80052d2:	4443      	add	r3, r8
 80052d4:	461e      	mov	r6, r3
 80052d6:	4605      	mov	r5, r0
 80052d8:	4575      	cmp	r5, lr
 80052da:	d30e      	bcc.n	80052fa <__mdiff+0xea>
 80052dc:	f10e 0103 	add.w	r1, lr, #3
 80052e0:	1a09      	subs	r1, r1, r0
 80052e2:	f021 0103 	bic.w	r1, r1, #3
 80052e6:	3803      	subs	r0, #3
 80052e8:	4586      	cmp	lr, r0
 80052ea:	bf38      	it	cc
 80052ec:	2100      	movcc	r1, #0
 80052ee:	4419      	add	r1, r3
 80052f0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80052f4:	b18b      	cbz	r3, 800531a <__mdiff+0x10a>
 80052f6:	6117      	str	r7, [r2, #16]
 80052f8:	e7a4      	b.n	8005244 <__mdiff+0x34>
 80052fa:	f855 8b04 	ldr.w	r8, [r5], #4
 80052fe:	fa1f f188 	uxth.w	r1, r8
 8005302:	4461      	add	r1, ip
 8005304:	140c      	asrs	r4, r1, #16
 8005306:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800530a:	b289      	uxth	r1, r1
 800530c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005310:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005314:	f846 1b04 	str.w	r1, [r6], #4
 8005318:	e7de      	b.n	80052d8 <__mdiff+0xc8>
 800531a:	3f01      	subs	r7, #1
 800531c:	e7e8      	b.n	80052f0 <__mdiff+0xe0>
 800531e:	bf00      	nop
 8005320:	08007347 	.word	0x08007347
 8005324:	08007358 	.word	0x08007358

08005328 <__d2b>:
 8005328:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800532c:	2101      	movs	r1, #1
 800532e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005332:	4690      	mov	r8, r2
 8005334:	461d      	mov	r5, r3
 8005336:	f7ff fcd1 	bl	8004cdc <_Balloc>
 800533a:	4604      	mov	r4, r0
 800533c:	b930      	cbnz	r0, 800534c <__d2b+0x24>
 800533e:	4602      	mov	r2, r0
 8005340:	f240 310a 	movw	r1, #778	; 0x30a
 8005344:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <__d2b+0xb0>)
 8005346:	4825      	ldr	r0, [pc, #148]	; (80053dc <__d2b+0xb4>)
 8005348:	f000 faa6 	bl	8005898 <__assert_func>
 800534c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005350:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005354:	bb2d      	cbnz	r5, 80053a2 <__d2b+0x7a>
 8005356:	9301      	str	r3, [sp, #4]
 8005358:	f1b8 0300 	subs.w	r3, r8, #0
 800535c:	d026      	beq.n	80053ac <__d2b+0x84>
 800535e:	4668      	mov	r0, sp
 8005360:	9300      	str	r3, [sp, #0]
 8005362:	f7ff fd83 	bl	8004e6c <__lo0bits>
 8005366:	9900      	ldr	r1, [sp, #0]
 8005368:	b1f0      	cbz	r0, 80053a8 <__d2b+0x80>
 800536a:	9a01      	ldr	r2, [sp, #4]
 800536c:	f1c0 0320 	rsb	r3, r0, #32
 8005370:	fa02 f303 	lsl.w	r3, r2, r3
 8005374:	430b      	orrs	r3, r1
 8005376:	40c2      	lsrs	r2, r0
 8005378:	6163      	str	r3, [r4, #20]
 800537a:	9201      	str	r2, [sp, #4]
 800537c:	9b01      	ldr	r3, [sp, #4]
 800537e:	2b00      	cmp	r3, #0
 8005380:	bf14      	ite	ne
 8005382:	2102      	movne	r1, #2
 8005384:	2101      	moveq	r1, #1
 8005386:	61a3      	str	r3, [r4, #24]
 8005388:	6121      	str	r1, [r4, #16]
 800538a:	b1c5      	cbz	r5, 80053be <__d2b+0x96>
 800538c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005390:	4405      	add	r5, r0
 8005392:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005396:	603d      	str	r5, [r7, #0]
 8005398:	6030      	str	r0, [r6, #0]
 800539a:	4620      	mov	r0, r4
 800539c:	b002      	add	sp, #8
 800539e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053a6:	e7d6      	b.n	8005356 <__d2b+0x2e>
 80053a8:	6161      	str	r1, [r4, #20]
 80053aa:	e7e7      	b.n	800537c <__d2b+0x54>
 80053ac:	a801      	add	r0, sp, #4
 80053ae:	f7ff fd5d 	bl	8004e6c <__lo0bits>
 80053b2:	2101      	movs	r1, #1
 80053b4:	9b01      	ldr	r3, [sp, #4]
 80053b6:	6121      	str	r1, [r4, #16]
 80053b8:	6163      	str	r3, [r4, #20]
 80053ba:	3020      	adds	r0, #32
 80053bc:	e7e5      	b.n	800538a <__d2b+0x62>
 80053be:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80053c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80053c6:	6038      	str	r0, [r7, #0]
 80053c8:	6918      	ldr	r0, [r3, #16]
 80053ca:	f7ff fd2f 	bl	8004e2c <__hi0bits>
 80053ce:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80053d2:	6031      	str	r1, [r6, #0]
 80053d4:	e7e1      	b.n	800539a <__d2b+0x72>
 80053d6:	bf00      	nop
 80053d8:	08007347 	.word	0x08007347
 80053dc:	08007358 	.word	0x08007358

080053e0 <_calloc_r>:
 80053e0:	b570      	push	{r4, r5, r6, lr}
 80053e2:	fba1 5402 	umull	r5, r4, r1, r2
 80053e6:	b934      	cbnz	r4, 80053f6 <_calloc_r+0x16>
 80053e8:	4629      	mov	r1, r5
 80053ea:	f000 f875 	bl	80054d8 <_malloc_r>
 80053ee:	4606      	mov	r6, r0
 80053f0:	b928      	cbnz	r0, 80053fe <_calloc_r+0x1e>
 80053f2:	4630      	mov	r0, r6
 80053f4:	bd70      	pop	{r4, r5, r6, pc}
 80053f6:	220c      	movs	r2, #12
 80053f8:	2600      	movs	r6, #0
 80053fa:	6002      	str	r2, [r0, #0]
 80053fc:	e7f9      	b.n	80053f2 <_calloc_r+0x12>
 80053fe:	462a      	mov	r2, r5
 8005400:	4621      	mov	r1, r4
 8005402:	f7fe f92b 	bl	800365c <memset>
 8005406:	e7f4      	b.n	80053f2 <_calloc_r+0x12>

08005408 <_free_r>:
 8005408:	b538      	push	{r3, r4, r5, lr}
 800540a:	4605      	mov	r5, r0
 800540c:	2900      	cmp	r1, #0
 800540e:	d040      	beq.n	8005492 <_free_r+0x8a>
 8005410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005414:	1f0c      	subs	r4, r1, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	bfb8      	it	lt
 800541a:	18e4      	addlt	r4, r4, r3
 800541c:	f000 fa98 	bl	8005950 <__malloc_lock>
 8005420:	4a1c      	ldr	r2, [pc, #112]	; (8005494 <_free_r+0x8c>)
 8005422:	6813      	ldr	r3, [r2, #0]
 8005424:	b933      	cbnz	r3, 8005434 <_free_r+0x2c>
 8005426:	6063      	str	r3, [r4, #4]
 8005428:	6014      	str	r4, [r2, #0]
 800542a:	4628      	mov	r0, r5
 800542c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005430:	f000 ba94 	b.w	800595c <__malloc_unlock>
 8005434:	42a3      	cmp	r3, r4
 8005436:	d908      	bls.n	800544a <_free_r+0x42>
 8005438:	6820      	ldr	r0, [r4, #0]
 800543a:	1821      	adds	r1, r4, r0
 800543c:	428b      	cmp	r3, r1
 800543e:	bf01      	itttt	eq
 8005440:	6819      	ldreq	r1, [r3, #0]
 8005442:	685b      	ldreq	r3, [r3, #4]
 8005444:	1809      	addeq	r1, r1, r0
 8005446:	6021      	streq	r1, [r4, #0]
 8005448:	e7ed      	b.n	8005426 <_free_r+0x1e>
 800544a:	461a      	mov	r2, r3
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	b10b      	cbz	r3, 8005454 <_free_r+0x4c>
 8005450:	42a3      	cmp	r3, r4
 8005452:	d9fa      	bls.n	800544a <_free_r+0x42>
 8005454:	6811      	ldr	r1, [r2, #0]
 8005456:	1850      	adds	r0, r2, r1
 8005458:	42a0      	cmp	r0, r4
 800545a:	d10b      	bne.n	8005474 <_free_r+0x6c>
 800545c:	6820      	ldr	r0, [r4, #0]
 800545e:	4401      	add	r1, r0
 8005460:	1850      	adds	r0, r2, r1
 8005462:	4283      	cmp	r3, r0
 8005464:	6011      	str	r1, [r2, #0]
 8005466:	d1e0      	bne.n	800542a <_free_r+0x22>
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	4401      	add	r1, r0
 800546e:	6011      	str	r1, [r2, #0]
 8005470:	6053      	str	r3, [r2, #4]
 8005472:	e7da      	b.n	800542a <_free_r+0x22>
 8005474:	d902      	bls.n	800547c <_free_r+0x74>
 8005476:	230c      	movs	r3, #12
 8005478:	602b      	str	r3, [r5, #0]
 800547a:	e7d6      	b.n	800542a <_free_r+0x22>
 800547c:	6820      	ldr	r0, [r4, #0]
 800547e:	1821      	adds	r1, r4, r0
 8005480:	428b      	cmp	r3, r1
 8005482:	bf01      	itttt	eq
 8005484:	6819      	ldreq	r1, [r3, #0]
 8005486:	685b      	ldreq	r3, [r3, #4]
 8005488:	1809      	addeq	r1, r1, r0
 800548a:	6021      	streq	r1, [r4, #0]
 800548c:	6063      	str	r3, [r4, #4]
 800548e:	6054      	str	r4, [r2, #4]
 8005490:	e7cb      	b.n	800542a <_free_r+0x22>
 8005492:	bd38      	pop	{r3, r4, r5, pc}
 8005494:	20000230 	.word	0x20000230

08005498 <sbrk_aligned>:
 8005498:	b570      	push	{r4, r5, r6, lr}
 800549a:	4e0e      	ldr	r6, [pc, #56]	; (80054d4 <sbrk_aligned+0x3c>)
 800549c:	460c      	mov	r4, r1
 800549e:	6831      	ldr	r1, [r6, #0]
 80054a0:	4605      	mov	r5, r0
 80054a2:	b911      	cbnz	r1, 80054aa <sbrk_aligned+0x12>
 80054a4:	f000 f9e8 	bl	8005878 <_sbrk_r>
 80054a8:	6030      	str	r0, [r6, #0]
 80054aa:	4621      	mov	r1, r4
 80054ac:	4628      	mov	r0, r5
 80054ae:	f000 f9e3 	bl	8005878 <_sbrk_r>
 80054b2:	1c43      	adds	r3, r0, #1
 80054b4:	d00a      	beq.n	80054cc <sbrk_aligned+0x34>
 80054b6:	1cc4      	adds	r4, r0, #3
 80054b8:	f024 0403 	bic.w	r4, r4, #3
 80054bc:	42a0      	cmp	r0, r4
 80054be:	d007      	beq.n	80054d0 <sbrk_aligned+0x38>
 80054c0:	1a21      	subs	r1, r4, r0
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 f9d8 	bl	8005878 <_sbrk_r>
 80054c8:	3001      	adds	r0, #1
 80054ca:	d101      	bne.n	80054d0 <sbrk_aligned+0x38>
 80054cc:	f04f 34ff 	mov.w	r4, #4294967295
 80054d0:	4620      	mov	r0, r4
 80054d2:	bd70      	pop	{r4, r5, r6, pc}
 80054d4:	20000234 	.word	0x20000234

080054d8 <_malloc_r>:
 80054d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054dc:	1ccd      	adds	r5, r1, #3
 80054de:	f025 0503 	bic.w	r5, r5, #3
 80054e2:	3508      	adds	r5, #8
 80054e4:	2d0c      	cmp	r5, #12
 80054e6:	bf38      	it	cc
 80054e8:	250c      	movcc	r5, #12
 80054ea:	2d00      	cmp	r5, #0
 80054ec:	4607      	mov	r7, r0
 80054ee:	db01      	blt.n	80054f4 <_malloc_r+0x1c>
 80054f0:	42a9      	cmp	r1, r5
 80054f2:	d905      	bls.n	8005500 <_malloc_r+0x28>
 80054f4:	230c      	movs	r3, #12
 80054f6:	2600      	movs	r6, #0
 80054f8:	603b      	str	r3, [r7, #0]
 80054fa:	4630      	mov	r0, r6
 80054fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005500:	4e2e      	ldr	r6, [pc, #184]	; (80055bc <_malloc_r+0xe4>)
 8005502:	f000 fa25 	bl	8005950 <__malloc_lock>
 8005506:	6833      	ldr	r3, [r6, #0]
 8005508:	461c      	mov	r4, r3
 800550a:	bb34      	cbnz	r4, 800555a <_malloc_r+0x82>
 800550c:	4629      	mov	r1, r5
 800550e:	4638      	mov	r0, r7
 8005510:	f7ff ffc2 	bl	8005498 <sbrk_aligned>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	4604      	mov	r4, r0
 8005518:	d14d      	bne.n	80055b6 <_malloc_r+0xde>
 800551a:	6834      	ldr	r4, [r6, #0]
 800551c:	4626      	mov	r6, r4
 800551e:	2e00      	cmp	r6, #0
 8005520:	d140      	bne.n	80055a4 <_malloc_r+0xcc>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	4631      	mov	r1, r6
 8005526:	4638      	mov	r0, r7
 8005528:	eb04 0803 	add.w	r8, r4, r3
 800552c:	f000 f9a4 	bl	8005878 <_sbrk_r>
 8005530:	4580      	cmp	r8, r0
 8005532:	d13a      	bne.n	80055aa <_malloc_r+0xd2>
 8005534:	6821      	ldr	r1, [r4, #0]
 8005536:	3503      	adds	r5, #3
 8005538:	1a6d      	subs	r5, r5, r1
 800553a:	f025 0503 	bic.w	r5, r5, #3
 800553e:	3508      	adds	r5, #8
 8005540:	2d0c      	cmp	r5, #12
 8005542:	bf38      	it	cc
 8005544:	250c      	movcc	r5, #12
 8005546:	4638      	mov	r0, r7
 8005548:	4629      	mov	r1, r5
 800554a:	f7ff ffa5 	bl	8005498 <sbrk_aligned>
 800554e:	3001      	adds	r0, #1
 8005550:	d02b      	beq.n	80055aa <_malloc_r+0xd2>
 8005552:	6823      	ldr	r3, [r4, #0]
 8005554:	442b      	add	r3, r5
 8005556:	6023      	str	r3, [r4, #0]
 8005558:	e00e      	b.n	8005578 <_malloc_r+0xa0>
 800555a:	6822      	ldr	r2, [r4, #0]
 800555c:	1b52      	subs	r2, r2, r5
 800555e:	d41e      	bmi.n	800559e <_malloc_r+0xc6>
 8005560:	2a0b      	cmp	r2, #11
 8005562:	d916      	bls.n	8005592 <_malloc_r+0xba>
 8005564:	1961      	adds	r1, r4, r5
 8005566:	42a3      	cmp	r3, r4
 8005568:	6025      	str	r5, [r4, #0]
 800556a:	bf18      	it	ne
 800556c:	6059      	strne	r1, [r3, #4]
 800556e:	6863      	ldr	r3, [r4, #4]
 8005570:	bf08      	it	eq
 8005572:	6031      	streq	r1, [r6, #0]
 8005574:	5162      	str	r2, [r4, r5]
 8005576:	604b      	str	r3, [r1, #4]
 8005578:	4638      	mov	r0, r7
 800557a:	f104 060b 	add.w	r6, r4, #11
 800557e:	f000 f9ed 	bl	800595c <__malloc_unlock>
 8005582:	f026 0607 	bic.w	r6, r6, #7
 8005586:	1d23      	adds	r3, r4, #4
 8005588:	1af2      	subs	r2, r6, r3
 800558a:	d0b6      	beq.n	80054fa <_malloc_r+0x22>
 800558c:	1b9b      	subs	r3, r3, r6
 800558e:	50a3      	str	r3, [r4, r2]
 8005590:	e7b3      	b.n	80054fa <_malloc_r+0x22>
 8005592:	6862      	ldr	r2, [r4, #4]
 8005594:	42a3      	cmp	r3, r4
 8005596:	bf0c      	ite	eq
 8005598:	6032      	streq	r2, [r6, #0]
 800559a:	605a      	strne	r2, [r3, #4]
 800559c:	e7ec      	b.n	8005578 <_malloc_r+0xa0>
 800559e:	4623      	mov	r3, r4
 80055a0:	6864      	ldr	r4, [r4, #4]
 80055a2:	e7b2      	b.n	800550a <_malloc_r+0x32>
 80055a4:	4634      	mov	r4, r6
 80055a6:	6876      	ldr	r6, [r6, #4]
 80055a8:	e7b9      	b.n	800551e <_malloc_r+0x46>
 80055aa:	230c      	movs	r3, #12
 80055ac:	4638      	mov	r0, r7
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	f000 f9d4 	bl	800595c <__malloc_unlock>
 80055b4:	e7a1      	b.n	80054fa <_malloc_r+0x22>
 80055b6:	6025      	str	r5, [r4, #0]
 80055b8:	e7de      	b.n	8005578 <_malloc_r+0xa0>
 80055ba:	bf00      	nop
 80055bc:	20000230 	.word	0x20000230

080055c0 <__ssputs_r>:
 80055c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055c4:	688e      	ldr	r6, [r1, #8]
 80055c6:	4682      	mov	sl, r0
 80055c8:	429e      	cmp	r6, r3
 80055ca:	460c      	mov	r4, r1
 80055cc:	4690      	mov	r8, r2
 80055ce:	461f      	mov	r7, r3
 80055d0:	d838      	bhi.n	8005644 <__ssputs_r+0x84>
 80055d2:	898a      	ldrh	r2, [r1, #12]
 80055d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80055d8:	d032      	beq.n	8005640 <__ssputs_r+0x80>
 80055da:	6825      	ldr	r5, [r4, #0]
 80055dc:	6909      	ldr	r1, [r1, #16]
 80055de:	3301      	adds	r3, #1
 80055e0:	eba5 0901 	sub.w	r9, r5, r1
 80055e4:	6965      	ldr	r5, [r4, #20]
 80055e6:	444b      	add	r3, r9
 80055e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055f0:	106d      	asrs	r5, r5, #1
 80055f2:	429d      	cmp	r5, r3
 80055f4:	bf38      	it	cc
 80055f6:	461d      	movcc	r5, r3
 80055f8:	0553      	lsls	r3, r2, #21
 80055fa:	d531      	bpl.n	8005660 <__ssputs_r+0xa0>
 80055fc:	4629      	mov	r1, r5
 80055fe:	f7ff ff6b 	bl	80054d8 <_malloc_r>
 8005602:	4606      	mov	r6, r0
 8005604:	b950      	cbnz	r0, 800561c <__ssputs_r+0x5c>
 8005606:	230c      	movs	r3, #12
 8005608:	f04f 30ff 	mov.w	r0, #4294967295
 800560c:	f8ca 3000 	str.w	r3, [sl]
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005616:	81a3      	strh	r3, [r4, #12]
 8005618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800561c:	464a      	mov	r2, r9
 800561e:	6921      	ldr	r1, [r4, #16]
 8005620:	f7ff fb4e 	bl	8004cc0 <memcpy>
 8005624:	89a3      	ldrh	r3, [r4, #12]
 8005626:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800562a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800562e:	81a3      	strh	r3, [r4, #12]
 8005630:	6126      	str	r6, [r4, #16]
 8005632:	444e      	add	r6, r9
 8005634:	6026      	str	r6, [r4, #0]
 8005636:	463e      	mov	r6, r7
 8005638:	6165      	str	r5, [r4, #20]
 800563a:	eba5 0509 	sub.w	r5, r5, r9
 800563e:	60a5      	str	r5, [r4, #8]
 8005640:	42be      	cmp	r6, r7
 8005642:	d900      	bls.n	8005646 <__ssputs_r+0x86>
 8005644:	463e      	mov	r6, r7
 8005646:	4632      	mov	r2, r6
 8005648:	4641      	mov	r1, r8
 800564a:	6820      	ldr	r0, [r4, #0]
 800564c:	f000 f966 	bl	800591c <memmove>
 8005650:	68a3      	ldr	r3, [r4, #8]
 8005652:	2000      	movs	r0, #0
 8005654:	1b9b      	subs	r3, r3, r6
 8005656:	60a3      	str	r3, [r4, #8]
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	4433      	add	r3, r6
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	e7db      	b.n	8005618 <__ssputs_r+0x58>
 8005660:	462a      	mov	r2, r5
 8005662:	f000 f981 	bl	8005968 <_realloc_r>
 8005666:	4606      	mov	r6, r0
 8005668:	2800      	cmp	r0, #0
 800566a:	d1e1      	bne.n	8005630 <__ssputs_r+0x70>
 800566c:	4650      	mov	r0, sl
 800566e:	6921      	ldr	r1, [r4, #16]
 8005670:	f7ff feca 	bl	8005408 <_free_r>
 8005674:	e7c7      	b.n	8005606 <__ssputs_r+0x46>
	...

08005678 <_svfiprintf_r>:
 8005678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800567c:	4698      	mov	r8, r3
 800567e:	898b      	ldrh	r3, [r1, #12]
 8005680:	4607      	mov	r7, r0
 8005682:	061b      	lsls	r3, r3, #24
 8005684:	460d      	mov	r5, r1
 8005686:	4614      	mov	r4, r2
 8005688:	b09d      	sub	sp, #116	; 0x74
 800568a:	d50e      	bpl.n	80056aa <_svfiprintf_r+0x32>
 800568c:	690b      	ldr	r3, [r1, #16]
 800568e:	b963      	cbnz	r3, 80056aa <_svfiprintf_r+0x32>
 8005690:	2140      	movs	r1, #64	; 0x40
 8005692:	f7ff ff21 	bl	80054d8 <_malloc_r>
 8005696:	6028      	str	r0, [r5, #0]
 8005698:	6128      	str	r0, [r5, #16]
 800569a:	b920      	cbnz	r0, 80056a6 <_svfiprintf_r+0x2e>
 800569c:	230c      	movs	r3, #12
 800569e:	603b      	str	r3, [r7, #0]
 80056a0:	f04f 30ff 	mov.w	r0, #4294967295
 80056a4:	e0d1      	b.n	800584a <_svfiprintf_r+0x1d2>
 80056a6:	2340      	movs	r3, #64	; 0x40
 80056a8:	616b      	str	r3, [r5, #20]
 80056aa:	2300      	movs	r3, #0
 80056ac:	9309      	str	r3, [sp, #36]	; 0x24
 80056ae:	2320      	movs	r3, #32
 80056b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80056b4:	2330      	movs	r3, #48	; 0x30
 80056b6:	f04f 0901 	mov.w	r9, #1
 80056ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80056be:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005864 <_svfiprintf_r+0x1ec>
 80056c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80056c6:	4623      	mov	r3, r4
 80056c8:	469a      	mov	sl, r3
 80056ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ce:	b10a      	cbz	r2, 80056d4 <_svfiprintf_r+0x5c>
 80056d0:	2a25      	cmp	r2, #37	; 0x25
 80056d2:	d1f9      	bne.n	80056c8 <_svfiprintf_r+0x50>
 80056d4:	ebba 0b04 	subs.w	fp, sl, r4
 80056d8:	d00b      	beq.n	80056f2 <_svfiprintf_r+0x7a>
 80056da:	465b      	mov	r3, fp
 80056dc:	4622      	mov	r2, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	4638      	mov	r0, r7
 80056e2:	f7ff ff6d 	bl	80055c0 <__ssputs_r>
 80056e6:	3001      	adds	r0, #1
 80056e8:	f000 80aa 	beq.w	8005840 <_svfiprintf_r+0x1c8>
 80056ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056ee:	445a      	add	r2, fp
 80056f0:	9209      	str	r2, [sp, #36]	; 0x24
 80056f2:	f89a 3000 	ldrb.w	r3, [sl]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 80a2 	beq.w	8005840 <_svfiprintf_r+0x1c8>
 80056fc:	2300      	movs	r3, #0
 80056fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005702:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005706:	f10a 0a01 	add.w	sl, sl, #1
 800570a:	9304      	str	r3, [sp, #16]
 800570c:	9307      	str	r3, [sp, #28]
 800570e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005712:	931a      	str	r3, [sp, #104]	; 0x68
 8005714:	4654      	mov	r4, sl
 8005716:	2205      	movs	r2, #5
 8005718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800571c:	4851      	ldr	r0, [pc, #324]	; (8005864 <_svfiprintf_r+0x1ec>)
 800571e:	f7ff fac1 	bl	8004ca4 <memchr>
 8005722:	9a04      	ldr	r2, [sp, #16]
 8005724:	b9d8      	cbnz	r0, 800575e <_svfiprintf_r+0xe6>
 8005726:	06d0      	lsls	r0, r2, #27
 8005728:	bf44      	itt	mi
 800572a:	2320      	movmi	r3, #32
 800572c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005730:	0711      	lsls	r1, r2, #28
 8005732:	bf44      	itt	mi
 8005734:	232b      	movmi	r3, #43	; 0x2b
 8005736:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800573a:	f89a 3000 	ldrb.w	r3, [sl]
 800573e:	2b2a      	cmp	r3, #42	; 0x2a
 8005740:	d015      	beq.n	800576e <_svfiprintf_r+0xf6>
 8005742:	4654      	mov	r4, sl
 8005744:	2000      	movs	r0, #0
 8005746:	f04f 0c0a 	mov.w	ip, #10
 800574a:	9a07      	ldr	r2, [sp, #28]
 800574c:	4621      	mov	r1, r4
 800574e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005752:	3b30      	subs	r3, #48	; 0x30
 8005754:	2b09      	cmp	r3, #9
 8005756:	d94e      	bls.n	80057f6 <_svfiprintf_r+0x17e>
 8005758:	b1b0      	cbz	r0, 8005788 <_svfiprintf_r+0x110>
 800575a:	9207      	str	r2, [sp, #28]
 800575c:	e014      	b.n	8005788 <_svfiprintf_r+0x110>
 800575e:	eba0 0308 	sub.w	r3, r0, r8
 8005762:	fa09 f303 	lsl.w	r3, r9, r3
 8005766:	4313      	orrs	r3, r2
 8005768:	46a2      	mov	sl, r4
 800576a:	9304      	str	r3, [sp, #16]
 800576c:	e7d2      	b.n	8005714 <_svfiprintf_r+0x9c>
 800576e:	9b03      	ldr	r3, [sp, #12]
 8005770:	1d19      	adds	r1, r3, #4
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	9103      	str	r1, [sp, #12]
 8005776:	2b00      	cmp	r3, #0
 8005778:	bfbb      	ittet	lt
 800577a:	425b      	neglt	r3, r3
 800577c:	f042 0202 	orrlt.w	r2, r2, #2
 8005780:	9307      	strge	r3, [sp, #28]
 8005782:	9307      	strlt	r3, [sp, #28]
 8005784:	bfb8      	it	lt
 8005786:	9204      	strlt	r2, [sp, #16]
 8005788:	7823      	ldrb	r3, [r4, #0]
 800578a:	2b2e      	cmp	r3, #46	; 0x2e
 800578c:	d10c      	bne.n	80057a8 <_svfiprintf_r+0x130>
 800578e:	7863      	ldrb	r3, [r4, #1]
 8005790:	2b2a      	cmp	r3, #42	; 0x2a
 8005792:	d135      	bne.n	8005800 <_svfiprintf_r+0x188>
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	3402      	adds	r4, #2
 8005798:	1d1a      	adds	r2, r3, #4
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	9203      	str	r2, [sp, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bfb8      	it	lt
 80057a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80057a6:	9305      	str	r3, [sp, #20]
 80057a8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005868 <_svfiprintf_r+0x1f0>
 80057ac:	2203      	movs	r2, #3
 80057ae:	4650      	mov	r0, sl
 80057b0:	7821      	ldrb	r1, [r4, #0]
 80057b2:	f7ff fa77 	bl	8004ca4 <memchr>
 80057b6:	b140      	cbz	r0, 80057ca <_svfiprintf_r+0x152>
 80057b8:	2340      	movs	r3, #64	; 0x40
 80057ba:	eba0 000a 	sub.w	r0, r0, sl
 80057be:	fa03 f000 	lsl.w	r0, r3, r0
 80057c2:	9b04      	ldr	r3, [sp, #16]
 80057c4:	3401      	adds	r4, #1
 80057c6:	4303      	orrs	r3, r0
 80057c8:	9304      	str	r3, [sp, #16]
 80057ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ce:	2206      	movs	r2, #6
 80057d0:	4826      	ldr	r0, [pc, #152]	; (800586c <_svfiprintf_r+0x1f4>)
 80057d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80057d6:	f7ff fa65 	bl	8004ca4 <memchr>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d038      	beq.n	8005850 <_svfiprintf_r+0x1d8>
 80057de:	4b24      	ldr	r3, [pc, #144]	; (8005870 <_svfiprintf_r+0x1f8>)
 80057e0:	bb1b      	cbnz	r3, 800582a <_svfiprintf_r+0x1b2>
 80057e2:	9b03      	ldr	r3, [sp, #12]
 80057e4:	3307      	adds	r3, #7
 80057e6:	f023 0307 	bic.w	r3, r3, #7
 80057ea:	3308      	adds	r3, #8
 80057ec:	9303      	str	r3, [sp, #12]
 80057ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057f0:	4433      	add	r3, r6
 80057f2:	9309      	str	r3, [sp, #36]	; 0x24
 80057f4:	e767      	b.n	80056c6 <_svfiprintf_r+0x4e>
 80057f6:	460c      	mov	r4, r1
 80057f8:	2001      	movs	r0, #1
 80057fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80057fe:	e7a5      	b.n	800574c <_svfiprintf_r+0xd4>
 8005800:	2300      	movs	r3, #0
 8005802:	f04f 0c0a 	mov.w	ip, #10
 8005806:	4619      	mov	r1, r3
 8005808:	3401      	adds	r4, #1
 800580a:	9305      	str	r3, [sp, #20]
 800580c:	4620      	mov	r0, r4
 800580e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005812:	3a30      	subs	r2, #48	; 0x30
 8005814:	2a09      	cmp	r2, #9
 8005816:	d903      	bls.n	8005820 <_svfiprintf_r+0x1a8>
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0c5      	beq.n	80057a8 <_svfiprintf_r+0x130>
 800581c:	9105      	str	r1, [sp, #20]
 800581e:	e7c3      	b.n	80057a8 <_svfiprintf_r+0x130>
 8005820:	4604      	mov	r4, r0
 8005822:	2301      	movs	r3, #1
 8005824:	fb0c 2101 	mla	r1, ip, r1, r2
 8005828:	e7f0      	b.n	800580c <_svfiprintf_r+0x194>
 800582a:	ab03      	add	r3, sp, #12
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	462a      	mov	r2, r5
 8005830:	4638      	mov	r0, r7
 8005832:	4b10      	ldr	r3, [pc, #64]	; (8005874 <_svfiprintf_r+0x1fc>)
 8005834:	a904      	add	r1, sp, #16
 8005836:	f7fd ffb7 	bl	80037a8 <_printf_float>
 800583a:	1c42      	adds	r2, r0, #1
 800583c:	4606      	mov	r6, r0
 800583e:	d1d6      	bne.n	80057ee <_svfiprintf_r+0x176>
 8005840:	89ab      	ldrh	r3, [r5, #12]
 8005842:	065b      	lsls	r3, r3, #25
 8005844:	f53f af2c 	bmi.w	80056a0 <_svfiprintf_r+0x28>
 8005848:	9809      	ldr	r0, [sp, #36]	; 0x24
 800584a:	b01d      	add	sp, #116	; 0x74
 800584c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005850:	ab03      	add	r3, sp, #12
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	462a      	mov	r2, r5
 8005856:	4638      	mov	r0, r7
 8005858:	4b06      	ldr	r3, [pc, #24]	; (8005874 <_svfiprintf_r+0x1fc>)
 800585a:	a904      	add	r1, sp, #16
 800585c:	f7fe fa40 	bl	8003ce0 <_printf_i>
 8005860:	e7eb      	b.n	800583a <_svfiprintf_r+0x1c2>
 8005862:	bf00      	nop
 8005864:	080074b4 	.word	0x080074b4
 8005868:	080074ba 	.word	0x080074ba
 800586c:	080074be 	.word	0x080074be
 8005870:	080037a9 	.word	0x080037a9
 8005874:	080055c1 	.word	0x080055c1

08005878 <_sbrk_r>:
 8005878:	b538      	push	{r3, r4, r5, lr}
 800587a:	2300      	movs	r3, #0
 800587c:	4d05      	ldr	r5, [pc, #20]	; (8005894 <_sbrk_r+0x1c>)
 800587e:	4604      	mov	r4, r0
 8005880:	4608      	mov	r0, r1
 8005882:	602b      	str	r3, [r5, #0]
 8005884:	f7fc f8f2 	bl	8001a6c <_sbrk>
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	d102      	bne.n	8005892 <_sbrk_r+0x1a>
 800588c:	682b      	ldr	r3, [r5, #0]
 800588e:	b103      	cbz	r3, 8005892 <_sbrk_r+0x1a>
 8005890:	6023      	str	r3, [r4, #0]
 8005892:	bd38      	pop	{r3, r4, r5, pc}
 8005894:	20000238 	.word	0x20000238

08005898 <__assert_func>:
 8005898:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800589a:	4614      	mov	r4, r2
 800589c:	461a      	mov	r2, r3
 800589e:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <__assert_func+0x2c>)
 80058a0:	4605      	mov	r5, r0
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68d8      	ldr	r0, [r3, #12]
 80058a6:	b14c      	cbz	r4, 80058bc <__assert_func+0x24>
 80058a8:	4b07      	ldr	r3, [pc, #28]	; (80058c8 <__assert_func+0x30>)
 80058aa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80058ae:	9100      	str	r1, [sp, #0]
 80058b0:	462b      	mov	r3, r5
 80058b2:	4906      	ldr	r1, [pc, #24]	; (80058cc <__assert_func+0x34>)
 80058b4:	f000 f80e 	bl	80058d4 <fiprintf>
 80058b8:	f000 faaa 	bl	8005e10 <abort>
 80058bc:	4b04      	ldr	r3, [pc, #16]	; (80058d0 <__assert_func+0x38>)
 80058be:	461c      	mov	r4, r3
 80058c0:	e7f3      	b.n	80058aa <__assert_func+0x12>
 80058c2:	bf00      	nop
 80058c4:	2000000c 	.word	0x2000000c
 80058c8:	080074c5 	.word	0x080074c5
 80058cc:	080074d2 	.word	0x080074d2
 80058d0:	08007500 	.word	0x08007500

080058d4 <fiprintf>:
 80058d4:	b40e      	push	{r1, r2, r3}
 80058d6:	b503      	push	{r0, r1, lr}
 80058d8:	4601      	mov	r1, r0
 80058da:	ab03      	add	r3, sp, #12
 80058dc:	4805      	ldr	r0, [pc, #20]	; (80058f4 <fiprintf+0x20>)
 80058de:	f853 2b04 	ldr.w	r2, [r3], #4
 80058e2:	6800      	ldr	r0, [r0, #0]
 80058e4:	9301      	str	r3, [sp, #4]
 80058e6:	f000 f895 	bl	8005a14 <_vfiprintf_r>
 80058ea:	b002      	add	sp, #8
 80058ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80058f0:	b003      	add	sp, #12
 80058f2:	4770      	bx	lr
 80058f4:	2000000c 	.word	0x2000000c

080058f8 <__ascii_mbtowc>:
 80058f8:	b082      	sub	sp, #8
 80058fa:	b901      	cbnz	r1, 80058fe <__ascii_mbtowc+0x6>
 80058fc:	a901      	add	r1, sp, #4
 80058fe:	b142      	cbz	r2, 8005912 <__ascii_mbtowc+0x1a>
 8005900:	b14b      	cbz	r3, 8005916 <__ascii_mbtowc+0x1e>
 8005902:	7813      	ldrb	r3, [r2, #0]
 8005904:	600b      	str	r3, [r1, #0]
 8005906:	7812      	ldrb	r2, [r2, #0]
 8005908:	1e10      	subs	r0, r2, #0
 800590a:	bf18      	it	ne
 800590c:	2001      	movne	r0, #1
 800590e:	b002      	add	sp, #8
 8005910:	4770      	bx	lr
 8005912:	4610      	mov	r0, r2
 8005914:	e7fb      	b.n	800590e <__ascii_mbtowc+0x16>
 8005916:	f06f 0001 	mvn.w	r0, #1
 800591a:	e7f8      	b.n	800590e <__ascii_mbtowc+0x16>

0800591c <memmove>:
 800591c:	4288      	cmp	r0, r1
 800591e:	b510      	push	{r4, lr}
 8005920:	eb01 0402 	add.w	r4, r1, r2
 8005924:	d902      	bls.n	800592c <memmove+0x10>
 8005926:	4284      	cmp	r4, r0
 8005928:	4623      	mov	r3, r4
 800592a:	d807      	bhi.n	800593c <memmove+0x20>
 800592c:	1e43      	subs	r3, r0, #1
 800592e:	42a1      	cmp	r1, r4
 8005930:	d008      	beq.n	8005944 <memmove+0x28>
 8005932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005936:	f803 2f01 	strb.w	r2, [r3, #1]!
 800593a:	e7f8      	b.n	800592e <memmove+0x12>
 800593c:	4601      	mov	r1, r0
 800593e:	4402      	add	r2, r0
 8005940:	428a      	cmp	r2, r1
 8005942:	d100      	bne.n	8005946 <memmove+0x2a>
 8005944:	bd10      	pop	{r4, pc}
 8005946:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800594a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800594e:	e7f7      	b.n	8005940 <memmove+0x24>

08005950 <__malloc_lock>:
 8005950:	4801      	ldr	r0, [pc, #4]	; (8005958 <__malloc_lock+0x8>)
 8005952:	f000 bc19 	b.w	8006188 <__retarget_lock_acquire_recursive>
 8005956:	bf00      	nop
 8005958:	2000023c 	.word	0x2000023c

0800595c <__malloc_unlock>:
 800595c:	4801      	ldr	r0, [pc, #4]	; (8005964 <__malloc_unlock+0x8>)
 800595e:	f000 bc14 	b.w	800618a <__retarget_lock_release_recursive>
 8005962:	bf00      	nop
 8005964:	2000023c 	.word	0x2000023c

08005968 <_realloc_r>:
 8005968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800596c:	4680      	mov	r8, r0
 800596e:	4614      	mov	r4, r2
 8005970:	460e      	mov	r6, r1
 8005972:	b921      	cbnz	r1, 800597e <_realloc_r+0x16>
 8005974:	4611      	mov	r1, r2
 8005976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800597a:	f7ff bdad 	b.w	80054d8 <_malloc_r>
 800597e:	b92a      	cbnz	r2, 800598c <_realloc_r+0x24>
 8005980:	f7ff fd42 	bl	8005408 <_free_r>
 8005984:	4625      	mov	r5, r4
 8005986:	4628      	mov	r0, r5
 8005988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800598c:	f000 fc64 	bl	8006258 <_malloc_usable_size_r>
 8005990:	4284      	cmp	r4, r0
 8005992:	4607      	mov	r7, r0
 8005994:	d802      	bhi.n	800599c <_realloc_r+0x34>
 8005996:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800599a:	d812      	bhi.n	80059c2 <_realloc_r+0x5a>
 800599c:	4621      	mov	r1, r4
 800599e:	4640      	mov	r0, r8
 80059a0:	f7ff fd9a 	bl	80054d8 <_malloc_r>
 80059a4:	4605      	mov	r5, r0
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d0ed      	beq.n	8005986 <_realloc_r+0x1e>
 80059aa:	42bc      	cmp	r4, r7
 80059ac:	4622      	mov	r2, r4
 80059ae:	4631      	mov	r1, r6
 80059b0:	bf28      	it	cs
 80059b2:	463a      	movcs	r2, r7
 80059b4:	f7ff f984 	bl	8004cc0 <memcpy>
 80059b8:	4631      	mov	r1, r6
 80059ba:	4640      	mov	r0, r8
 80059bc:	f7ff fd24 	bl	8005408 <_free_r>
 80059c0:	e7e1      	b.n	8005986 <_realloc_r+0x1e>
 80059c2:	4635      	mov	r5, r6
 80059c4:	e7df      	b.n	8005986 <_realloc_r+0x1e>

080059c6 <__sfputc_r>:
 80059c6:	6893      	ldr	r3, [r2, #8]
 80059c8:	b410      	push	{r4}
 80059ca:	3b01      	subs	r3, #1
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	6093      	str	r3, [r2, #8]
 80059d0:	da07      	bge.n	80059e2 <__sfputc_r+0x1c>
 80059d2:	6994      	ldr	r4, [r2, #24]
 80059d4:	42a3      	cmp	r3, r4
 80059d6:	db01      	blt.n	80059dc <__sfputc_r+0x16>
 80059d8:	290a      	cmp	r1, #10
 80059da:	d102      	bne.n	80059e2 <__sfputc_r+0x1c>
 80059dc:	bc10      	pop	{r4}
 80059de:	f000 b949 	b.w	8005c74 <__swbuf_r>
 80059e2:	6813      	ldr	r3, [r2, #0]
 80059e4:	1c58      	adds	r0, r3, #1
 80059e6:	6010      	str	r0, [r2, #0]
 80059e8:	7019      	strb	r1, [r3, #0]
 80059ea:	4608      	mov	r0, r1
 80059ec:	bc10      	pop	{r4}
 80059ee:	4770      	bx	lr

080059f0 <__sfputs_r>:
 80059f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059f2:	4606      	mov	r6, r0
 80059f4:	460f      	mov	r7, r1
 80059f6:	4614      	mov	r4, r2
 80059f8:	18d5      	adds	r5, r2, r3
 80059fa:	42ac      	cmp	r4, r5
 80059fc:	d101      	bne.n	8005a02 <__sfputs_r+0x12>
 80059fe:	2000      	movs	r0, #0
 8005a00:	e007      	b.n	8005a12 <__sfputs_r+0x22>
 8005a02:	463a      	mov	r2, r7
 8005a04:	4630      	mov	r0, r6
 8005a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a0a:	f7ff ffdc 	bl	80059c6 <__sfputc_r>
 8005a0e:	1c43      	adds	r3, r0, #1
 8005a10:	d1f3      	bne.n	80059fa <__sfputs_r+0xa>
 8005a12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005a14 <_vfiprintf_r>:
 8005a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a18:	460d      	mov	r5, r1
 8005a1a:	4614      	mov	r4, r2
 8005a1c:	4698      	mov	r8, r3
 8005a1e:	4606      	mov	r6, r0
 8005a20:	b09d      	sub	sp, #116	; 0x74
 8005a22:	b118      	cbz	r0, 8005a2c <_vfiprintf_r+0x18>
 8005a24:	6983      	ldr	r3, [r0, #24]
 8005a26:	b90b      	cbnz	r3, 8005a2c <_vfiprintf_r+0x18>
 8005a28:	f000 fb10 	bl	800604c <__sinit>
 8005a2c:	4b89      	ldr	r3, [pc, #548]	; (8005c54 <_vfiprintf_r+0x240>)
 8005a2e:	429d      	cmp	r5, r3
 8005a30:	d11b      	bne.n	8005a6a <_vfiprintf_r+0x56>
 8005a32:	6875      	ldr	r5, [r6, #4]
 8005a34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a36:	07d9      	lsls	r1, r3, #31
 8005a38:	d405      	bmi.n	8005a46 <_vfiprintf_r+0x32>
 8005a3a:	89ab      	ldrh	r3, [r5, #12]
 8005a3c:	059a      	lsls	r2, r3, #22
 8005a3e:	d402      	bmi.n	8005a46 <_vfiprintf_r+0x32>
 8005a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a42:	f000 fba1 	bl	8006188 <__retarget_lock_acquire_recursive>
 8005a46:	89ab      	ldrh	r3, [r5, #12]
 8005a48:	071b      	lsls	r3, r3, #28
 8005a4a:	d501      	bpl.n	8005a50 <_vfiprintf_r+0x3c>
 8005a4c:	692b      	ldr	r3, [r5, #16]
 8005a4e:	b9eb      	cbnz	r3, 8005a8c <_vfiprintf_r+0x78>
 8005a50:	4629      	mov	r1, r5
 8005a52:	4630      	mov	r0, r6
 8005a54:	f000 f96e 	bl	8005d34 <__swsetup_r>
 8005a58:	b1c0      	cbz	r0, 8005a8c <_vfiprintf_r+0x78>
 8005a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a5c:	07dc      	lsls	r4, r3, #31
 8005a5e:	d50e      	bpl.n	8005a7e <_vfiprintf_r+0x6a>
 8005a60:	f04f 30ff 	mov.w	r0, #4294967295
 8005a64:	b01d      	add	sp, #116	; 0x74
 8005a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6a:	4b7b      	ldr	r3, [pc, #492]	; (8005c58 <_vfiprintf_r+0x244>)
 8005a6c:	429d      	cmp	r5, r3
 8005a6e:	d101      	bne.n	8005a74 <_vfiprintf_r+0x60>
 8005a70:	68b5      	ldr	r5, [r6, #8]
 8005a72:	e7df      	b.n	8005a34 <_vfiprintf_r+0x20>
 8005a74:	4b79      	ldr	r3, [pc, #484]	; (8005c5c <_vfiprintf_r+0x248>)
 8005a76:	429d      	cmp	r5, r3
 8005a78:	bf08      	it	eq
 8005a7a:	68f5      	ldreq	r5, [r6, #12]
 8005a7c:	e7da      	b.n	8005a34 <_vfiprintf_r+0x20>
 8005a7e:	89ab      	ldrh	r3, [r5, #12]
 8005a80:	0598      	lsls	r0, r3, #22
 8005a82:	d4ed      	bmi.n	8005a60 <_vfiprintf_r+0x4c>
 8005a84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a86:	f000 fb80 	bl	800618a <__retarget_lock_release_recursive>
 8005a8a:	e7e9      	b.n	8005a60 <_vfiprintf_r+0x4c>
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005a90:	2320      	movs	r3, #32
 8005a92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a96:	2330      	movs	r3, #48	; 0x30
 8005a98:	f04f 0901 	mov.w	r9, #1
 8005a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005aa0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005c60 <_vfiprintf_r+0x24c>
 8005aa4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005aa8:	4623      	mov	r3, r4
 8005aaa:	469a      	mov	sl, r3
 8005aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ab0:	b10a      	cbz	r2, 8005ab6 <_vfiprintf_r+0xa2>
 8005ab2:	2a25      	cmp	r2, #37	; 0x25
 8005ab4:	d1f9      	bne.n	8005aaa <_vfiprintf_r+0x96>
 8005ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8005aba:	d00b      	beq.n	8005ad4 <_vfiprintf_r+0xc0>
 8005abc:	465b      	mov	r3, fp
 8005abe:	4622      	mov	r2, r4
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	4630      	mov	r0, r6
 8005ac4:	f7ff ff94 	bl	80059f0 <__sfputs_r>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	f000 80aa 	beq.w	8005c22 <_vfiprintf_r+0x20e>
 8005ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ad0:	445a      	add	r2, fp
 8005ad2:	9209      	str	r2, [sp, #36]	; 0x24
 8005ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 80a2 	beq.w	8005c22 <_vfiprintf_r+0x20e>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ae8:	f10a 0a01 	add.w	sl, sl, #1
 8005aec:	9304      	str	r3, [sp, #16]
 8005aee:	9307      	str	r3, [sp, #28]
 8005af0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005af4:	931a      	str	r3, [sp, #104]	; 0x68
 8005af6:	4654      	mov	r4, sl
 8005af8:	2205      	movs	r2, #5
 8005afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005afe:	4858      	ldr	r0, [pc, #352]	; (8005c60 <_vfiprintf_r+0x24c>)
 8005b00:	f7ff f8d0 	bl	8004ca4 <memchr>
 8005b04:	9a04      	ldr	r2, [sp, #16]
 8005b06:	b9d8      	cbnz	r0, 8005b40 <_vfiprintf_r+0x12c>
 8005b08:	06d1      	lsls	r1, r2, #27
 8005b0a:	bf44      	itt	mi
 8005b0c:	2320      	movmi	r3, #32
 8005b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b12:	0713      	lsls	r3, r2, #28
 8005b14:	bf44      	itt	mi
 8005b16:	232b      	movmi	r3, #43	; 0x2b
 8005b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b20:	2b2a      	cmp	r3, #42	; 0x2a
 8005b22:	d015      	beq.n	8005b50 <_vfiprintf_r+0x13c>
 8005b24:	4654      	mov	r4, sl
 8005b26:	2000      	movs	r0, #0
 8005b28:	f04f 0c0a 	mov.w	ip, #10
 8005b2c:	9a07      	ldr	r2, [sp, #28]
 8005b2e:	4621      	mov	r1, r4
 8005b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b34:	3b30      	subs	r3, #48	; 0x30
 8005b36:	2b09      	cmp	r3, #9
 8005b38:	d94e      	bls.n	8005bd8 <_vfiprintf_r+0x1c4>
 8005b3a:	b1b0      	cbz	r0, 8005b6a <_vfiprintf_r+0x156>
 8005b3c:	9207      	str	r2, [sp, #28]
 8005b3e:	e014      	b.n	8005b6a <_vfiprintf_r+0x156>
 8005b40:	eba0 0308 	sub.w	r3, r0, r8
 8005b44:	fa09 f303 	lsl.w	r3, r9, r3
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	46a2      	mov	sl, r4
 8005b4c:	9304      	str	r3, [sp, #16]
 8005b4e:	e7d2      	b.n	8005af6 <_vfiprintf_r+0xe2>
 8005b50:	9b03      	ldr	r3, [sp, #12]
 8005b52:	1d19      	adds	r1, r3, #4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	9103      	str	r1, [sp, #12]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	bfbb      	ittet	lt
 8005b5c:	425b      	neglt	r3, r3
 8005b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8005b62:	9307      	strge	r3, [sp, #28]
 8005b64:	9307      	strlt	r3, [sp, #28]
 8005b66:	bfb8      	it	lt
 8005b68:	9204      	strlt	r2, [sp, #16]
 8005b6a:	7823      	ldrb	r3, [r4, #0]
 8005b6c:	2b2e      	cmp	r3, #46	; 0x2e
 8005b6e:	d10c      	bne.n	8005b8a <_vfiprintf_r+0x176>
 8005b70:	7863      	ldrb	r3, [r4, #1]
 8005b72:	2b2a      	cmp	r3, #42	; 0x2a
 8005b74:	d135      	bne.n	8005be2 <_vfiprintf_r+0x1ce>
 8005b76:	9b03      	ldr	r3, [sp, #12]
 8005b78:	3402      	adds	r4, #2
 8005b7a:	1d1a      	adds	r2, r3, #4
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	9203      	str	r2, [sp, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	bfb8      	it	lt
 8005b84:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b88:	9305      	str	r3, [sp, #20]
 8005b8a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005c64 <_vfiprintf_r+0x250>
 8005b8e:	2203      	movs	r2, #3
 8005b90:	4650      	mov	r0, sl
 8005b92:	7821      	ldrb	r1, [r4, #0]
 8005b94:	f7ff f886 	bl	8004ca4 <memchr>
 8005b98:	b140      	cbz	r0, 8005bac <_vfiprintf_r+0x198>
 8005b9a:	2340      	movs	r3, #64	; 0x40
 8005b9c:	eba0 000a 	sub.w	r0, r0, sl
 8005ba0:	fa03 f000 	lsl.w	r0, r3, r0
 8005ba4:	9b04      	ldr	r3, [sp, #16]
 8005ba6:	3401      	adds	r4, #1
 8005ba8:	4303      	orrs	r3, r0
 8005baa:	9304      	str	r3, [sp, #16]
 8005bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bb0:	2206      	movs	r2, #6
 8005bb2:	482d      	ldr	r0, [pc, #180]	; (8005c68 <_vfiprintf_r+0x254>)
 8005bb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bb8:	f7ff f874 	bl	8004ca4 <memchr>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	d03f      	beq.n	8005c40 <_vfiprintf_r+0x22c>
 8005bc0:	4b2a      	ldr	r3, [pc, #168]	; (8005c6c <_vfiprintf_r+0x258>)
 8005bc2:	bb1b      	cbnz	r3, 8005c0c <_vfiprintf_r+0x1f8>
 8005bc4:	9b03      	ldr	r3, [sp, #12]
 8005bc6:	3307      	adds	r3, #7
 8005bc8:	f023 0307 	bic.w	r3, r3, #7
 8005bcc:	3308      	adds	r3, #8
 8005bce:	9303      	str	r3, [sp, #12]
 8005bd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bd2:	443b      	add	r3, r7
 8005bd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bd6:	e767      	b.n	8005aa8 <_vfiprintf_r+0x94>
 8005bd8:	460c      	mov	r4, r1
 8005bda:	2001      	movs	r0, #1
 8005bdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005be0:	e7a5      	b.n	8005b2e <_vfiprintf_r+0x11a>
 8005be2:	2300      	movs	r3, #0
 8005be4:	f04f 0c0a 	mov.w	ip, #10
 8005be8:	4619      	mov	r1, r3
 8005bea:	3401      	adds	r4, #1
 8005bec:	9305      	str	r3, [sp, #20]
 8005bee:	4620      	mov	r0, r4
 8005bf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bf4:	3a30      	subs	r2, #48	; 0x30
 8005bf6:	2a09      	cmp	r2, #9
 8005bf8:	d903      	bls.n	8005c02 <_vfiprintf_r+0x1ee>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0c5      	beq.n	8005b8a <_vfiprintf_r+0x176>
 8005bfe:	9105      	str	r1, [sp, #20]
 8005c00:	e7c3      	b.n	8005b8a <_vfiprintf_r+0x176>
 8005c02:	4604      	mov	r4, r0
 8005c04:	2301      	movs	r3, #1
 8005c06:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c0a:	e7f0      	b.n	8005bee <_vfiprintf_r+0x1da>
 8005c0c:	ab03      	add	r3, sp, #12
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	462a      	mov	r2, r5
 8005c12:	4630      	mov	r0, r6
 8005c14:	4b16      	ldr	r3, [pc, #88]	; (8005c70 <_vfiprintf_r+0x25c>)
 8005c16:	a904      	add	r1, sp, #16
 8005c18:	f7fd fdc6 	bl	80037a8 <_printf_float>
 8005c1c:	4607      	mov	r7, r0
 8005c1e:	1c78      	adds	r0, r7, #1
 8005c20:	d1d6      	bne.n	8005bd0 <_vfiprintf_r+0x1bc>
 8005c22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c24:	07d9      	lsls	r1, r3, #31
 8005c26:	d405      	bmi.n	8005c34 <_vfiprintf_r+0x220>
 8005c28:	89ab      	ldrh	r3, [r5, #12]
 8005c2a:	059a      	lsls	r2, r3, #22
 8005c2c:	d402      	bmi.n	8005c34 <_vfiprintf_r+0x220>
 8005c2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c30:	f000 faab 	bl	800618a <__retarget_lock_release_recursive>
 8005c34:	89ab      	ldrh	r3, [r5, #12]
 8005c36:	065b      	lsls	r3, r3, #25
 8005c38:	f53f af12 	bmi.w	8005a60 <_vfiprintf_r+0x4c>
 8005c3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c3e:	e711      	b.n	8005a64 <_vfiprintf_r+0x50>
 8005c40:	ab03      	add	r3, sp, #12
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	462a      	mov	r2, r5
 8005c46:	4630      	mov	r0, r6
 8005c48:	4b09      	ldr	r3, [pc, #36]	; (8005c70 <_vfiprintf_r+0x25c>)
 8005c4a:	a904      	add	r1, sp, #16
 8005c4c:	f7fe f848 	bl	8003ce0 <_printf_i>
 8005c50:	e7e4      	b.n	8005c1c <_vfiprintf_r+0x208>
 8005c52:	bf00      	nop
 8005c54:	0800762c 	.word	0x0800762c
 8005c58:	0800764c 	.word	0x0800764c
 8005c5c:	0800760c 	.word	0x0800760c
 8005c60:	080074b4 	.word	0x080074b4
 8005c64:	080074ba 	.word	0x080074ba
 8005c68:	080074be 	.word	0x080074be
 8005c6c:	080037a9 	.word	0x080037a9
 8005c70:	080059f1 	.word	0x080059f1

08005c74 <__swbuf_r>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	460e      	mov	r6, r1
 8005c78:	4614      	mov	r4, r2
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	b118      	cbz	r0, 8005c86 <__swbuf_r+0x12>
 8005c7e:	6983      	ldr	r3, [r0, #24]
 8005c80:	b90b      	cbnz	r3, 8005c86 <__swbuf_r+0x12>
 8005c82:	f000 f9e3 	bl	800604c <__sinit>
 8005c86:	4b21      	ldr	r3, [pc, #132]	; (8005d0c <__swbuf_r+0x98>)
 8005c88:	429c      	cmp	r4, r3
 8005c8a:	d12b      	bne.n	8005ce4 <__swbuf_r+0x70>
 8005c8c:	686c      	ldr	r4, [r5, #4]
 8005c8e:	69a3      	ldr	r3, [r4, #24]
 8005c90:	60a3      	str	r3, [r4, #8]
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	071a      	lsls	r2, r3, #28
 8005c96:	d52f      	bpl.n	8005cf8 <__swbuf_r+0x84>
 8005c98:	6923      	ldr	r3, [r4, #16]
 8005c9a:	b36b      	cbz	r3, 8005cf8 <__swbuf_r+0x84>
 8005c9c:	6923      	ldr	r3, [r4, #16]
 8005c9e:	6820      	ldr	r0, [r4, #0]
 8005ca0:	b2f6      	uxtb	r6, r6
 8005ca2:	1ac0      	subs	r0, r0, r3
 8005ca4:	6963      	ldr	r3, [r4, #20]
 8005ca6:	4637      	mov	r7, r6
 8005ca8:	4283      	cmp	r3, r0
 8005caa:	dc04      	bgt.n	8005cb6 <__swbuf_r+0x42>
 8005cac:	4621      	mov	r1, r4
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f000 f938 	bl	8005f24 <_fflush_r>
 8005cb4:	bb30      	cbnz	r0, 8005d04 <__swbuf_r+0x90>
 8005cb6:	68a3      	ldr	r3, [r4, #8]
 8005cb8:	3001      	adds	r0, #1
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	60a3      	str	r3, [r4, #8]
 8005cbe:	6823      	ldr	r3, [r4, #0]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	6022      	str	r2, [r4, #0]
 8005cc4:	701e      	strb	r6, [r3, #0]
 8005cc6:	6963      	ldr	r3, [r4, #20]
 8005cc8:	4283      	cmp	r3, r0
 8005cca:	d004      	beq.n	8005cd6 <__swbuf_r+0x62>
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	07db      	lsls	r3, r3, #31
 8005cd0:	d506      	bpl.n	8005ce0 <__swbuf_r+0x6c>
 8005cd2:	2e0a      	cmp	r6, #10
 8005cd4:	d104      	bne.n	8005ce0 <__swbuf_r+0x6c>
 8005cd6:	4621      	mov	r1, r4
 8005cd8:	4628      	mov	r0, r5
 8005cda:	f000 f923 	bl	8005f24 <_fflush_r>
 8005cde:	b988      	cbnz	r0, 8005d04 <__swbuf_r+0x90>
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ce4:	4b0a      	ldr	r3, [pc, #40]	; (8005d10 <__swbuf_r+0x9c>)
 8005ce6:	429c      	cmp	r4, r3
 8005ce8:	d101      	bne.n	8005cee <__swbuf_r+0x7a>
 8005cea:	68ac      	ldr	r4, [r5, #8]
 8005cec:	e7cf      	b.n	8005c8e <__swbuf_r+0x1a>
 8005cee:	4b09      	ldr	r3, [pc, #36]	; (8005d14 <__swbuf_r+0xa0>)
 8005cf0:	429c      	cmp	r4, r3
 8005cf2:	bf08      	it	eq
 8005cf4:	68ec      	ldreq	r4, [r5, #12]
 8005cf6:	e7ca      	b.n	8005c8e <__swbuf_r+0x1a>
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	f000 f81a 	bl	8005d34 <__swsetup_r>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	d0cb      	beq.n	8005c9c <__swbuf_r+0x28>
 8005d04:	f04f 37ff 	mov.w	r7, #4294967295
 8005d08:	e7ea      	b.n	8005ce0 <__swbuf_r+0x6c>
 8005d0a:	bf00      	nop
 8005d0c:	0800762c 	.word	0x0800762c
 8005d10:	0800764c 	.word	0x0800764c
 8005d14:	0800760c 	.word	0x0800760c

08005d18 <__ascii_wctomb>:
 8005d18:	4603      	mov	r3, r0
 8005d1a:	4608      	mov	r0, r1
 8005d1c:	b141      	cbz	r1, 8005d30 <__ascii_wctomb+0x18>
 8005d1e:	2aff      	cmp	r2, #255	; 0xff
 8005d20:	d904      	bls.n	8005d2c <__ascii_wctomb+0x14>
 8005d22:	228a      	movs	r2, #138	; 0x8a
 8005d24:	f04f 30ff 	mov.w	r0, #4294967295
 8005d28:	601a      	str	r2, [r3, #0]
 8005d2a:	4770      	bx	lr
 8005d2c:	2001      	movs	r0, #1
 8005d2e:	700a      	strb	r2, [r1, #0]
 8005d30:	4770      	bx	lr
	...

08005d34 <__swsetup_r>:
 8005d34:	4b32      	ldr	r3, [pc, #200]	; (8005e00 <__swsetup_r+0xcc>)
 8005d36:	b570      	push	{r4, r5, r6, lr}
 8005d38:	681d      	ldr	r5, [r3, #0]
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	460c      	mov	r4, r1
 8005d3e:	b125      	cbz	r5, 8005d4a <__swsetup_r+0x16>
 8005d40:	69ab      	ldr	r3, [r5, #24]
 8005d42:	b913      	cbnz	r3, 8005d4a <__swsetup_r+0x16>
 8005d44:	4628      	mov	r0, r5
 8005d46:	f000 f981 	bl	800604c <__sinit>
 8005d4a:	4b2e      	ldr	r3, [pc, #184]	; (8005e04 <__swsetup_r+0xd0>)
 8005d4c:	429c      	cmp	r4, r3
 8005d4e:	d10f      	bne.n	8005d70 <__swsetup_r+0x3c>
 8005d50:	686c      	ldr	r4, [r5, #4]
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d58:	0719      	lsls	r1, r3, #28
 8005d5a:	d42c      	bmi.n	8005db6 <__swsetup_r+0x82>
 8005d5c:	06dd      	lsls	r5, r3, #27
 8005d5e:	d411      	bmi.n	8005d84 <__swsetup_r+0x50>
 8005d60:	2309      	movs	r3, #9
 8005d62:	6033      	str	r3, [r6, #0]
 8005d64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d68:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6c:	81a3      	strh	r3, [r4, #12]
 8005d6e:	e03e      	b.n	8005dee <__swsetup_r+0xba>
 8005d70:	4b25      	ldr	r3, [pc, #148]	; (8005e08 <__swsetup_r+0xd4>)
 8005d72:	429c      	cmp	r4, r3
 8005d74:	d101      	bne.n	8005d7a <__swsetup_r+0x46>
 8005d76:	68ac      	ldr	r4, [r5, #8]
 8005d78:	e7eb      	b.n	8005d52 <__swsetup_r+0x1e>
 8005d7a:	4b24      	ldr	r3, [pc, #144]	; (8005e0c <__swsetup_r+0xd8>)
 8005d7c:	429c      	cmp	r4, r3
 8005d7e:	bf08      	it	eq
 8005d80:	68ec      	ldreq	r4, [r5, #12]
 8005d82:	e7e6      	b.n	8005d52 <__swsetup_r+0x1e>
 8005d84:	0758      	lsls	r0, r3, #29
 8005d86:	d512      	bpl.n	8005dae <__swsetup_r+0x7a>
 8005d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d8a:	b141      	cbz	r1, 8005d9e <__swsetup_r+0x6a>
 8005d8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d90:	4299      	cmp	r1, r3
 8005d92:	d002      	beq.n	8005d9a <__swsetup_r+0x66>
 8005d94:	4630      	mov	r0, r6
 8005d96:	f7ff fb37 	bl	8005408 <_free_r>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6363      	str	r3, [r4, #52]	; 0x34
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005da4:	81a3      	strh	r3, [r4, #12]
 8005da6:	2300      	movs	r3, #0
 8005da8:	6063      	str	r3, [r4, #4]
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	f043 0308 	orr.w	r3, r3, #8
 8005db4:	81a3      	strh	r3, [r4, #12]
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	b94b      	cbnz	r3, 8005dce <__swsetup_r+0x9a>
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dc4:	d003      	beq.n	8005dce <__swsetup_r+0x9a>
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f000 fa05 	bl	80061d8 <__smakebuf_r>
 8005dce:	89a0      	ldrh	r0, [r4, #12]
 8005dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dd4:	f010 0301 	ands.w	r3, r0, #1
 8005dd8:	d00a      	beq.n	8005df0 <__swsetup_r+0xbc>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60a3      	str	r3, [r4, #8]
 8005dde:	6963      	ldr	r3, [r4, #20]
 8005de0:	425b      	negs	r3, r3
 8005de2:	61a3      	str	r3, [r4, #24]
 8005de4:	6923      	ldr	r3, [r4, #16]
 8005de6:	b943      	cbnz	r3, 8005dfa <__swsetup_r+0xc6>
 8005de8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005dec:	d1ba      	bne.n	8005d64 <__swsetup_r+0x30>
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	0781      	lsls	r1, r0, #30
 8005df2:	bf58      	it	pl
 8005df4:	6963      	ldrpl	r3, [r4, #20]
 8005df6:	60a3      	str	r3, [r4, #8]
 8005df8:	e7f4      	b.n	8005de4 <__swsetup_r+0xb0>
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	e7f7      	b.n	8005dee <__swsetup_r+0xba>
 8005dfe:	bf00      	nop
 8005e00:	2000000c 	.word	0x2000000c
 8005e04:	0800762c 	.word	0x0800762c
 8005e08:	0800764c 	.word	0x0800764c
 8005e0c:	0800760c 	.word	0x0800760c

08005e10 <abort>:
 8005e10:	2006      	movs	r0, #6
 8005e12:	b508      	push	{r3, lr}
 8005e14:	f000 fa50 	bl	80062b8 <raise>
 8005e18:	2001      	movs	r0, #1
 8005e1a:	f7fb fdb3 	bl	8001984 <_exit>
	...

08005e20 <__sflush_r>:
 8005e20:	898a      	ldrh	r2, [r1, #12]
 8005e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e24:	4605      	mov	r5, r0
 8005e26:	0710      	lsls	r0, r2, #28
 8005e28:	460c      	mov	r4, r1
 8005e2a:	d457      	bmi.n	8005edc <__sflush_r+0xbc>
 8005e2c:	684b      	ldr	r3, [r1, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	dc04      	bgt.n	8005e3c <__sflush_r+0x1c>
 8005e32:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	dc01      	bgt.n	8005e3c <__sflush_r+0x1c>
 8005e38:	2000      	movs	r0, #0
 8005e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e3e:	2e00      	cmp	r6, #0
 8005e40:	d0fa      	beq.n	8005e38 <__sflush_r+0x18>
 8005e42:	2300      	movs	r3, #0
 8005e44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e48:	682f      	ldr	r7, [r5, #0]
 8005e4a:	602b      	str	r3, [r5, #0]
 8005e4c:	d032      	beq.n	8005eb4 <__sflush_r+0x94>
 8005e4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e50:	89a3      	ldrh	r3, [r4, #12]
 8005e52:	075a      	lsls	r2, r3, #29
 8005e54:	d505      	bpl.n	8005e62 <__sflush_r+0x42>
 8005e56:	6863      	ldr	r3, [r4, #4]
 8005e58:	1ac0      	subs	r0, r0, r3
 8005e5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e5c:	b10b      	cbz	r3, 8005e62 <__sflush_r+0x42>
 8005e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e60:	1ac0      	subs	r0, r0, r3
 8005e62:	2300      	movs	r3, #0
 8005e64:	4602      	mov	r2, r0
 8005e66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e68:	4628      	mov	r0, r5
 8005e6a:	6a21      	ldr	r1, [r4, #32]
 8005e6c:	47b0      	blx	r6
 8005e6e:	1c43      	adds	r3, r0, #1
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	d106      	bne.n	8005e82 <__sflush_r+0x62>
 8005e74:	6829      	ldr	r1, [r5, #0]
 8005e76:	291d      	cmp	r1, #29
 8005e78:	d82c      	bhi.n	8005ed4 <__sflush_r+0xb4>
 8005e7a:	4a29      	ldr	r2, [pc, #164]	; (8005f20 <__sflush_r+0x100>)
 8005e7c:	40ca      	lsrs	r2, r1
 8005e7e:	07d6      	lsls	r6, r2, #31
 8005e80:	d528      	bpl.n	8005ed4 <__sflush_r+0xb4>
 8005e82:	2200      	movs	r2, #0
 8005e84:	6062      	str	r2, [r4, #4]
 8005e86:	6922      	ldr	r2, [r4, #16]
 8005e88:	04d9      	lsls	r1, r3, #19
 8005e8a:	6022      	str	r2, [r4, #0]
 8005e8c:	d504      	bpl.n	8005e98 <__sflush_r+0x78>
 8005e8e:	1c42      	adds	r2, r0, #1
 8005e90:	d101      	bne.n	8005e96 <__sflush_r+0x76>
 8005e92:	682b      	ldr	r3, [r5, #0]
 8005e94:	b903      	cbnz	r3, 8005e98 <__sflush_r+0x78>
 8005e96:	6560      	str	r0, [r4, #84]	; 0x54
 8005e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e9a:	602f      	str	r7, [r5, #0]
 8005e9c:	2900      	cmp	r1, #0
 8005e9e:	d0cb      	beq.n	8005e38 <__sflush_r+0x18>
 8005ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ea4:	4299      	cmp	r1, r3
 8005ea6:	d002      	beq.n	8005eae <__sflush_r+0x8e>
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	f7ff faad 	bl	8005408 <_free_r>
 8005eae:	2000      	movs	r0, #0
 8005eb0:	6360      	str	r0, [r4, #52]	; 0x34
 8005eb2:	e7c2      	b.n	8005e3a <__sflush_r+0x1a>
 8005eb4:	6a21      	ldr	r1, [r4, #32]
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4628      	mov	r0, r5
 8005eba:	47b0      	blx	r6
 8005ebc:	1c41      	adds	r1, r0, #1
 8005ebe:	d1c7      	bne.n	8005e50 <__sflush_r+0x30>
 8005ec0:	682b      	ldr	r3, [r5, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0c4      	beq.n	8005e50 <__sflush_r+0x30>
 8005ec6:	2b1d      	cmp	r3, #29
 8005ec8:	d001      	beq.n	8005ece <__sflush_r+0xae>
 8005eca:	2b16      	cmp	r3, #22
 8005ecc:	d101      	bne.n	8005ed2 <__sflush_r+0xb2>
 8005ece:	602f      	str	r7, [r5, #0]
 8005ed0:	e7b2      	b.n	8005e38 <__sflush_r+0x18>
 8005ed2:	89a3      	ldrh	r3, [r4, #12]
 8005ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ed8:	81a3      	strh	r3, [r4, #12]
 8005eda:	e7ae      	b.n	8005e3a <__sflush_r+0x1a>
 8005edc:	690f      	ldr	r7, [r1, #16]
 8005ede:	2f00      	cmp	r7, #0
 8005ee0:	d0aa      	beq.n	8005e38 <__sflush_r+0x18>
 8005ee2:	0793      	lsls	r3, r2, #30
 8005ee4:	bf18      	it	ne
 8005ee6:	2300      	movne	r3, #0
 8005ee8:	680e      	ldr	r6, [r1, #0]
 8005eea:	bf08      	it	eq
 8005eec:	694b      	ldreq	r3, [r1, #20]
 8005eee:	1bf6      	subs	r6, r6, r7
 8005ef0:	600f      	str	r7, [r1, #0]
 8005ef2:	608b      	str	r3, [r1, #8]
 8005ef4:	2e00      	cmp	r6, #0
 8005ef6:	dd9f      	ble.n	8005e38 <__sflush_r+0x18>
 8005ef8:	4633      	mov	r3, r6
 8005efa:	463a      	mov	r2, r7
 8005efc:	4628      	mov	r0, r5
 8005efe:	6a21      	ldr	r1, [r4, #32]
 8005f00:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005f04:	47e0      	blx	ip
 8005f06:	2800      	cmp	r0, #0
 8005f08:	dc06      	bgt.n	8005f18 <__sflush_r+0xf8>
 8005f0a:	89a3      	ldrh	r3, [r4, #12]
 8005f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f14:	81a3      	strh	r3, [r4, #12]
 8005f16:	e790      	b.n	8005e3a <__sflush_r+0x1a>
 8005f18:	4407      	add	r7, r0
 8005f1a:	1a36      	subs	r6, r6, r0
 8005f1c:	e7ea      	b.n	8005ef4 <__sflush_r+0xd4>
 8005f1e:	bf00      	nop
 8005f20:	20400001 	.word	0x20400001

08005f24 <_fflush_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	690b      	ldr	r3, [r1, #16]
 8005f28:	4605      	mov	r5, r0
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	b913      	cbnz	r3, 8005f34 <_fflush_r+0x10>
 8005f2e:	2500      	movs	r5, #0
 8005f30:	4628      	mov	r0, r5
 8005f32:	bd38      	pop	{r3, r4, r5, pc}
 8005f34:	b118      	cbz	r0, 8005f3e <_fflush_r+0x1a>
 8005f36:	6983      	ldr	r3, [r0, #24]
 8005f38:	b90b      	cbnz	r3, 8005f3e <_fflush_r+0x1a>
 8005f3a:	f000 f887 	bl	800604c <__sinit>
 8005f3e:	4b14      	ldr	r3, [pc, #80]	; (8005f90 <_fflush_r+0x6c>)
 8005f40:	429c      	cmp	r4, r3
 8005f42:	d11b      	bne.n	8005f7c <_fflush_r+0x58>
 8005f44:	686c      	ldr	r4, [r5, #4]
 8005f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0ef      	beq.n	8005f2e <_fflush_r+0xa>
 8005f4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f50:	07d0      	lsls	r0, r2, #31
 8005f52:	d404      	bmi.n	8005f5e <_fflush_r+0x3a>
 8005f54:	0599      	lsls	r1, r3, #22
 8005f56:	d402      	bmi.n	8005f5e <_fflush_r+0x3a>
 8005f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f5a:	f000 f915 	bl	8006188 <__retarget_lock_acquire_recursive>
 8005f5e:	4628      	mov	r0, r5
 8005f60:	4621      	mov	r1, r4
 8005f62:	f7ff ff5d 	bl	8005e20 <__sflush_r>
 8005f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f68:	4605      	mov	r5, r0
 8005f6a:	07da      	lsls	r2, r3, #31
 8005f6c:	d4e0      	bmi.n	8005f30 <_fflush_r+0xc>
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	059b      	lsls	r3, r3, #22
 8005f72:	d4dd      	bmi.n	8005f30 <_fflush_r+0xc>
 8005f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f76:	f000 f908 	bl	800618a <__retarget_lock_release_recursive>
 8005f7a:	e7d9      	b.n	8005f30 <_fflush_r+0xc>
 8005f7c:	4b05      	ldr	r3, [pc, #20]	; (8005f94 <_fflush_r+0x70>)
 8005f7e:	429c      	cmp	r4, r3
 8005f80:	d101      	bne.n	8005f86 <_fflush_r+0x62>
 8005f82:	68ac      	ldr	r4, [r5, #8]
 8005f84:	e7df      	b.n	8005f46 <_fflush_r+0x22>
 8005f86:	4b04      	ldr	r3, [pc, #16]	; (8005f98 <_fflush_r+0x74>)
 8005f88:	429c      	cmp	r4, r3
 8005f8a:	bf08      	it	eq
 8005f8c:	68ec      	ldreq	r4, [r5, #12]
 8005f8e:	e7da      	b.n	8005f46 <_fflush_r+0x22>
 8005f90:	0800762c 	.word	0x0800762c
 8005f94:	0800764c 	.word	0x0800764c
 8005f98:	0800760c 	.word	0x0800760c

08005f9c <std>:
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	b510      	push	{r4, lr}
 8005fa0:	4604      	mov	r4, r0
 8005fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8005fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005faa:	6083      	str	r3, [r0, #8]
 8005fac:	8181      	strh	r1, [r0, #12]
 8005fae:	6643      	str	r3, [r0, #100]	; 0x64
 8005fb0:	81c2      	strh	r2, [r0, #14]
 8005fb2:	6183      	str	r3, [r0, #24]
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	305c      	adds	r0, #92	; 0x5c
 8005fba:	f7fd fb4f 	bl	800365c <memset>
 8005fbe:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <std+0x38>)
 8005fc0:	6224      	str	r4, [r4, #32]
 8005fc2:	6263      	str	r3, [r4, #36]	; 0x24
 8005fc4:	4b04      	ldr	r3, [pc, #16]	; (8005fd8 <std+0x3c>)
 8005fc6:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fc8:	4b04      	ldr	r3, [pc, #16]	; (8005fdc <std+0x40>)
 8005fca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fcc:	4b04      	ldr	r3, [pc, #16]	; (8005fe0 <std+0x44>)
 8005fce:	6323      	str	r3, [r4, #48]	; 0x30
 8005fd0:	bd10      	pop	{r4, pc}
 8005fd2:	bf00      	nop
 8005fd4:	080062f1 	.word	0x080062f1
 8005fd8:	08006313 	.word	0x08006313
 8005fdc:	0800634b 	.word	0x0800634b
 8005fe0:	0800636f 	.word	0x0800636f

08005fe4 <_cleanup_r>:
 8005fe4:	4901      	ldr	r1, [pc, #4]	; (8005fec <_cleanup_r+0x8>)
 8005fe6:	f000 b8af 	b.w	8006148 <_fwalk_reent>
 8005fea:	bf00      	nop
 8005fec:	08005f25 	.word	0x08005f25

08005ff0 <__sfmoreglue>:
 8005ff0:	2268      	movs	r2, #104	; 0x68
 8005ff2:	b570      	push	{r4, r5, r6, lr}
 8005ff4:	1e4d      	subs	r5, r1, #1
 8005ff6:	4355      	muls	r5, r2
 8005ff8:	460e      	mov	r6, r1
 8005ffa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ffe:	f7ff fa6b 	bl	80054d8 <_malloc_r>
 8006002:	4604      	mov	r4, r0
 8006004:	b140      	cbz	r0, 8006018 <__sfmoreglue+0x28>
 8006006:	2100      	movs	r1, #0
 8006008:	e9c0 1600 	strd	r1, r6, [r0]
 800600c:	300c      	adds	r0, #12
 800600e:	60a0      	str	r0, [r4, #8]
 8006010:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006014:	f7fd fb22 	bl	800365c <memset>
 8006018:	4620      	mov	r0, r4
 800601a:	bd70      	pop	{r4, r5, r6, pc}

0800601c <__sfp_lock_acquire>:
 800601c:	4801      	ldr	r0, [pc, #4]	; (8006024 <__sfp_lock_acquire+0x8>)
 800601e:	f000 b8b3 	b.w	8006188 <__retarget_lock_acquire_recursive>
 8006022:	bf00      	nop
 8006024:	2000023d 	.word	0x2000023d

08006028 <__sfp_lock_release>:
 8006028:	4801      	ldr	r0, [pc, #4]	; (8006030 <__sfp_lock_release+0x8>)
 800602a:	f000 b8ae 	b.w	800618a <__retarget_lock_release_recursive>
 800602e:	bf00      	nop
 8006030:	2000023d 	.word	0x2000023d

08006034 <__sinit_lock_acquire>:
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <__sinit_lock_acquire+0x8>)
 8006036:	f000 b8a7 	b.w	8006188 <__retarget_lock_acquire_recursive>
 800603a:	bf00      	nop
 800603c:	2000023e 	.word	0x2000023e

08006040 <__sinit_lock_release>:
 8006040:	4801      	ldr	r0, [pc, #4]	; (8006048 <__sinit_lock_release+0x8>)
 8006042:	f000 b8a2 	b.w	800618a <__retarget_lock_release_recursive>
 8006046:	bf00      	nop
 8006048:	2000023e 	.word	0x2000023e

0800604c <__sinit>:
 800604c:	b510      	push	{r4, lr}
 800604e:	4604      	mov	r4, r0
 8006050:	f7ff fff0 	bl	8006034 <__sinit_lock_acquire>
 8006054:	69a3      	ldr	r3, [r4, #24]
 8006056:	b11b      	cbz	r3, 8006060 <__sinit+0x14>
 8006058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800605c:	f7ff bff0 	b.w	8006040 <__sinit_lock_release>
 8006060:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006064:	6523      	str	r3, [r4, #80]	; 0x50
 8006066:	4b13      	ldr	r3, [pc, #76]	; (80060b4 <__sinit+0x68>)
 8006068:	4a13      	ldr	r2, [pc, #76]	; (80060b8 <__sinit+0x6c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	62a2      	str	r2, [r4, #40]	; 0x28
 800606e:	42a3      	cmp	r3, r4
 8006070:	bf08      	it	eq
 8006072:	2301      	moveq	r3, #1
 8006074:	4620      	mov	r0, r4
 8006076:	bf08      	it	eq
 8006078:	61a3      	streq	r3, [r4, #24]
 800607a:	f000 f81f 	bl	80060bc <__sfp>
 800607e:	6060      	str	r0, [r4, #4]
 8006080:	4620      	mov	r0, r4
 8006082:	f000 f81b 	bl	80060bc <__sfp>
 8006086:	60a0      	str	r0, [r4, #8]
 8006088:	4620      	mov	r0, r4
 800608a:	f000 f817 	bl	80060bc <__sfp>
 800608e:	2200      	movs	r2, #0
 8006090:	2104      	movs	r1, #4
 8006092:	60e0      	str	r0, [r4, #12]
 8006094:	6860      	ldr	r0, [r4, #4]
 8006096:	f7ff ff81 	bl	8005f9c <std>
 800609a:	2201      	movs	r2, #1
 800609c:	2109      	movs	r1, #9
 800609e:	68a0      	ldr	r0, [r4, #8]
 80060a0:	f7ff ff7c 	bl	8005f9c <std>
 80060a4:	2202      	movs	r2, #2
 80060a6:	2112      	movs	r1, #18
 80060a8:	68e0      	ldr	r0, [r4, #12]
 80060aa:	f7ff ff77 	bl	8005f9c <std>
 80060ae:	2301      	movs	r3, #1
 80060b0:	61a3      	str	r3, [r4, #24]
 80060b2:	e7d1      	b.n	8006058 <__sinit+0xc>
 80060b4:	08007290 	.word	0x08007290
 80060b8:	08005fe5 	.word	0x08005fe5

080060bc <__sfp>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	4607      	mov	r7, r0
 80060c0:	f7ff ffac 	bl	800601c <__sfp_lock_acquire>
 80060c4:	4b1e      	ldr	r3, [pc, #120]	; (8006140 <__sfp+0x84>)
 80060c6:	681e      	ldr	r6, [r3, #0]
 80060c8:	69b3      	ldr	r3, [r6, #24]
 80060ca:	b913      	cbnz	r3, 80060d2 <__sfp+0x16>
 80060cc:	4630      	mov	r0, r6
 80060ce:	f7ff ffbd 	bl	800604c <__sinit>
 80060d2:	3648      	adds	r6, #72	; 0x48
 80060d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060d8:	3b01      	subs	r3, #1
 80060da:	d503      	bpl.n	80060e4 <__sfp+0x28>
 80060dc:	6833      	ldr	r3, [r6, #0]
 80060de:	b30b      	cbz	r3, 8006124 <__sfp+0x68>
 80060e0:	6836      	ldr	r6, [r6, #0]
 80060e2:	e7f7      	b.n	80060d4 <__sfp+0x18>
 80060e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80060e8:	b9d5      	cbnz	r5, 8006120 <__sfp+0x64>
 80060ea:	4b16      	ldr	r3, [pc, #88]	; (8006144 <__sfp+0x88>)
 80060ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80060f0:	60e3      	str	r3, [r4, #12]
 80060f2:	6665      	str	r5, [r4, #100]	; 0x64
 80060f4:	f000 f847 	bl	8006186 <__retarget_lock_init_recursive>
 80060f8:	f7ff ff96 	bl	8006028 <__sfp_lock_release>
 80060fc:	2208      	movs	r2, #8
 80060fe:	4629      	mov	r1, r5
 8006100:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006104:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006108:	6025      	str	r5, [r4, #0]
 800610a:	61a5      	str	r5, [r4, #24]
 800610c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006110:	f7fd faa4 	bl	800365c <memset>
 8006114:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006118:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800611c:	4620      	mov	r0, r4
 800611e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006120:	3468      	adds	r4, #104	; 0x68
 8006122:	e7d9      	b.n	80060d8 <__sfp+0x1c>
 8006124:	2104      	movs	r1, #4
 8006126:	4638      	mov	r0, r7
 8006128:	f7ff ff62 	bl	8005ff0 <__sfmoreglue>
 800612c:	4604      	mov	r4, r0
 800612e:	6030      	str	r0, [r6, #0]
 8006130:	2800      	cmp	r0, #0
 8006132:	d1d5      	bne.n	80060e0 <__sfp+0x24>
 8006134:	f7ff ff78 	bl	8006028 <__sfp_lock_release>
 8006138:	230c      	movs	r3, #12
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	e7ee      	b.n	800611c <__sfp+0x60>
 800613e:	bf00      	nop
 8006140:	08007290 	.word	0x08007290
 8006144:	ffff0001 	.word	0xffff0001

08006148 <_fwalk_reent>:
 8006148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800614c:	4606      	mov	r6, r0
 800614e:	4688      	mov	r8, r1
 8006150:	2700      	movs	r7, #0
 8006152:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006156:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800615a:	f1b9 0901 	subs.w	r9, r9, #1
 800615e:	d505      	bpl.n	800616c <_fwalk_reent+0x24>
 8006160:	6824      	ldr	r4, [r4, #0]
 8006162:	2c00      	cmp	r4, #0
 8006164:	d1f7      	bne.n	8006156 <_fwalk_reent+0xe>
 8006166:	4638      	mov	r0, r7
 8006168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800616c:	89ab      	ldrh	r3, [r5, #12]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d907      	bls.n	8006182 <_fwalk_reent+0x3a>
 8006172:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006176:	3301      	adds	r3, #1
 8006178:	d003      	beq.n	8006182 <_fwalk_reent+0x3a>
 800617a:	4629      	mov	r1, r5
 800617c:	4630      	mov	r0, r6
 800617e:	47c0      	blx	r8
 8006180:	4307      	orrs	r7, r0
 8006182:	3568      	adds	r5, #104	; 0x68
 8006184:	e7e9      	b.n	800615a <_fwalk_reent+0x12>

08006186 <__retarget_lock_init_recursive>:
 8006186:	4770      	bx	lr

08006188 <__retarget_lock_acquire_recursive>:
 8006188:	4770      	bx	lr

0800618a <__retarget_lock_release_recursive>:
 800618a:	4770      	bx	lr

0800618c <__swhatbuf_r>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	460e      	mov	r6, r1
 8006190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006194:	4614      	mov	r4, r2
 8006196:	2900      	cmp	r1, #0
 8006198:	461d      	mov	r5, r3
 800619a:	b096      	sub	sp, #88	; 0x58
 800619c:	da08      	bge.n	80061b0 <__swhatbuf_r+0x24>
 800619e:	2200      	movs	r2, #0
 80061a0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80061a4:	602a      	str	r2, [r5, #0]
 80061a6:	061a      	lsls	r2, r3, #24
 80061a8:	d410      	bmi.n	80061cc <__swhatbuf_r+0x40>
 80061aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ae:	e00e      	b.n	80061ce <__swhatbuf_r+0x42>
 80061b0:	466a      	mov	r2, sp
 80061b2:	f000 f903 	bl	80063bc <_fstat_r>
 80061b6:	2800      	cmp	r0, #0
 80061b8:	dbf1      	blt.n	800619e <__swhatbuf_r+0x12>
 80061ba:	9a01      	ldr	r2, [sp, #4]
 80061bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80061c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80061c4:	425a      	negs	r2, r3
 80061c6:	415a      	adcs	r2, r3
 80061c8:	602a      	str	r2, [r5, #0]
 80061ca:	e7ee      	b.n	80061aa <__swhatbuf_r+0x1e>
 80061cc:	2340      	movs	r3, #64	; 0x40
 80061ce:	2000      	movs	r0, #0
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	b016      	add	sp, #88	; 0x58
 80061d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080061d8 <__smakebuf_r>:
 80061d8:	898b      	ldrh	r3, [r1, #12]
 80061da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061dc:	079d      	lsls	r5, r3, #30
 80061de:	4606      	mov	r6, r0
 80061e0:	460c      	mov	r4, r1
 80061e2:	d507      	bpl.n	80061f4 <__smakebuf_r+0x1c>
 80061e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	6123      	str	r3, [r4, #16]
 80061ec:	2301      	movs	r3, #1
 80061ee:	6163      	str	r3, [r4, #20]
 80061f0:	b002      	add	sp, #8
 80061f2:	bd70      	pop	{r4, r5, r6, pc}
 80061f4:	466a      	mov	r2, sp
 80061f6:	ab01      	add	r3, sp, #4
 80061f8:	f7ff ffc8 	bl	800618c <__swhatbuf_r>
 80061fc:	9900      	ldr	r1, [sp, #0]
 80061fe:	4605      	mov	r5, r0
 8006200:	4630      	mov	r0, r6
 8006202:	f7ff f969 	bl	80054d8 <_malloc_r>
 8006206:	b948      	cbnz	r0, 800621c <__smakebuf_r+0x44>
 8006208:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800620c:	059a      	lsls	r2, r3, #22
 800620e:	d4ef      	bmi.n	80061f0 <__smakebuf_r+0x18>
 8006210:	f023 0303 	bic.w	r3, r3, #3
 8006214:	f043 0302 	orr.w	r3, r3, #2
 8006218:	81a3      	strh	r3, [r4, #12]
 800621a:	e7e3      	b.n	80061e4 <__smakebuf_r+0xc>
 800621c:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <__smakebuf_r+0x7c>)
 800621e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006220:	89a3      	ldrh	r3, [r4, #12]
 8006222:	6020      	str	r0, [r4, #0]
 8006224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006228:	81a3      	strh	r3, [r4, #12]
 800622a:	9b00      	ldr	r3, [sp, #0]
 800622c:	6120      	str	r0, [r4, #16]
 800622e:	6163      	str	r3, [r4, #20]
 8006230:	9b01      	ldr	r3, [sp, #4]
 8006232:	b15b      	cbz	r3, 800624c <__smakebuf_r+0x74>
 8006234:	4630      	mov	r0, r6
 8006236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800623a:	f000 f8d1 	bl	80063e0 <_isatty_r>
 800623e:	b128      	cbz	r0, 800624c <__smakebuf_r+0x74>
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	f023 0303 	bic.w	r3, r3, #3
 8006246:	f043 0301 	orr.w	r3, r3, #1
 800624a:	81a3      	strh	r3, [r4, #12]
 800624c:	89a0      	ldrh	r0, [r4, #12]
 800624e:	4305      	orrs	r5, r0
 8006250:	81a5      	strh	r5, [r4, #12]
 8006252:	e7cd      	b.n	80061f0 <__smakebuf_r+0x18>
 8006254:	08005fe5 	.word	0x08005fe5

08006258 <_malloc_usable_size_r>:
 8006258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800625c:	1f18      	subs	r0, r3, #4
 800625e:	2b00      	cmp	r3, #0
 8006260:	bfbc      	itt	lt
 8006262:	580b      	ldrlt	r3, [r1, r0]
 8006264:	18c0      	addlt	r0, r0, r3
 8006266:	4770      	bx	lr

08006268 <_raise_r>:
 8006268:	291f      	cmp	r1, #31
 800626a:	b538      	push	{r3, r4, r5, lr}
 800626c:	4604      	mov	r4, r0
 800626e:	460d      	mov	r5, r1
 8006270:	d904      	bls.n	800627c <_raise_r+0x14>
 8006272:	2316      	movs	r3, #22
 8006274:	6003      	str	r3, [r0, #0]
 8006276:	f04f 30ff 	mov.w	r0, #4294967295
 800627a:	bd38      	pop	{r3, r4, r5, pc}
 800627c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800627e:	b112      	cbz	r2, 8006286 <_raise_r+0x1e>
 8006280:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006284:	b94b      	cbnz	r3, 800629a <_raise_r+0x32>
 8006286:	4620      	mov	r0, r4
 8006288:	f000 f830 	bl	80062ec <_getpid_r>
 800628c:	462a      	mov	r2, r5
 800628e:	4601      	mov	r1, r0
 8006290:	4620      	mov	r0, r4
 8006292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006296:	f000 b817 	b.w	80062c8 <_kill_r>
 800629a:	2b01      	cmp	r3, #1
 800629c:	d00a      	beq.n	80062b4 <_raise_r+0x4c>
 800629e:	1c59      	adds	r1, r3, #1
 80062a0:	d103      	bne.n	80062aa <_raise_r+0x42>
 80062a2:	2316      	movs	r3, #22
 80062a4:	6003      	str	r3, [r0, #0]
 80062a6:	2001      	movs	r0, #1
 80062a8:	e7e7      	b.n	800627a <_raise_r+0x12>
 80062aa:	2400      	movs	r4, #0
 80062ac:	4628      	mov	r0, r5
 80062ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80062b2:	4798      	blx	r3
 80062b4:	2000      	movs	r0, #0
 80062b6:	e7e0      	b.n	800627a <_raise_r+0x12>

080062b8 <raise>:
 80062b8:	4b02      	ldr	r3, [pc, #8]	; (80062c4 <raise+0xc>)
 80062ba:	4601      	mov	r1, r0
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	f7ff bfd3 	b.w	8006268 <_raise_r>
 80062c2:	bf00      	nop
 80062c4:	2000000c 	.word	0x2000000c

080062c8 <_kill_r>:
 80062c8:	b538      	push	{r3, r4, r5, lr}
 80062ca:	2300      	movs	r3, #0
 80062cc:	4d06      	ldr	r5, [pc, #24]	; (80062e8 <_kill_r+0x20>)
 80062ce:	4604      	mov	r4, r0
 80062d0:	4608      	mov	r0, r1
 80062d2:	4611      	mov	r1, r2
 80062d4:	602b      	str	r3, [r5, #0]
 80062d6:	f7fb fb45 	bl	8001964 <_kill>
 80062da:	1c43      	adds	r3, r0, #1
 80062dc:	d102      	bne.n	80062e4 <_kill_r+0x1c>
 80062de:	682b      	ldr	r3, [r5, #0]
 80062e0:	b103      	cbz	r3, 80062e4 <_kill_r+0x1c>
 80062e2:	6023      	str	r3, [r4, #0]
 80062e4:	bd38      	pop	{r3, r4, r5, pc}
 80062e6:	bf00      	nop
 80062e8:	20000238 	.word	0x20000238

080062ec <_getpid_r>:
 80062ec:	f7fb bb33 	b.w	8001956 <_getpid>

080062f0 <__sread>:
 80062f0:	b510      	push	{r4, lr}
 80062f2:	460c      	mov	r4, r1
 80062f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062f8:	f000 f894 	bl	8006424 <_read_r>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	bfab      	itete	ge
 8006300:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006302:	89a3      	ldrhlt	r3, [r4, #12]
 8006304:	181b      	addge	r3, r3, r0
 8006306:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800630a:	bfac      	ite	ge
 800630c:	6563      	strge	r3, [r4, #84]	; 0x54
 800630e:	81a3      	strhlt	r3, [r4, #12]
 8006310:	bd10      	pop	{r4, pc}

08006312 <__swrite>:
 8006312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006316:	461f      	mov	r7, r3
 8006318:	898b      	ldrh	r3, [r1, #12]
 800631a:	4605      	mov	r5, r0
 800631c:	05db      	lsls	r3, r3, #23
 800631e:	460c      	mov	r4, r1
 8006320:	4616      	mov	r6, r2
 8006322:	d505      	bpl.n	8006330 <__swrite+0x1e>
 8006324:	2302      	movs	r3, #2
 8006326:	2200      	movs	r2, #0
 8006328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800632c:	f000 f868 	bl	8006400 <_lseek_r>
 8006330:	89a3      	ldrh	r3, [r4, #12]
 8006332:	4632      	mov	r2, r6
 8006334:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006338:	81a3      	strh	r3, [r4, #12]
 800633a:	4628      	mov	r0, r5
 800633c:	463b      	mov	r3, r7
 800633e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006346:	f000 b817 	b.w	8006378 <_write_r>

0800634a <__sseek>:
 800634a:	b510      	push	{r4, lr}
 800634c:	460c      	mov	r4, r1
 800634e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006352:	f000 f855 	bl	8006400 <_lseek_r>
 8006356:	1c43      	adds	r3, r0, #1
 8006358:	89a3      	ldrh	r3, [r4, #12]
 800635a:	bf15      	itete	ne
 800635c:	6560      	strne	r0, [r4, #84]	; 0x54
 800635e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006362:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006366:	81a3      	strheq	r3, [r4, #12]
 8006368:	bf18      	it	ne
 800636a:	81a3      	strhne	r3, [r4, #12]
 800636c:	bd10      	pop	{r4, pc}

0800636e <__sclose>:
 800636e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006372:	f000 b813 	b.w	800639c <_close_r>
	...

08006378 <_write_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4604      	mov	r4, r0
 800637c:	4608      	mov	r0, r1
 800637e:	4611      	mov	r1, r2
 8006380:	2200      	movs	r2, #0
 8006382:	4d05      	ldr	r5, [pc, #20]	; (8006398 <_write_r+0x20>)
 8006384:	602a      	str	r2, [r5, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	f7fb fb23 	bl	80019d2 <_write>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_write_r+0x1e>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_write_r+0x1e>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	20000238 	.word	0x20000238

0800639c <_close_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	2300      	movs	r3, #0
 80063a0:	4d05      	ldr	r5, [pc, #20]	; (80063b8 <_close_r+0x1c>)
 80063a2:	4604      	mov	r4, r0
 80063a4:	4608      	mov	r0, r1
 80063a6:	602b      	str	r3, [r5, #0]
 80063a8:	f7fb fb2f 	bl	8001a0a <_close>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	d102      	bne.n	80063b6 <_close_r+0x1a>
 80063b0:	682b      	ldr	r3, [r5, #0]
 80063b2:	b103      	cbz	r3, 80063b6 <_close_r+0x1a>
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	bd38      	pop	{r3, r4, r5, pc}
 80063b8:	20000238 	.word	0x20000238

080063bc <_fstat_r>:
 80063bc:	b538      	push	{r3, r4, r5, lr}
 80063be:	2300      	movs	r3, #0
 80063c0:	4d06      	ldr	r5, [pc, #24]	; (80063dc <_fstat_r+0x20>)
 80063c2:	4604      	mov	r4, r0
 80063c4:	4608      	mov	r0, r1
 80063c6:	4611      	mov	r1, r2
 80063c8:	602b      	str	r3, [r5, #0]
 80063ca:	f7fb fb29 	bl	8001a20 <_fstat>
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	d102      	bne.n	80063d8 <_fstat_r+0x1c>
 80063d2:	682b      	ldr	r3, [r5, #0]
 80063d4:	b103      	cbz	r3, 80063d8 <_fstat_r+0x1c>
 80063d6:	6023      	str	r3, [r4, #0]
 80063d8:	bd38      	pop	{r3, r4, r5, pc}
 80063da:	bf00      	nop
 80063dc:	20000238 	.word	0x20000238

080063e0 <_isatty_r>:
 80063e0:	b538      	push	{r3, r4, r5, lr}
 80063e2:	2300      	movs	r3, #0
 80063e4:	4d05      	ldr	r5, [pc, #20]	; (80063fc <_isatty_r+0x1c>)
 80063e6:	4604      	mov	r4, r0
 80063e8:	4608      	mov	r0, r1
 80063ea:	602b      	str	r3, [r5, #0]
 80063ec:	f7fb fb27 	bl	8001a3e <_isatty>
 80063f0:	1c43      	adds	r3, r0, #1
 80063f2:	d102      	bne.n	80063fa <_isatty_r+0x1a>
 80063f4:	682b      	ldr	r3, [r5, #0]
 80063f6:	b103      	cbz	r3, 80063fa <_isatty_r+0x1a>
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	bd38      	pop	{r3, r4, r5, pc}
 80063fc:	20000238 	.word	0x20000238

08006400 <_lseek_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4604      	mov	r4, r0
 8006404:	4608      	mov	r0, r1
 8006406:	4611      	mov	r1, r2
 8006408:	2200      	movs	r2, #0
 800640a:	4d05      	ldr	r5, [pc, #20]	; (8006420 <_lseek_r+0x20>)
 800640c:	602a      	str	r2, [r5, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	f7fb fb1f 	bl	8001a52 <_lseek>
 8006414:	1c43      	adds	r3, r0, #1
 8006416:	d102      	bne.n	800641e <_lseek_r+0x1e>
 8006418:	682b      	ldr	r3, [r5, #0]
 800641a:	b103      	cbz	r3, 800641e <_lseek_r+0x1e>
 800641c:	6023      	str	r3, [r4, #0]
 800641e:	bd38      	pop	{r3, r4, r5, pc}
 8006420:	20000238 	.word	0x20000238

08006424 <_read_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	4604      	mov	r4, r0
 8006428:	4608      	mov	r0, r1
 800642a:	4611      	mov	r1, r2
 800642c:	2200      	movs	r2, #0
 800642e:	4d05      	ldr	r5, [pc, #20]	; (8006444 <_read_r+0x20>)
 8006430:	602a      	str	r2, [r5, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	f7fb fab0 	bl	8001998 <_read>
 8006438:	1c43      	adds	r3, r0, #1
 800643a:	d102      	bne.n	8006442 <_read_r+0x1e>
 800643c:	682b      	ldr	r3, [r5, #0]
 800643e:	b103      	cbz	r3, 8006442 <_read_r+0x1e>
 8006440:	6023      	str	r3, [r4, #0]
 8006442:	bd38      	pop	{r3, r4, r5, pc}
 8006444:	20000238 	.word	0x20000238

08006448 <cosf>:
 8006448:	b507      	push	{r0, r1, r2, lr}
 800644a:	4a1a      	ldr	r2, [pc, #104]	; (80064b4 <cosf+0x6c>)
 800644c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8006450:	4293      	cmp	r3, r2
 8006452:	4601      	mov	r1, r0
 8006454:	dc05      	bgt.n	8006462 <cosf+0x1a>
 8006456:	2100      	movs	r1, #0
 8006458:	b003      	add	sp, #12
 800645a:	f85d eb04 	ldr.w	lr, [sp], #4
 800645e:	f000 ba97 	b.w	8006990 <__kernel_cosf>
 8006462:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006466:	db04      	blt.n	8006472 <cosf+0x2a>
 8006468:	f7fa fb62 	bl	8000b30 <__aeabi_fsub>
 800646c:	b003      	add	sp, #12
 800646e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006472:	4669      	mov	r1, sp
 8006474:	f000 f92e 	bl	80066d4 <__ieee754_rem_pio2f>
 8006478:	f000 0203 	and.w	r2, r0, #3
 800647c:	2a01      	cmp	r2, #1
 800647e:	d007      	beq.n	8006490 <cosf+0x48>
 8006480:	2a02      	cmp	r2, #2
 8006482:	d00c      	beq.n	800649e <cosf+0x56>
 8006484:	b982      	cbnz	r2, 80064a8 <cosf+0x60>
 8006486:	9901      	ldr	r1, [sp, #4]
 8006488:	9800      	ldr	r0, [sp, #0]
 800648a:	f000 fa81 	bl	8006990 <__kernel_cosf>
 800648e:	e7ed      	b.n	800646c <cosf+0x24>
 8006490:	9901      	ldr	r1, [sp, #4]
 8006492:	9800      	ldr	r0, [sp, #0]
 8006494:	f000 fdae 	bl	8006ff4 <__kernel_sinf>
 8006498:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800649c:	e7e6      	b.n	800646c <cosf+0x24>
 800649e:	9901      	ldr	r1, [sp, #4]
 80064a0:	9800      	ldr	r0, [sp, #0]
 80064a2:	f000 fa75 	bl	8006990 <__kernel_cosf>
 80064a6:	e7f7      	b.n	8006498 <cosf+0x50>
 80064a8:	2201      	movs	r2, #1
 80064aa:	9901      	ldr	r1, [sp, #4]
 80064ac:	9800      	ldr	r0, [sp, #0]
 80064ae:	f000 fda1 	bl	8006ff4 <__kernel_sinf>
 80064b2:	e7db      	b.n	800646c <cosf+0x24>
 80064b4:	3f490fd8 	.word	0x3f490fd8

080064b8 <sinf>:
 80064b8:	b507      	push	{r0, r1, r2, lr}
 80064ba:	4a1b      	ldr	r2, [pc, #108]	; (8006528 <sinf+0x70>)
 80064bc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80064c0:	4293      	cmp	r3, r2
 80064c2:	4601      	mov	r1, r0
 80064c4:	dc06      	bgt.n	80064d4 <sinf+0x1c>
 80064c6:	2200      	movs	r2, #0
 80064c8:	2100      	movs	r1, #0
 80064ca:	b003      	add	sp, #12
 80064cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80064d0:	f000 bd90 	b.w	8006ff4 <__kernel_sinf>
 80064d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80064d8:	db04      	blt.n	80064e4 <sinf+0x2c>
 80064da:	f7fa fb29 	bl	8000b30 <__aeabi_fsub>
 80064de:	b003      	add	sp, #12
 80064e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80064e4:	4669      	mov	r1, sp
 80064e6:	f000 f8f5 	bl	80066d4 <__ieee754_rem_pio2f>
 80064ea:	f000 0003 	and.w	r0, r0, #3
 80064ee:	2801      	cmp	r0, #1
 80064f0:	d008      	beq.n	8006504 <sinf+0x4c>
 80064f2:	2802      	cmp	r0, #2
 80064f4:	d00b      	beq.n	800650e <sinf+0x56>
 80064f6:	b990      	cbnz	r0, 800651e <sinf+0x66>
 80064f8:	2201      	movs	r2, #1
 80064fa:	9901      	ldr	r1, [sp, #4]
 80064fc:	9800      	ldr	r0, [sp, #0]
 80064fe:	f000 fd79 	bl	8006ff4 <__kernel_sinf>
 8006502:	e7ec      	b.n	80064de <sinf+0x26>
 8006504:	9901      	ldr	r1, [sp, #4]
 8006506:	9800      	ldr	r0, [sp, #0]
 8006508:	f000 fa42 	bl	8006990 <__kernel_cosf>
 800650c:	e7e7      	b.n	80064de <sinf+0x26>
 800650e:	2201      	movs	r2, #1
 8006510:	9901      	ldr	r1, [sp, #4]
 8006512:	9800      	ldr	r0, [sp, #0]
 8006514:	f000 fd6e 	bl	8006ff4 <__kernel_sinf>
 8006518:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800651c:	e7df      	b.n	80064de <sinf+0x26>
 800651e:	9901      	ldr	r1, [sp, #4]
 8006520:	9800      	ldr	r0, [sp, #0]
 8006522:	f000 fa35 	bl	8006990 <__kernel_cosf>
 8006526:	e7f7      	b.n	8006518 <sinf+0x60>
 8006528:	3f490fd8 	.word	0x3f490fd8

0800652c <sqrt>:
 800652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652e:	4606      	mov	r6, r0
 8006530:	460f      	mov	r7, r1
 8006532:	f000 f81f 	bl	8006574 <__ieee754_sqrt>
 8006536:	4632      	mov	r2, r6
 8006538:	4604      	mov	r4, r0
 800653a:	460d      	mov	r5, r1
 800653c:	463b      	mov	r3, r7
 800653e:	4630      	mov	r0, r6
 8006540:	4639      	mov	r1, r7
 8006542:	f7fa fa63 	bl	8000a0c <__aeabi_dcmpun>
 8006546:	b990      	cbnz	r0, 800656e <sqrt+0x42>
 8006548:	2200      	movs	r2, #0
 800654a:	2300      	movs	r3, #0
 800654c:	4630      	mov	r0, r6
 800654e:	4639      	mov	r1, r7
 8006550:	f7fa fa34 	bl	80009bc <__aeabi_dcmplt>
 8006554:	b158      	cbz	r0, 800656e <sqrt+0x42>
 8006556:	f7fd f857 	bl	8003608 <__errno>
 800655a:	2321      	movs	r3, #33	; 0x21
 800655c:	2200      	movs	r2, #0
 800655e:	6003      	str	r3, [r0, #0]
 8006560:	2300      	movs	r3, #0
 8006562:	4610      	mov	r0, r2
 8006564:	4619      	mov	r1, r3
 8006566:	f7fa f8e1 	bl	800072c <__aeabi_ddiv>
 800656a:	4604      	mov	r4, r0
 800656c:	460d      	mov	r5, r1
 800656e:	4620      	mov	r0, r4
 8006570:	4629      	mov	r1, r5
 8006572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006574 <__ieee754_sqrt>:
 8006574:	f8df c158 	ldr.w	ip, [pc, #344]	; 80066d0 <__ieee754_sqrt+0x15c>
 8006578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800657c:	ea3c 0c01 	bics.w	ip, ip, r1
 8006580:	4606      	mov	r6, r0
 8006582:	460d      	mov	r5, r1
 8006584:	460c      	mov	r4, r1
 8006586:	460a      	mov	r2, r1
 8006588:	4607      	mov	r7, r0
 800658a:	4603      	mov	r3, r0
 800658c:	d10f      	bne.n	80065ae <__ieee754_sqrt+0x3a>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	f7f9 ffa1 	bl	80004d8 <__aeabi_dmul>
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	4630      	mov	r0, r6
 800659c:	4629      	mov	r1, r5
 800659e:	f7f9 fde5 	bl	800016c <__adddf3>
 80065a2:	4606      	mov	r6, r0
 80065a4:	460d      	mov	r5, r1
 80065a6:	4630      	mov	r0, r6
 80065a8:	4629      	mov	r1, r5
 80065aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065ae:	2900      	cmp	r1, #0
 80065b0:	dc0e      	bgt.n	80065d0 <__ieee754_sqrt+0x5c>
 80065b2:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80065b6:	ea5c 0707 	orrs.w	r7, ip, r7
 80065ba:	d0f4      	beq.n	80065a6 <__ieee754_sqrt+0x32>
 80065bc:	b141      	cbz	r1, 80065d0 <__ieee754_sqrt+0x5c>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	f7f9 fdd1 	bl	8000168 <__aeabi_dsub>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
 80065ca:	f7fa f8af 	bl	800072c <__aeabi_ddiv>
 80065ce:	e7e8      	b.n	80065a2 <__ieee754_sqrt+0x2e>
 80065d0:	1521      	asrs	r1, r4, #20
 80065d2:	d075      	beq.n	80066c0 <__ieee754_sqrt+0x14c>
 80065d4:	07cc      	lsls	r4, r1, #31
 80065d6:	f04f 0400 	mov.w	r4, #0
 80065da:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80065de:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 80065e2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80065e6:	bf5e      	ittt	pl
 80065e8:	0fd9      	lsrpl	r1, r3, #31
 80065ea:	005b      	lslpl	r3, r3, #1
 80065ec:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 80065f0:	0fd9      	lsrs	r1, r3, #31
 80065f2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80065f6:	2516      	movs	r5, #22
 80065f8:	4620      	mov	r0, r4
 80065fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065fe:	107f      	asrs	r7, r7, #1
 8006600:	005b      	lsls	r3, r3, #1
 8006602:	1846      	adds	r6, r0, r1
 8006604:	4296      	cmp	r6, r2
 8006606:	bfde      	ittt	le
 8006608:	1b92      	suble	r2, r2, r6
 800660a:	1870      	addle	r0, r6, r1
 800660c:	1864      	addle	r4, r4, r1
 800660e:	0052      	lsls	r2, r2, #1
 8006610:	3d01      	subs	r5, #1
 8006612:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8006616:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800661a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800661e:	d1f0      	bne.n	8006602 <__ieee754_sqrt+0x8e>
 8006620:	4629      	mov	r1, r5
 8006622:	f04f 0e20 	mov.w	lr, #32
 8006626:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800662a:	4282      	cmp	r2, r0
 800662c:	eb06 0c05 	add.w	ip, r6, r5
 8006630:	dc02      	bgt.n	8006638 <__ieee754_sqrt+0xc4>
 8006632:	d113      	bne.n	800665c <__ieee754_sqrt+0xe8>
 8006634:	459c      	cmp	ip, r3
 8006636:	d811      	bhi.n	800665c <__ieee754_sqrt+0xe8>
 8006638:	f1bc 0f00 	cmp.w	ip, #0
 800663c:	eb0c 0506 	add.w	r5, ip, r6
 8006640:	da43      	bge.n	80066ca <__ieee754_sqrt+0x156>
 8006642:	2d00      	cmp	r5, #0
 8006644:	db41      	blt.n	80066ca <__ieee754_sqrt+0x156>
 8006646:	f100 0801 	add.w	r8, r0, #1
 800664a:	1a12      	subs	r2, r2, r0
 800664c:	4640      	mov	r0, r8
 800664e:	459c      	cmp	ip, r3
 8006650:	bf88      	it	hi
 8006652:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8006656:	eba3 030c 	sub.w	r3, r3, ip
 800665a:	4431      	add	r1, r6
 800665c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006660:	f1be 0e01 	subs.w	lr, lr, #1
 8006664:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8006668:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800666c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006670:	d1db      	bne.n	800662a <__ieee754_sqrt+0xb6>
 8006672:	4313      	orrs	r3, r2
 8006674:	d006      	beq.n	8006684 <__ieee754_sqrt+0x110>
 8006676:	1c48      	adds	r0, r1, #1
 8006678:	bf0b      	itete	eq
 800667a:	4671      	moveq	r1, lr
 800667c:	3101      	addne	r1, #1
 800667e:	3401      	addeq	r4, #1
 8006680:	f021 0101 	bicne.w	r1, r1, #1
 8006684:	1063      	asrs	r3, r4, #1
 8006686:	0849      	lsrs	r1, r1, #1
 8006688:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800668c:	07e2      	lsls	r2, r4, #31
 800668e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006692:	bf48      	it	mi
 8006694:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8006698:	460e      	mov	r6, r1
 800669a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800669e:	e782      	b.n	80065a6 <__ieee754_sqrt+0x32>
 80066a0:	0ada      	lsrs	r2, r3, #11
 80066a2:	3815      	subs	r0, #21
 80066a4:	055b      	lsls	r3, r3, #21
 80066a6:	2a00      	cmp	r2, #0
 80066a8:	d0fa      	beq.n	80066a0 <__ieee754_sqrt+0x12c>
 80066aa:	02d5      	lsls	r5, r2, #11
 80066ac:	d50a      	bpl.n	80066c4 <__ieee754_sqrt+0x150>
 80066ae:	f1c1 0420 	rsb	r4, r1, #32
 80066b2:	fa23 f404 	lsr.w	r4, r3, r4
 80066b6:	1e4d      	subs	r5, r1, #1
 80066b8:	408b      	lsls	r3, r1
 80066ba:	4322      	orrs	r2, r4
 80066bc:	1b41      	subs	r1, r0, r5
 80066be:	e789      	b.n	80065d4 <__ieee754_sqrt+0x60>
 80066c0:	4608      	mov	r0, r1
 80066c2:	e7f0      	b.n	80066a6 <__ieee754_sqrt+0x132>
 80066c4:	0052      	lsls	r2, r2, #1
 80066c6:	3101      	adds	r1, #1
 80066c8:	e7ef      	b.n	80066aa <__ieee754_sqrt+0x136>
 80066ca:	4680      	mov	r8, r0
 80066cc:	e7bd      	b.n	800664a <__ieee754_sqrt+0xd6>
 80066ce:	bf00      	nop
 80066d0:	7ff00000 	.word	0x7ff00000

080066d4 <__ieee754_rem_pio2f>:
 80066d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d8:	4aa0      	ldr	r2, [pc, #640]	; (800695c <__ieee754_rem_pio2f+0x288>)
 80066da:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80066de:	4296      	cmp	r6, r2
 80066e0:	460c      	mov	r4, r1
 80066e2:	4682      	mov	sl, r0
 80066e4:	b087      	sub	sp, #28
 80066e6:	dc04      	bgt.n	80066f2 <__ieee754_rem_pio2f+0x1e>
 80066e8:	2300      	movs	r3, #0
 80066ea:	6008      	str	r0, [r1, #0]
 80066ec:	604b      	str	r3, [r1, #4]
 80066ee:	2500      	movs	r5, #0
 80066f0:	e01a      	b.n	8006728 <__ieee754_rem_pio2f+0x54>
 80066f2:	4a9b      	ldr	r2, [pc, #620]	; (8006960 <__ieee754_rem_pio2f+0x28c>)
 80066f4:	4296      	cmp	r6, r2
 80066f6:	dc4b      	bgt.n	8006790 <__ieee754_rem_pio2f+0xbc>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	499a      	ldr	r1, [pc, #616]	; (8006964 <__ieee754_rem_pio2f+0x290>)
 80066fc:	4f9a      	ldr	r7, [pc, #616]	; (8006968 <__ieee754_rem_pio2f+0x294>)
 80066fe:	f026 060f 	bic.w	r6, r6, #15
 8006702:	dd23      	ble.n	800674c <__ieee754_rem_pio2f+0x78>
 8006704:	f7fa fa14 	bl	8000b30 <__aeabi_fsub>
 8006708:	42be      	cmp	r6, r7
 800670a:	4605      	mov	r5, r0
 800670c:	d010      	beq.n	8006730 <__ieee754_rem_pio2f+0x5c>
 800670e:	4997      	ldr	r1, [pc, #604]	; (800696c <__ieee754_rem_pio2f+0x298>)
 8006710:	f7fa fa0e 	bl	8000b30 <__aeabi_fsub>
 8006714:	4601      	mov	r1, r0
 8006716:	6020      	str	r0, [r4, #0]
 8006718:	4628      	mov	r0, r5
 800671a:	f7fa fa09 	bl	8000b30 <__aeabi_fsub>
 800671e:	4993      	ldr	r1, [pc, #588]	; (800696c <__ieee754_rem_pio2f+0x298>)
 8006720:	f7fa fa06 	bl	8000b30 <__aeabi_fsub>
 8006724:	2501      	movs	r5, #1
 8006726:	6060      	str	r0, [r4, #4]
 8006728:	4628      	mov	r0, r5
 800672a:	b007      	add	sp, #28
 800672c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006730:	498f      	ldr	r1, [pc, #572]	; (8006970 <__ieee754_rem_pio2f+0x29c>)
 8006732:	f7fa f9fd 	bl	8000b30 <__aeabi_fsub>
 8006736:	498f      	ldr	r1, [pc, #572]	; (8006974 <__ieee754_rem_pio2f+0x2a0>)
 8006738:	4605      	mov	r5, r0
 800673a:	f7fa f9f9 	bl	8000b30 <__aeabi_fsub>
 800673e:	4601      	mov	r1, r0
 8006740:	6020      	str	r0, [r4, #0]
 8006742:	4628      	mov	r0, r5
 8006744:	f7fa f9f4 	bl	8000b30 <__aeabi_fsub>
 8006748:	498a      	ldr	r1, [pc, #552]	; (8006974 <__ieee754_rem_pio2f+0x2a0>)
 800674a:	e7e9      	b.n	8006720 <__ieee754_rem_pio2f+0x4c>
 800674c:	f7fa f9f2 	bl	8000b34 <__addsf3>
 8006750:	42be      	cmp	r6, r7
 8006752:	4605      	mov	r5, r0
 8006754:	d00e      	beq.n	8006774 <__ieee754_rem_pio2f+0xa0>
 8006756:	4985      	ldr	r1, [pc, #532]	; (800696c <__ieee754_rem_pio2f+0x298>)
 8006758:	f7fa f9ec 	bl	8000b34 <__addsf3>
 800675c:	4601      	mov	r1, r0
 800675e:	6020      	str	r0, [r4, #0]
 8006760:	4628      	mov	r0, r5
 8006762:	f7fa f9e5 	bl	8000b30 <__aeabi_fsub>
 8006766:	4981      	ldr	r1, [pc, #516]	; (800696c <__ieee754_rem_pio2f+0x298>)
 8006768:	f7fa f9e4 	bl	8000b34 <__addsf3>
 800676c:	f04f 35ff 	mov.w	r5, #4294967295
 8006770:	6060      	str	r0, [r4, #4]
 8006772:	e7d9      	b.n	8006728 <__ieee754_rem_pio2f+0x54>
 8006774:	497e      	ldr	r1, [pc, #504]	; (8006970 <__ieee754_rem_pio2f+0x29c>)
 8006776:	f7fa f9dd 	bl	8000b34 <__addsf3>
 800677a:	497e      	ldr	r1, [pc, #504]	; (8006974 <__ieee754_rem_pio2f+0x2a0>)
 800677c:	4605      	mov	r5, r0
 800677e:	f7fa f9d9 	bl	8000b34 <__addsf3>
 8006782:	4601      	mov	r1, r0
 8006784:	6020      	str	r0, [r4, #0]
 8006786:	4628      	mov	r0, r5
 8006788:	f7fa f9d2 	bl	8000b30 <__aeabi_fsub>
 800678c:	4979      	ldr	r1, [pc, #484]	; (8006974 <__ieee754_rem_pio2f+0x2a0>)
 800678e:	e7eb      	b.n	8006768 <__ieee754_rem_pio2f+0x94>
 8006790:	4a79      	ldr	r2, [pc, #484]	; (8006978 <__ieee754_rem_pio2f+0x2a4>)
 8006792:	4296      	cmp	r6, r2
 8006794:	f300 8091 	bgt.w	80068ba <__ieee754_rem_pio2f+0x1e6>
 8006798:	f000 fca2 	bl	80070e0 <fabsf>
 800679c:	4977      	ldr	r1, [pc, #476]	; (800697c <__ieee754_rem_pio2f+0x2a8>)
 800679e:	4607      	mov	r7, r0
 80067a0:	f7fa fad0 	bl	8000d44 <__aeabi_fmul>
 80067a4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80067a8:	f7fa f9c4 	bl	8000b34 <__addsf3>
 80067ac:	f7fa fc90 	bl	80010d0 <__aeabi_f2iz>
 80067b0:	4605      	mov	r5, r0
 80067b2:	f7fa fa73 	bl	8000c9c <__aeabi_i2f>
 80067b6:	496b      	ldr	r1, [pc, #428]	; (8006964 <__ieee754_rem_pio2f+0x290>)
 80067b8:	4681      	mov	r9, r0
 80067ba:	f7fa fac3 	bl	8000d44 <__aeabi_fmul>
 80067be:	4601      	mov	r1, r0
 80067c0:	4638      	mov	r0, r7
 80067c2:	f7fa f9b5 	bl	8000b30 <__aeabi_fsub>
 80067c6:	4969      	ldr	r1, [pc, #420]	; (800696c <__ieee754_rem_pio2f+0x298>)
 80067c8:	4680      	mov	r8, r0
 80067ca:	4648      	mov	r0, r9
 80067cc:	f7fa faba 	bl	8000d44 <__aeabi_fmul>
 80067d0:	2d1f      	cmp	r5, #31
 80067d2:	4607      	mov	r7, r0
 80067d4:	dc0c      	bgt.n	80067f0 <__ieee754_rem_pio2f+0x11c>
 80067d6:	4a6a      	ldr	r2, [pc, #424]	; (8006980 <__ieee754_rem_pio2f+0x2ac>)
 80067d8:	1e69      	subs	r1, r5, #1
 80067da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80067de:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d004      	beq.n	80067f0 <__ieee754_rem_pio2f+0x11c>
 80067e6:	4639      	mov	r1, r7
 80067e8:	4640      	mov	r0, r8
 80067ea:	f7fa f9a1 	bl	8000b30 <__aeabi_fsub>
 80067ee:	e00b      	b.n	8006808 <__ieee754_rem_pio2f+0x134>
 80067f0:	4639      	mov	r1, r7
 80067f2:	4640      	mov	r0, r8
 80067f4:	f7fa f99c 	bl	8000b30 <__aeabi_fsub>
 80067f8:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80067fc:	ea4f 5be6 	mov.w	fp, r6, asr #23
 8006800:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 8006804:	2e08      	cmp	r6, #8
 8006806:	dc01      	bgt.n	800680c <__ieee754_rem_pio2f+0x138>
 8006808:	6020      	str	r0, [r4, #0]
 800680a:	e026      	b.n	800685a <__ieee754_rem_pio2f+0x186>
 800680c:	4958      	ldr	r1, [pc, #352]	; (8006970 <__ieee754_rem_pio2f+0x29c>)
 800680e:	4648      	mov	r0, r9
 8006810:	f7fa fa98 	bl	8000d44 <__aeabi_fmul>
 8006814:	4607      	mov	r7, r0
 8006816:	4601      	mov	r1, r0
 8006818:	4640      	mov	r0, r8
 800681a:	f7fa f989 	bl	8000b30 <__aeabi_fsub>
 800681e:	4601      	mov	r1, r0
 8006820:	4606      	mov	r6, r0
 8006822:	4640      	mov	r0, r8
 8006824:	f7fa f984 	bl	8000b30 <__aeabi_fsub>
 8006828:	4639      	mov	r1, r7
 800682a:	f7fa f981 	bl	8000b30 <__aeabi_fsub>
 800682e:	4607      	mov	r7, r0
 8006830:	4950      	ldr	r1, [pc, #320]	; (8006974 <__ieee754_rem_pio2f+0x2a0>)
 8006832:	4648      	mov	r0, r9
 8006834:	f7fa fa86 	bl	8000d44 <__aeabi_fmul>
 8006838:	4639      	mov	r1, r7
 800683a:	f7fa f979 	bl	8000b30 <__aeabi_fsub>
 800683e:	4601      	mov	r1, r0
 8006840:	4607      	mov	r7, r0
 8006842:	4630      	mov	r0, r6
 8006844:	f7fa f974 	bl	8000b30 <__aeabi_fsub>
 8006848:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800684c:	ebab 0b03 	sub.w	fp, fp, r3
 8006850:	f1bb 0f19 	cmp.w	fp, #25
 8006854:	dc16      	bgt.n	8006884 <__ieee754_rem_pio2f+0x1b0>
 8006856:	46b0      	mov	r8, r6
 8006858:	6020      	str	r0, [r4, #0]
 800685a:	6826      	ldr	r6, [r4, #0]
 800685c:	4640      	mov	r0, r8
 800685e:	4631      	mov	r1, r6
 8006860:	f7fa f966 	bl	8000b30 <__aeabi_fsub>
 8006864:	4639      	mov	r1, r7
 8006866:	f7fa f963 	bl	8000b30 <__aeabi_fsub>
 800686a:	f1ba 0f00 	cmp.w	sl, #0
 800686e:	6060      	str	r0, [r4, #4]
 8006870:	f6bf af5a 	bge.w	8006728 <__ieee754_rem_pio2f+0x54>
 8006874:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8006878:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800687c:	6026      	str	r6, [r4, #0]
 800687e:	6060      	str	r0, [r4, #4]
 8006880:	426d      	negs	r5, r5
 8006882:	e751      	b.n	8006728 <__ieee754_rem_pio2f+0x54>
 8006884:	493f      	ldr	r1, [pc, #252]	; (8006984 <__ieee754_rem_pio2f+0x2b0>)
 8006886:	4648      	mov	r0, r9
 8006888:	f7fa fa5c 	bl	8000d44 <__aeabi_fmul>
 800688c:	4607      	mov	r7, r0
 800688e:	4601      	mov	r1, r0
 8006890:	4630      	mov	r0, r6
 8006892:	f7fa f94d 	bl	8000b30 <__aeabi_fsub>
 8006896:	4601      	mov	r1, r0
 8006898:	4680      	mov	r8, r0
 800689a:	4630      	mov	r0, r6
 800689c:	f7fa f948 	bl	8000b30 <__aeabi_fsub>
 80068a0:	4639      	mov	r1, r7
 80068a2:	f7fa f945 	bl	8000b30 <__aeabi_fsub>
 80068a6:	4606      	mov	r6, r0
 80068a8:	4937      	ldr	r1, [pc, #220]	; (8006988 <__ieee754_rem_pio2f+0x2b4>)
 80068aa:	4648      	mov	r0, r9
 80068ac:	f7fa fa4a 	bl	8000d44 <__aeabi_fmul>
 80068b0:	4631      	mov	r1, r6
 80068b2:	f7fa f93d 	bl	8000b30 <__aeabi_fsub>
 80068b6:	4607      	mov	r7, r0
 80068b8:	e795      	b.n	80067e6 <__ieee754_rem_pio2f+0x112>
 80068ba:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80068be:	db05      	blt.n	80068cc <__ieee754_rem_pio2f+0x1f8>
 80068c0:	4601      	mov	r1, r0
 80068c2:	f7fa f935 	bl	8000b30 <__aeabi_fsub>
 80068c6:	6060      	str	r0, [r4, #4]
 80068c8:	6020      	str	r0, [r4, #0]
 80068ca:	e710      	b.n	80066ee <__ieee754_rem_pio2f+0x1a>
 80068cc:	15f7      	asrs	r7, r6, #23
 80068ce:	3f86      	subs	r7, #134	; 0x86
 80068d0:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 80068d4:	4630      	mov	r0, r6
 80068d6:	f7fa fbfb 	bl	80010d0 <__aeabi_f2iz>
 80068da:	f7fa f9df 	bl	8000c9c <__aeabi_i2f>
 80068de:	4601      	mov	r1, r0
 80068e0:	9003      	str	r0, [sp, #12]
 80068e2:	4630      	mov	r0, r6
 80068e4:	f7fa f924 	bl	8000b30 <__aeabi_fsub>
 80068e8:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80068ec:	f7fa fa2a 	bl	8000d44 <__aeabi_fmul>
 80068f0:	4606      	mov	r6, r0
 80068f2:	f7fa fbed 	bl	80010d0 <__aeabi_f2iz>
 80068f6:	f7fa f9d1 	bl	8000c9c <__aeabi_i2f>
 80068fa:	4601      	mov	r1, r0
 80068fc:	9004      	str	r0, [sp, #16]
 80068fe:	4605      	mov	r5, r0
 8006900:	4630      	mov	r0, r6
 8006902:	f7fa f915 	bl	8000b30 <__aeabi_fsub>
 8006906:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800690a:	f7fa fa1b 	bl	8000d44 <__aeabi_fmul>
 800690e:	2100      	movs	r1, #0
 8006910:	9005      	str	r0, [sp, #20]
 8006912:	f7fa fbab 	bl	800106c <__aeabi_fcmpeq>
 8006916:	b1f0      	cbz	r0, 8006956 <__ieee754_rem_pio2f+0x282>
 8006918:	2100      	movs	r1, #0
 800691a:	4628      	mov	r0, r5
 800691c:	f7fa fba6 	bl	800106c <__aeabi_fcmpeq>
 8006920:	2800      	cmp	r0, #0
 8006922:	bf14      	ite	ne
 8006924:	2301      	movne	r3, #1
 8006926:	2302      	moveq	r3, #2
 8006928:	4a18      	ldr	r2, [pc, #96]	; (800698c <__ieee754_rem_pio2f+0x2b8>)
 800692a:	4621      	mov	r1, r4
 800692c:	9201      	str	r2, [sp, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	a803      	add	r0, sp, #12
 8006932:	9200      	str	r2, [sp, #0]
 8006934:	463a      	mov	r2, r7
 8006936:	f000 f8ab 	bl	8006a90 <__kernel_rem_pio2f>
 800693a:	f1ba 0f00 	cmp.w	sl, #0
 800693e:	4605      	mov	r5, r0
 8006940:	f6bf aef2 	bge.w	8006728 <__ieee754_rem_pio2f+0x54>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800694a:	6023      	str	r3, [r4, #0]
 800694c:	6863      	ldr	r3, [r4, #4]
 800694e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006952:	6063      	str	r3, [r4, #4]
 8006954:	e794      	b.n	8006880 <__ieee754_rem_pio2f+0x1ac>
 8006956:	2303      	movs	r3, #3
 8006958:	e7e6      	b.n	8006928 <__ieee754_rem_pio2f+0x254>
 800695a:	bf00      	nop
 800695c:	3f490fd8 	.word	0x3f490fd8
 8006960:	4016cbe3 	.word	0x4016cbe3
 8006964:	3fc90f80 	.word	0x3fc90f80
 8006968:	3fc90fd0 	.word	0x3fc90fd0
 800696c:	37354443 	.word	0x37354443
 8006970:	37354400 	.word	0x37354400
 8006974:	2e85a308 	.word	0x2e85a308
 8006978:	43490f80 	.word	0x43490f80
 800697c:	3f22f984 	.word	0x3f22f984
 8006980:	0800766c 	.word	0x0800766c
 8006984:	2e85a300 	.word	0x2e85a300
 8006988:	248d3132 	.word	0x248d3132
 800698c:	080076ec 	.word	0x080076ec

08006990 <__kernel_cosf>:
 8006990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006994:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8006998:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800699c:	4606      	mov	r6, r0
 800699e:	4688      	mov	r8, r1
 80069a0:	da03      	bge.n	80069aa <__kernel_cosf+0x1a>
 80069a2:	f7fa fb95 	bl	80010d0 <__aeabi_f2iz>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d05c      	beq.n	8006a64 <__kernel_cosf+0xd4>
 80069aa:	4631      	mov	r1, r6
 80069ac:	4630      	mov	r0, r6
 80069ae:	f7fa f9c9 	bl	8000d44 <__aeabi_fmul>
 80069b2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80069b6:	4605      	mov	r5, r0
 80069b8:	f7fa f9c4 	bl	8000d44 <__aeabi_fmul>
 80069bc:	492b      	ldr	r1, [pc, #172]	; (8006a6c <__kernel_cosf+0xdc>)
 80069be:	4607      	mov	r7, r0
 80069c0:	4628      	mov	r0, r5
 80069c2:	f7fa f9bf 	bl	8000d44 <__aeabi_fmul>
 80069c6:	492a      	ldr	r1, [pc, #168]	; (8006a70 <__kernel_cosf+0xe0>)
 80069c8:	f7fa f8b4 	bl	8000b34 <__addsf3>
 80069cc:	4629      	mov	r1, r5
 80069ce:	f7fa f9b9 	bl	8000d44 <__aeabi_fmul>
 80069d2:	4928      	ldr	r1, [pc, #160]	; (8006a74 <__kernel_cosf+0xe4>)
 80069d4:	f7fa f8ac 	bl	8000b30 <__aeabi_fsub>
 80069d8:	4629      	mov	r1, r5
 80069da:	f7fa f9b3 	bl	8000d44 <__aeabi_fmul>
 80069de:	4926      	ldr	r1, [pc, #152]	; (8006a78 <__kernel_cosf+0xe8>)
 80069e0:	f7fa f8a8 	bl	8000b34 <__addsf3>
 80069e4:	4629      	mov	r1, r5
 80069e6:	f7fa f9ad 	bl	8000d44 <__aeabi_fmul>
 80069ea:	4924      	ldr	r1, [pc, #144]	; (8006a7c <__kernel_cosf+0xec>)
 80069ec:	f7fa f8a0 	bl	8000b30 <__aeabi_fsub>
 80069f0:	4629      	mov	r1, r5
 80069f2:	f7fa f9a7 	bl	8000d44 <__aeabi_fmul>
 80069f6:	4922      	ldr	r1, [pc, #136]	; (8006a80 <__kernel_cosf+0xf0>)
 80069f8:	f7fa f89c 	bl	8000b34 <__addsf3>
 80069fc:	4629      	mov	r1, r5
 80069fe:	f7fa f9a1 	bl	8000d44 <__aeabi_fmul>
 8006a02:	4629      	mov	r1, r5
 8006a04:	f7fa f99e 	bl	8000d44 <__aeabi_fmul>
 8006a08:	4641      	mov	r1, r8
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f7fa f999 	bl	8000d44 <__aeabi_fmul>
 8006a12:	4601      	mov	r1, r0
 8006a14:	4628      	mov	r0, r5
 8006a16:	f7fa f88b 	bl	8000b30 <__aeabi_fsub>
 8006a1a:	4b1a      	ldr	r3, [pc, #104]	; (8006a84 <__kernel_cosf+0xf4>)
 8006a1c:	4605      	mov	r5, r0
 8006a1e:	429c      	cmp	r4, r3
 8006a20:	dc0a      	bgt.n	8006a38 <__kernel_cosf+0xa8>
 8006a22:	4601      	mov	r1, r0
 8006a24:	4638      	mov	r0, r7
 8006a26:	f7fa f883 	bl	8000b30 <__aeabi_fsub>
 8006a2a:	4601      	mov	r1, r0
 8006a2c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006a30:	f7fa f87e 	bl	8000b30 <__aeabi_fsub>
 8006a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a38:	4b13      	ldr	r3, [pc, #76]	; (8006a88 <__kernel_cosf+0xf8>)
 8006a3a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006a3e:	429c      	cmp	r4, r3
 8006a40:	bfcc      	ite	gt
 8006a42:	4c12      	ldrgt	r4, [pc, #72]	; (8006a8c <__kernel_cosf+0xfc>)
 8006a44:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 8006a48:	4621      	mov	r1, r4
 8006a4a:	f7fa f871 	bl	8000b30 <__aeabi_fsub>
 8006a4e:	4621      	mov	r1, r4
 8006a50:	4606      	mov	r6, r0
 8006a52:	4638      	mov	r0, r7
 8006a54:	f7fa f86c 	bl	8000b30 <__aeabi_fsub>
 8006a58:	4629      	mov	r1, r5
 8006a5a:	f7fa f869 	bl	8000b30 <__aeabi_fsub>
 8006a5e:	4601      	mov	r1, r0
 8006a60:	4630      	mov	r0, r6
 8006a62:	e7e5      	b.n	8006a30 <__kernel_cosf+0xa0>
 8006a64:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006a68:	e7e4      	b.n	8006a34 <__kernel_cosf+0xa4>
 8006a6a:	bf00      	nop
 8006a6c:	ad47d74e 	.word	0xad47d74e
 8006a70:	310f74f6 	.word	0x310f74f6
 8006a74:	3493f27c 	.word	0x3493f27c
 8006a78:	37d00d01 	.word	0x37d00d01
 8006a7c:	3ab60b61 	.word	0x3ab60b61
 8006a80:	3d2aaaab 	.word	0x3d2aaaab
 8006a84:	3e999999 	.word	0x3e999999
 8006a88:	3f480000 	.word	0x3f480000
 8006a8c:	3e900000 	.word	0x3e900000

08006a90 <__kernel_rem_pio2f>:
 8006a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	b0db      	sub	sp, #364	; 0x16c
 8006a96:	9202      	str	r2, [sp, #8]
 8006a98:	9304      	str	r3, [sp, #16]
 8006a9a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8006a9c:	4bb2      	ldr	r3, [pc, #712]	; (8006d68 <__kernel_rem_pio2f+0x2d8>)
 8006a9e:	9005      	str	r0, [sp, #20]
 8006aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa4:	9100      	str	r1, [sp, #0]
 8006aa6:	9301      	str	r3, [sp, #4]
 8006aa8:	9b04      	ldr	r3, [sp, #16]
 8006aaa:	3b01      	subs	r3, #1
 8006aac:	9303      	str	r3, [sp, #12]
 8006aae:	9b02      	ldr	r3, [sp, #8]
 8006ab0:	1d1a      	adds	r2, r3, #4
 8006ab2:	f2c0 809b 	blt.w	8006bec <__kernel_rem_pio2f+0x15c>
 8006ab6:	1edc      	subs	r4, r3, #3
 8006ab8:	bf48      	it	mi
 8006aba:	1d1c      	addmi	r4, r3, #4
 8006abc:	10e4      	asrs	r4, r4, #3
 8006abe:	2500      	movs	r5, #0
 8006ac0:	f04f 0b00 	mov.w	fp, #0
 8006ac4:	1c67      	adds	r7, r4, #1
 8006ac6:	00fb      	lsls	r3, r7, #3
 8006ac8:	9306      	str	r3, [sp, #24]
 8006aca:	9b02      	ldr	r3, [sp, #8]
 8006acc:	9a03      	ldr	r2, [sp, #12]
 8006ace:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 8006ad2:	9b01      	ldr	r3, [sp, #4]
 8006ad4:	eba4 0802 	sub.w	r8, r4, r2
 8006ad8:	eb03 0902 	add.w	r9, r3, r2
 8006adc:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8006ade:	ae1e      	add	r6, sp, #120	; 0x78
 8006ae0:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8006ae4:	454d      	cmp	r5, r9
 8006ae6:	f340 8083 	ble.w	8006bf0 <__kernel_rem_pio2f+0x160>
 8006aea:	9a04      	ldr	r2, [sp, #16]
 8006aec:	ab1e      	add	r3, sp, #120	; 0x78
 8006aee:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8006af2:	f04f 0900 	mov.w	r9, #0
 8006af6:	2300      	movs	r3, #0
 8006af8:	f50d 7b8c 	add.w	fp, sp, #280	; 0x118
 8006afc:	9a01      	ldr	r2, [sp, #4]
 8006afe:	4591      	cmp	r9, r2
 8006b00:	f340 809e 	ble.w	8006c40 <__kernel_rem_pio2f+0x1b0>
 8006b04:	4613      	mov	r3, r2
 8006b06:	aa0a      	add	r2, sp, #40	; 0x28
 8006b08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006b0c:	9308      	str	r3, [sp, #32]
 8006b0e:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8006b10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006b14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006b18:	9307      	str	r3, [sp, #28]
 8006b1a:	ac0a      	add	r4, sp, #40	; 0x28
 8006b1c:	4626      	mov	r6, r4
 8006b1e:	46c3      	mov	fp, r8
 8006b20:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 8006b24:	ab5a      	add	r3, sp, #360	; 0x168
 8006b26:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8006b2a:	f853 5c50 	ldr.w	r5, [r3, #-80]
 8006b2e:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 8006b32:	f1bb 0f00 	cmp.w	fp, #0
 8006b36:	f300 8088 	bgt.w	8006c4a <__kernel_rem_pio2f+0x1ba>
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	f000 fb15 	bl	800716c <scalbnf>
 8006b42:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8006b46:	4605      	mov	r5, r0
 8006b48:	f7fa f8fc 	bl	8000d44 <__aeabi_fmul>
 8006b4c:	f000 facc 	bl	80070e8 <floorf>
 8006b50:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8006b54:	f7fa f8f6 	bl	8000d44 <__aeabi_fmul>
 8006b58:	4601      	mov	r1, r0
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	f7f9 ffe8 	bl	8000b30 <__aeabi_fsub>
 8006b60:	4605      	mov	r5, r0
 8006b62:	f7fa fab5 	bl	80010d0 <__aeabi_f2iz>
 8006b66:	4606      	mov	r6, r0
 8006b68:	f7fa f898 	bl	8000c9c <__aeabi_i2f>
 8006b6c:	4601      	mov	r1, r0
 8006b6e:	4628      	mov	r0, r5
 8006b70:	f7f9 ffde 	bl	8000b30 <__aeabi_fsub>
 8006b74:	2f00      	cmp	r7, #0
 8006b76:	4681      	mov	r9, r0
 8006b78:	f340 8086 	ble.w	8006c88 <__kernel_rem_pio2f+0x1f8>
 8006b7c:	f108 32ff 	add.w	r2, r8, #4294967295
 8006b80:	ab0a      	add	r3, sp, #40	; 0x28
 8006b82:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8006b86:	f1c7 0108 	rsb	r1, r7, #8
 8006b8a:	fa45 f301 	asr.w	r3, r5, r1
 8006b8e:	441e      	add	r6, r3
 8006b90:	408b      	lsls	r3, r1
 8006b92:	1aed      	subs	r5, r5, r3
 8006b94:	f1c7 0007 	rsb	r0, r7, #7
 8006b98:	ab0a      	add	r3, sp, #40	; 0x28
 8006b9a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006b9e:	4105      	asrs	r5, r0
 8006ba0:	2d00      	cmp	r5, #0
 8006ba2:	dd7f      	ble.n	8006ca4 <__kernel_rem_pio2f+0x214>
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	4692      	mov	sl, r2
 8006ba8:	3601      	adds	r6, #1
 8006baa:	4590      	cmp	r8, r2
 8006bac:	f300 80b0 	bgt.w	8006d10 <__kernel_rem_pio2f+0x280>
 8006bb0:	2f00      	cmp	r7, #0
 8006bb2:	dd05      	ble.n	8006bc0 <__kernel_rem_pio2f+0x130>
 8006bb4:	2f01      	cmp	r7, #1
 8006bb6:	f000 80bd 	beq.w	8006d34 <__kernel_rem_pio2f+0x2a4>
 8006bba:	2f02      	cmp	r7, #2
 8006bbc:	f000 80c5 	beq.w	8006d4a <__kernel_rem_pio2f+0x2ba>
 8006bc0:	2d02      	cmp	r5, #2
 8006bc2:	d16f      	bne.n	8006ca4 <__kernel_rem_pio2f+0x214>
 8006bc4:	4649      	mov	r1, r9
 8006bc6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006bca:	f7f9 ffb1 	bl	8000b30 <__aeabi_fsub>
 8006bce:	4681      	mov	r9, r0
 8006bd0:	f1ba 0f00 	cmp.w	sl, #0
 8006bd4:	d066      	beq.n	8006ca4 <__kernel_rem_pio2f+0x214>
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006bdc:	f000 fac6 	bl	800716c <scalbnf>
 8006be0:	4601      	mov	r1, r0
 8006be2:	4648      	mov	r0, r9
 8006be4:	f7f9 ffa4 	bl	8000b30 <__aeabi_fsub>
 8006be8:	4681      	mov	r9, r0
 8006bea:	e05b      	b.n	8006ca4 <__kernel_rem_pio2f+0x214>
 8006bec:	2400      	movs	r4, #0
 8006bee:	e766      	b.n	8006abe <__kernel_rem_pio2f+0x2e>
 8006bf0:	eb18 0f05 	cmn.w	r8, r5
 8006bf4:	d407      	bmi.n	8006c06 <__kernel_rem_pio2f+0x176>
 8006bf6:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8006bfa:	f7fa f84f 	bl	8000c9c <__aeabi_i2f>
 8006bfe:	f846 0b04 	str.w	r0, [r6], #4
 8006c02:	3501      	adds	r5, #1
 8006c04:	e76e      	b.n	8006ae4 <__kernel_rem_pio2f+0x54>
 8006c06:	4658      	mov	r0, fp
 8006c08:	e7f9      	b.n	8006bfe <__kernel_rem_pio2f+0x16e>
 8006c0a:	9307      	str	r3, [sp, #28]
 8006c0c:	9b05      	ldr	r3, [sp, #20]
 8006c0e:	f8da 1000 	ldr.w	r1, [sl]
 8006c12:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8006c16:	f7fa f895 	bl	8000d44 <__aeabi_fmul>
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f7f9 ff89 	bl	8000b34 <__addsf3>
 8006c22:	4606      	mov	r6, r0
 8006c24:	9b07      	ldr	r3, [sp, #28]
 8006c26:	f108 0801 	add.w	r8, r8, #1
 8006c2a:	9a03      	ldr	r2, [sp, #12]
 8006c2c:	f1aa 0a04 	sub.w	sl, sl, #4
 8006c30:	4590      	cmp	r8, r2
 8006c32:	ddea      	ble.n	8006c0a <__kernel_rem_pio2f+0x17a>
 8006c34:	f84b 6b04 	str.w	r6, [fp], #4
 8006c38:	f109 0901 	add.w	r9, r9, #1
 8006c3c:	3504      	adds	r5, #4
 8006c3e:	e75d      	b.n	8006afc <__kernel_rem_pio2f+0x6c>
 8006c40:	46aa      	mov	sl, r5
 8006c42:	461e      	mov	r6, r3
 8006c44:	f04f 0800 	mov.w	r8, #0
 8006c48:	e7ef      	b.n	8006c2a <__kernel_rem_pio2f+0x19a>
 8006c4a:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f7fa f878 	bl	8000d44 <__aeabi_fmul>
 8006c54:	f7fa fa3c 	bl	80010d0 <__aeabi_f2iz>
 8006c58:	f7fa f820 	bl	8000c9c <__aeabi_i2f>
 8006c5c:	4649      	mov	r1, r9
 8006c5e:	9009      	str	r0, [sp, #36]	; 0x24
 8006c60:	f7fa f870 	bl	8000d44 <__aeabi_fmul>
 8006c64:	4601      	mov	r1, r0
 8006c66:	4628      	mov	r0, r5
 8006c68:	f7f9 ff62 	bl	8000b30 <__aeabi_fsub>
 8006c6c:	f7fa fa30 	bl	80010d0 <__aeabi_f2iz>
 8006c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006c76:	f846 0b04 	str.w	r0, [r6], #4
 8006c7a:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7f9 ff58 	bl	8000b34 <__addsf3>
 8006c84:	4605      	mov	r5, r0
 8006c86:	e754      	b.n	8006b32 <__kernel_rem_pio2f+0xa2>
 8006c88:	d106      	bne.n	8006c98 <__kernel_rem_pio2f+0x208>
 8006c8a:	f108 33ff 	add.w	r3, r8, #4294967295
 8006c8e:	aa0a      	add	r2, sp, #40	; 0x28
 8006c90:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8006c94:	11ed      	asrs	r5, r5, #7
 8006c96:	e783      	b.n	8006ba0 <__kernel_rem_pio2f+0x110>
 8006c98:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8006c9c:	f7fa fa04 	bl	80010a8 <__aeabi_fcmpge>
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	bb98      	cbnz	r0, 8006d0c <__kernel_rem_pio2f+0x27c>
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4648      	mov	r0, r9
 8006ca8:	f7fa f9e0 	bl	800106c <__aeabi_fcmpeq>
 8006cac:	2800      	cmp	r0, #0
 8006cae:	f000 8098 	beq.w	8006de2 <__kernel_rem_pio2f+0x352>
 8006cb2:	f108 34ff 	add.w	r4, r8, #4294967295
 8006cb6:	4623      	mov	r3, r4
 8006cb8:	2200      	movs	r2, #0
 8006cba:	9901      	ldr	r1, [sp, #4]
 8006cbc:	428b      	cmp	r3, r1
 8006cbe:	da4c      	bge.n	8006d5a <__kernel_rem_pio2f+0x2ca>
 8006cc0:	2a00      	cmp	r2, #0
 8006cc2:	d07a      	beq.n	8006dba <__kernel_rem_pio2f+0x32a>
 8006cc4:	ab0a      	add	r3, sp, #40	; 0x28
 8006cc6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006cca:	3f08      	subs	r7, #8
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 8086 	beq.w	8006dde <__kernel_rem_pio2f+0x34e>
 8006cd2:	4639      	mov	r1, r7
 8006cd4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8006cd8:	f000 fa48 	bl	800716c <scalbnf>
 8006cdc:	46a2      	mov	sl, r4
 8006cde:	4681      	mov	r9, r0
 8006ce0:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 8006ce4:	af46      	add	r7, sp, #280	; 0x118
 8006ce6:	f1ba 0f00 	cmp.w	sl, #0
 8006cea:	f280 80af 	bge.w	8006e4c <__kernel_rem_pio2f+0x3bc>
 8006cee:	4627      	mov	r7, r4
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2f00      	cmp	r7, #0
 8006cf4:	f2c0 80d9 	blt.w	8006eaa <__kernel_rem_pio2f+0x41a>
 8006cf8:	a946      	add	r1, sp, #280	; 0x118
 8006cfa:	4690      	mov	r8, r2
 8006cfc:	f04f 0a00 	mov.w	sl, #0
 8006d00:	4b1a      	ldr	r3, [pc, #104]	; (8006d6c <__kernel_rem_pio2f+0x2dc>)
 8006d02:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8006d06:	eba4 0907 	sub.w	r9, r4, r7
 8006d0a:	e0c2      	b.n	8006e92 <__kernel_rem_pio2f+0x402>
 8006d0c:	2502      	movs	r5, #2
 8006d0e:	e749      	b.n	8006ba4 <__kernel_rem_pio2f+0x114>
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	f1ba 0f00 	cmp.w	sl, #0
 8006d16:	d108      	bne.n	8006d2a <__kernel_rem_pio2f+0x29a>
 8006d18:	b11b      	cbz	r3, 8006d22 <__kernel_rem_pio2f+0x292>
 8006d1a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006d1e:	6023      	str	r3, [r4, #0]
 8006d20:	2301      	movs	r3, #1
 8006d22:	469a      	mov	sl, r3
 8006d24:	3201      	adds	r2, #1
 8006d26:	3404      	adds	r4, #4
 8006d28:	e73f      	b.n	8006baa <__kernel_rem_pio2f+0x11a>
 8006d2a:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006d2e:	6023      	str	r3, [r4, #0]
 8006d30:	4653      	mov	r3, sl
 8006d32:	e7f6      	b.n	8006d22 <__kernel_rem_pio2f+0x292>
 8006d34:	f108 32ff 	add.w	r2, r8, #4294967295
 8006d38:	ab0a      	add	r3, sp, #40	; 0x28
 8006d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d42:	a90a      	add	r1, sp, #40	; 0x28
 8006d44:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006d48:	e73a      	b.n	8006bc0 <__kernel_rem_pio2f+0x130>
 8006d4a:	f108 32ff 	add.w	r2, r8, #4294967295
 8006d4e:	ab0a      	add	r3, sp, #40	; 0x28
 8006d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d58:	e7f3      	b.n	8006d42 <__kernel_rem_pio2f+0x2b2>
 8006d5a:	a90a      	add	r1, sp, #40	; 0x28
 8006d5c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006d60:	3b01      	subs	r3, #1
 8006d62:	430a      	orrs	r2, r1
 8006d64:	e7a9      	b.n	8006cba <__kernel_rem_pio2f+0x22a>
 8006d66:	bf00      	nop
 8006d68:	08007a30 	.word	0x08007a30
 8006d6c:	08007a04 	.word	0x08007a04
 8006d70:	3301      	adds	r3, #1
 8006d72:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006d76:	2900      	cmp	r1, #0
 8006d78:	d0fa      	beq.n	8006d70 <__kernel_rem_pio2f+0x2e0>
 8006d7a:	9a04      	ldr	r2, [sp, #16]
 8006d7c:	f108 0501 	add.w	r5, r8, #1
 8006d80:	eb08 0402 	add.w	r4, r8, r2
 8006d84:	aa1e      	add	r2, sp, #120	; 0x78
 8006d86:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 8006d8a:	4498      	add	r8, r3
 8006d8c:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8006d90:	45a8      	cmp	r8, r5
 8006d92:	f6ff aec2 	blt.w	8006b1a <__kernel_rem_pio2f+0x8a>
 8006d96:	9b07      	ldr	r3, [sp, #28]
 8006d98:	46a3      	mov	fp, r4
 8006d9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d9e:	f7f9 ff7d 	bl	8000c9c <__aeabi_i2f>
 8006da2:	f04f 0a00 	mov.w	sl, #0
 8006da6:	2600      	movs	r6, #0
 8006da8:	6020      	str	r0, [r4, #0]
 8006daa:	9b03      	ldr	r3, [sp, #12]
 8006dac:	459a      	cmp	sl, r3
 8006dae:	dd07      	ble.n	8006dc0 <__kernel_rem_pio2f+0x330>
 8006db0:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8006db4:	3404      	adds	r4, #4
 8006db6:	3501      	adds	r5, #1
 8006db8:	e7ea      	b.n	8006d90 <__kernel_rem_pio2f+0x300>
 8006dba:	2301      	movs	r3, #1
 8006dbc:	9a08      	ldr	r2, [sp, #32]
 8006dbe:	e7d8      	b.n	8006d72 <__kernel_rem_pio2f+0x2e2>
 8006dc0:	9b05      	ldr	r3, [sp, #20]
 8006dc2:	f85b 0904 	ldr.w	r0, [fp], #-4
 8006dc6:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8006dca:	f7f9 ffbb 	bl	8000d44 <__aeabi_fmul>
 8006dce:	4601      	mov	r1, r0
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	f7f9 feaf 	bl	8000b34 <__addsf3>
 8006dd6:	f10a 0a01 	add.w	sl, sl, #1
 8006dda:	4606      	mov	r6, r0
 8006ddc:	e7e5      	b.n	8006daa <__kernel_rem_pio2f+0x31a>
 8006dde:	3c01      	subs	r4, #1
 8006de0:	e770      	b.n	8006cc4 <__kernel_rem_pio2f+0x234>
 8006de2:	9b06      	ldr	r3, [sp, #24]
 8006de4:	9a02      	ldr	r2, [sp, #8]
 8006de6:	4648      	mov	r0, r9
 8006de8:	1a99      	subs	r1, r3, r2
 8006dea:	f000 f9bf 	bl	800716c <scalbnf>
 8006dee:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8006df2:	4604      	mov	r4, r0
 8006df4:	f7fa f958 	bl	80010a8 <__aeabi_fcmpge>
 8006df8:	b300      	cbz	r0, 8006e3c <__kernel_rem_pio2f+0x3ac>
 8006dfa:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f7f9 ffa0 	bl	8000d44 <__aeabi_fmul>
 8006e04:	f7fa f964 	bl	80010d0 <__aeabi_f2iz>
 8006e08:	f7f9 ff48 	bl	8000c9c <__aeabi_i2f>
 8006e0c:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 8006e10:	4681      	mov	r9, r0
 8006e12:	f7f9 ff97 	bl	8000d44 <__aeabi_fmul>
 8006e16:	4601      	mov	r1, r0
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f7f9 fe89 	bl	8000b30 <__aeabi_fsub>
 8006e1e:	f7fa f957 	bl	80010d0 <__aeabi_f2iz>
 8006e22:	ab0a      	add	r3, sp, #40	; 0x28
 8006e24:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006e28:	4648      	mov	r0, r9
 8006e2a:	f7fa f951 	bl	80010d0 <__aeabi_f2iz>
 8006e2e:	f108 0401 	add.w	r4, r8, #1
 8006e32:	ab0a      	add	r3, sp, #40	; 0x28
 8006e34:	3708      	adds	r7, #8
 8006e36:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006e3a:	e74a      	b.n	8006cd2 <__kernel_rem_pio2f+0x242>
 8006e3c:	4620      	mov	r0, r4
 8006e3e:	f7fa f947 	bl	80010d0 <__aeabi_f2iz>
 8006e42:	ab0a      	add	r3, sp, #40	; 0x28
 8006e44:	4644      	mov	r4, r8
 8006e46:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006e4a:	e742      	b.n	8006cd2 <__kernel_rem_pio2f+0x242>
 8006e4c:	ab0a      	add	r3, sp, #40	; 0x28
 8006e4e:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8006e52:	f7f9 ff23 	bl	8000c9c <__aeabi_i2f>
 8006e56:	4649      	mov	r1, r9
 8006e58:	f7f9 ff74 	bl	8000d44 <__aeabi_fmul>
 8006e5c:	4641      	mov	r1, r8
 8006e5e:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8006e62:	4648      	mov	r0, r9
 8006e64:	f7f9 ff6e 	bl	8000d44 <__aeabi_fmul>
 8006e68:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e6c:	4681      	mov	r9, r0
 8006e6e:	e73a      	b.n	8006ce6 <__kernel_rem_pio2f+0x256>
 8006e70:	f853 0b04 	ldr.w	r0, [r3], #4
 8006e74:	f85b 1b04 	ldr.w	r1, [fp], #4
 8006e78:	9203      	str	r2, [sp, #12]
 8006e7a:	9302      	str	r3, [sp, #8]
 8006e7c:	f7f9 ff62 	bl	8000d44 <__aeabi_fmul>
 8006e80:	4601      	mov	r1, r0
 8006e82:	4640      	mov	r0, r8
 8006e84:	f7f9 fe56 	bl	8000b34 <__addsf3>
 8006e88:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006e8c:	4680      	mov	r8, r0
 8006e8e:	f10a 0a01 	add.w	sl, sl, #1
 8006e92:	9901      	ldr	r1, [sp, #4]
 8006e94:	458a      	cmp	sl, r1
 8006e96:	dc01      	bgt.n	8006e9c <__kernel_rem_pio2f+0x40c>
 8006e98:	45ca      	cmp	sl, r9
 8006e9a:	dde9      	ble.n	8006e70 <__kernel_rem_pio2f+0x3e0>
 8006e9c:	ab5a      	add	r3, sp, #360	; 0x168
 8006e9e:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8006ea2:	f849 8ca0 	str.w	r8, [r9, #-160]
 8006ea6:	3f01      	subs	r7, #1
 8006ea8:	e723      	b.n	8006cf2 <__kernel_rem_pio2f+0x262>
 8006eaa:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	dc07      	bgt.n	8006ec0 <__kernel_rem_pio2f+0x430>
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	dc4d      	bgt.n	8006f50 <__kernel_rem_pio2f+0x4c0>
 8006eb4:	d02e      	beq.n	8006f14 <__kernel_rem_pio2f+0x484>
 8006eb6:	f006 0007 	and.w	r0, r6, #7
 8006eba:	b05b      	add	sp, #364	; 0x16c
 8006ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8006ec2:	2b03      	cmp	r3, #3
 8006ec4:	d1f7      	bne.n	8006eb6 <__kernel_rem_pio2f+0x426>
 8006ec6:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 8006eca:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8006ece:	46b8      	mov	r8, r7
 8006ed0:	46a2      	mov	sl, r4
 8006ed2:	f1ba 0f00 	cmp.w	sl, #0
 8006ed6:	dc48      	bgt.n	8006f6a <__kernel_rem_pio2f+0x4da>
 8006ed8:	46a1      	mov	r9, r4
 8006eda:	f1b9 0f01 	cmp.w	r9, #1
 8006ede:	dc5f      	bgt.n	8006fa0 <__kernel_rem_pio2f+0x510>
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	2c01      	cmp	r4, #1
 8006ee4:	dc75      	bgt.n	8006fd2 <__kernel_rem_pio2f+0x542>
 8006ee6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 8006ee8:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 8006eea:	2d00      	cmp	r5, #0
 8006eec:	d177      	bne.n	8006fde <__kernel_rem_pio2f+0x54e>
 8006eee:	9900      	ldr	r1, [sp, #0]
 8006ef0:	600a      	str	r2, [r1, #0]
 8006ef2:	460a      	mov	r2, r1
 8006ef4:	604b      	str	r3, [r1, #4]
 8006ef6:	6090      	str	r0, [r2, #8]
 8006ef8:	e7dd      	b.n	8006eb6 <__kernel_rem_pio2f+0x426>
 8006efa:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8006efe:	f7f9 fe19 	bl	8000b34 <__addsf3>
 8006f02:	3c01      	subs	r4, #1
 8006f04:	2c00      	cmp	r4, #0
 8006f06:	daf8      	bge.n	8006efa <__kernel_rem_pio2f+0x46a>
 8006f08:	b10d      	cbz	r5, 8006f0e <__kernel_rem_pio2f+0x47e>
 8006f0a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006f0e:	9b00      	ldr	r3, [sp, #0]
 8006f10:	6018      	str	r0, [r3, #0]
 8006f12:	e7d0      	b.n	8006eb6 <__kernel_rem_pio2f+0x426>
 8006f14:	2000      	movs	r0, #0
 8006f16:	af32      	add	r7, sp, #200	; 0xc8
 8006f18:	e7f4      	b.n	8006f04 <__kernel_rem_pio2f+0x474>
 8006f1a:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8006f1e:	f7f9 fe09 	bl	8000b34 <__addsf3>
 8006f22:	3f01      	subs	r7, #1
 8006f24:	2f00      	cmp	r7, #0
 8006f26:	daf8      	bge.n	8006f1a <__kernel_rem_pio2f+0x48a>
 8006f28:	b1bd      	cbz	r5, 8006f5a <__kernel_rem_pio2f+0x4ca>
 8006f2a:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 8006f2e:	9a00      	ldr	r2, [sp, #0]
 8006f30:	4601      	mov	r1, r0
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8006f36:	f7f9 fdfb 	bl	8000b30 <__aeabi_fsub>
 8006f3a:	2701      	movs	r7, #1
 8006f3c:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8006f40:	42bc      	cmp	r4, r7
 8006f42:	da0c      	bge.n	8006f5e <__kernel_rem_pio2f+0x4ce>
 8006f44:	b10d      	cbz	r5, 8006f4a <__kernel_rem_pio2f+0x4ba>
 8006f46:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006f4a:	9b00      	ldr	r3, [sp, #0]
 8006f4c:	6058      	str	r0, [r3, #4]
 8006f4e:	e7b2      	b.n	8006eb6 <__kernel_rem_pio2f+0x426>
 8006f50:	4627      	mov	r7, r4
 8006f52:	2000      	movs	r0, #0
 8006f54:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8006f58:	e7e4      	b.n	8006f24 <__kernel_rem_pio2f+0x494>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	e7e7      	b.n	8006f2e <__kernel_rem_pio2f+0x49e>
 8006f5e:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8006f62:	f7f9 fde7 	bl	8000b34 <__addsf3>
 8006f66:	3701      	adds	r7, #1
 8006f68:	e7ea      	b.n	8006f40 <__kernel_rem_pio2f+0x4b0>
 8006f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006f6e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8006f72:	4619      	mov	r1, r3
 8006f74:	4610      	mov	r0, r2
 8006f76:	9302      	str	r3, [sp, #8]
 8006f78:	9201      	str	r2, [sp, #4]
 8006f7a:	f7f9 fddb 	bl	8000b34 <__addsf3>
 8006f7e:	9a01      	ldr	r2, [sp, #4]
 8006f80:	4601      	mov	r1, r0
 8006f82:	4681      	mov	r9, r0
 8006f84:	4610      	mov	r0, r2
 8006f86:	f7f9 fdd3 	bl	8000b30 <__aeabi_fsub>
 8006f8a:	9b02      	ldr	r3, [sp, #8]
 8006f8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f90:	4619      	mov	r1, r3
 8006f92:	f7f9 fdcf 	bl	8000b34 <__addsf3>
 8006f96:	f848 0904 	str.w	r0, [r8], #-4
 8006f9a:	f8c8 9000 	str.w	r9, [r8]
 8006f9e:	e798      	b.n	8006ed2 <__kernel_rem_pio2f+0x442>
 8006fa0:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8006fa4:	f8d7 a000 	ldr.w	sl, [r7]
 8006fa8:	4618      	mov	r0, r3
 8006faa:	4651      	mov	r1, sl
 8006fac:	9301      	str	r3, [sp, #4]
 8006fae:	f7f9 fdc1 	bl	8000b34 <__addsf3>
 8006fb2:	9b01      	ldr	r3, [sp, #4]
 8006fb4:	4601      	mov	r1, r0
 8006fb6:	4680      	mov	r8, r0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7f9 fdb9 	bl	8000b30 <__aeabi_fsub>
 8006fbe:	4651      	mov	r1, sl
 8006fc0:	f7f9 fdb8 	bl	8000b34 <__addsf3>
 8006fc4:	f847 0904 	str.w	r0, [r7], #-4
 8006fc8:	f109 39ff 	add.w	r9, r9, #4294967295
 8006fcc:	f8c7 8000 	str.w	r8, [r7]
 8006fd0:	e783      	b.n	8006eda <__kernel_rem_pio2f+0x44a>
 8006fd2:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8006fd6:	f7f9 fdad 	bl	8000b34 <__addsf3>
 8006fda:	3c01      	subs	r4, #1
 8006fdc:	e781      	b.n	8006ee2 <__kernel_rem_pio2f+0x452>
 8006fde:	9900      	ldr	r1, [sp, #0]
 8006fe0:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8006fe4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006fe8:	600a      	str	r2, [r1, #0]
 8006fea:	604b      	str	r3, [r1, #4]
 8006fec:	460a      	mov	r2, r1
 8006fee:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8006ff2:	e780      	b.n	8006ef6 <__kernel_rem_pio2f+0x466>

08006ff4 <__kernel_sinf>:
 8006ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 8006ffc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007000:	4604      	mov	r4, r0
 8007002:	460f      	mov	r7, r1
 8007004:	4691      	mov	r9, r2
 8007006:	da03      	bge.n	8007010 <__kernel_sinf+0x1c>
 8007008:	f7fa f862 	bl	80010d0 <__aeabi_f2iz>
 800700c:	2800      	cmp	r0, #0
 800700e:	d035      	beq.n	800707c <__kernel_sinf+0x88>
 8007010:	4621      	mov	r1, r4
 8007012:	4620      	mov	r0, r4
 8007014:	f7f9 fe96 	bl	8000d44 <__aeabi_fmul>
 8007018:	4605      	mov	r5, r0
 800701a:	4601      	mov	r1, r0
 800701c:	4620      	mov	r0, r4
 800701e:	f7f9 fe91 	bl	8000d44 <__aeabi_fmul>
 8007022:	4929      	ldr	r1, [pc, #164]	; (80070c8 <__kernel_sinf+0xd4>)
 8007024:	4606      	mov	r6, r0
 8007026:	4628      	mov	r0, r5
 8007028:	f7f9 fe8c 	bl	8000d44 <__aeabi_fmul>
 800702c:	4927      	ldr	r1, [pc, #156]	; (80070cc <__kernel_sinf+0xd8>)
 800702e:	f7f9 fd7f 	bl	8000b30 <__aeabi_fsub>
 8007032:	4629      	mov	r1, r5
 8007034:	f7f9 fe86 	bl	8000d44 <__aeabi_fmul>
 8007038:	4925      	ldr	r1, [pc, #148]	; (80070d0 <__kernel_sinf+0xdc>)
 800703a:	f7f9 fd7b 	bl	8000b34 <__addsf3>
 800703e:	4629      	mov	r1, r5
 8007040:	f7f9 fe80 	bl	8000d44 <__aeabi_fmul>
 8007044:	4923      	ldr	r1, [pc, #140]	; (80070d4 <__kernel_sinf+0xe0>)
 8007046:	f7f9 fd73 	bl	8000b30 <__aeabi_fsub>
 800704a:	4629      	mov	r1, r5
 800704c:	f7f9 fe7a 	bl	8000d44 <__aeabi_fmul>
 8007050:	4921      	ldr	r1, [pc, #132]	; (80070d8 <__kernel_sinf+0xe4>)
 8007052:	f7f9 fd6f 	bl	8000b34 <__addsf3>
 8007056:	4680      	mov	r8, r0
 8007058:	f1b9 0f00 	cmp.w	r9, #0
 800705c:	d111      	bne.n	8007082 <__kernel_sinf+0x8e>
 800705e:	4601      	mov	r1, r0
 8007060:	4628      	mov	r0, r5
 8007062:	f7f9 fe6f 	bl	8000d44 <__aeabi_fmul>
 8007066:	491d      	ldr	r1, [pc, #116]	; (80070dc <__kernel_sinf+0xe8>)
 8007068:	f7f9 fd62 	bl	8000b30 <__aeabi_fsub>
 800706c:	4631      	mov	r1, r6
 800706e:	f7f9 fe69 	bl	8000d44 <__aeabi_fmul>
 8007072:	4601      	mov	r1, r0
 8007074:	4620      	mov	r0, r4
 8007076:	f7f9 fd5d 	bl	8000b34 <__addsf3>
 800707a:	4604      	mov	r4, r0
 800707c:	4620      	mov	r0, r4
 800707e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007082:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007086:	4638      	mov	r0, r7
 8007088:	f7f9 fe5c 	bl	8000d44 <__aeabi_fmul>
 800708c:	4641      	mov	r1, r8
 800708e:	4681      	mov	r9, r0
 8007090:	4630      	mov	r0, r6
 8007092:	f7f9 fe57 	bl	8000d44 <__aeabi_fmul>
 8007096:	4601      	mov	r1, r0
 8007098:	4648      	mov	r0, r9
 800709a:	f7f9 fd49 	bl	8000b30 <__aeabi_fsub>
 800709e:	4629      	mov	r1, r5
 80070a0:	f7f9 fe50 	bl	8000d44 <__aeabi_fmul>
 80070a4:	4639      	mov	r1, r7
 80070a6:	f7f9 fd43 	bl	8000b30 <__aeabi_fsub>
 80070aa:	490c      	ldr	r1, [pc, #48]	; (80070dc <__kernel_sinf+0xe8>)
 80070ac:	4605      	mov	r5, r0
 80070ae:	4630      	mov	r0, r6
 80070b0:	f7f9 fe48 	bl	8000d44 <__aeabi_fmul>
 80070b4:	4601      	mov	r1, r0
 80070b6:	4628      	mov	r0, r5
 80070b8:	f7f9 fd3c 	bl	8000b34 <__addsf3>
 80070bc:	4601      	mov	r1, r0
 80070be:	4620      	mov	r0, r4
 80070c0:	f7f9 fd36 	bl	8000b30 <__aeabi_fsub>
 80070c4:	e7d9      	b.n	800707a <__kernel_sinf+0x86>
 80070c6:	bf00      	nop
 80070c8:	2f2ec9d3 	.word	0x2f2ec9d3
 80070cc:	32d72f34 	.word	0x32d72f34
 80070d0:	3638ef1b 	.word	0x3638ef1b
 80070d4:	39500d01 	.word	0x39500d01
 80070d8:	3c088889 	.word	0x3c088889
 80070dc:	3e2aaaab 	.word	0x3e2aaaab

080070e0 <fabsf>:
 80070e0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80070e4:	4770      	bx	lr
	...

080070e8 <floorf>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80070ee:	3d7f      	subs	r5, #127	; 0x7f
 80070f0:	2d16      	cmp	r5, #22
 80070f2:	4601      	mov	r1, r0
 80070f4:	4604      	mov	r4, r0
 80070f6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80070fa:	dc26      	bgt.n	800714a <floorf+0x62>
 80070fc:	2d00      	cmp	r5, #0
 80070fe:	da0e      	bge.n	800711e <floorf+0x36>
 8007100:	4917      	ldr	r1, [pc, #92]	; (8007160 <floorf+0x78>)
 8007102:	f7f9 fd17 	bl	8000b34 <__addsf3>
 8007106:	2100      	movs	r1, #0
 8007108:	f7f9 ffd8 	bl	80010bc <__aeabi_fcmpgt>
 800710c:	b128      	cbz	r0, 800711a <floorf+0x32>
 800710e:	2c00      	cmp	r4, #0
 8007110:	da23      	bge.n	800715a <floorf+0x72>
 8007112:	4b14      	ldr	r3, [pc, #80]	; (8007164 <floorf+0x7c>)
 8007114:	2e00      	cmp	r6, #0
 8007116:	bf18      	it	ne
 8007118:	461c      	movne	r4, r3
 800711a:	4621      	mov	r1, r4
 800711c:	e01b      	b.n	8007156 <floorf+0x6e>
 800711e:	4e12      	ldr	r6, [pc, #72]	; (8007168 <floorf+0x80>)
 8007120:	412e      	asrs	r6, r5
 8007122:	4230      	tst	r0, r6
 8007124:	d017      	beq.n	8007156 <floorf+0x6e>
 8007126:	490e      	ldr	r1, [pc, #56]	; (8007160 <floorf+0x78>)
 8007128:	f7f9 fd04 	bl	8000b34 <__addsf3>
 800712c:	2100      	movs	r1, #0
 800712e:	f7f9 ffc5 	bl	80010bc <__aeabi_fcmpgt>
 8007132:	2800      	cmp	r0, #0
 8007134:	d0f1      	beq.n	800711a <floorf+0x32>
 8007136:	2c00      	cmp	r4, #0
 8007138:	bfbe      	ittt	lt
 800713a:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800713e:	fa43 f505 	asrlt.w	r5, r3, r5
 8007142:	1964      	addlt	r4, r4, r5
 8007144:	ea24 0406 	bic.w	r4, r4, r6
 8007148:	e7e7      	b.n	800711a <floorf+0x32>
 800714a:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800714e:	d302      	bcc.n	8007156 <floorf+0x6e>
 8007150:	f7f9 fcf0 	bl	8000b34 <__addsf3>
 8007154:	4601      	mov	r1, r0
 8007156:	4608      	mov	r0, r1
 8007158:	bd70      	pop	{r4, r5, r6, pc}
 800715a:	2400      	movs	r4, #0
 800715c:	e7dd      	b.n	800711a <floorf+0x32>
 800715e:	bf00      	nop
 8007160:	7149f2ca 	.word	0x7149f2ca
 8007164:	bf800000 	.word	0xbf800000
 8007168:	007fffff 	.word	0x007fffff

0800716c <scalbnf>:
 800716c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8007170:	b538      	push	{r3, r4, r5, lr}
 8007172:	4603      	mov	r3, r0
 8007174:	460d      	mov	r5, r1
 8007176:	4604      	mov	r4, r0
 8007178:	d02a      	beq.n	80071d0 <scalbnf+0x64>
 800717a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800717e:	d304      	bcc.n	800718a <scalbnf+0x1e>
 8007180:	4601      	mov	r1, r0
 8007182:	f7f9 fcd7 	bl	8000b34 <__addsf3>
 8007186:	4603      	mov	r3, r0
 8007188:	e022      	b.n	80071d0 <scalbnf+0x64>
 800718a:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800718e:	d117      	bne.n	80071c0 <scalbnf+0x54>
 8007190:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8007194:	f7f9 fdd6 	bl	8000d44 <__aeabi_fmul>
 8007198:	4a17      	ldr	r2, [pc, #92]	; (80071f8 <scalbnf+0x8c>)
 800719a:	4603      	mov	r3, r0
 800719c:	4295      	cmp	r5, r2
 800719e:	db0b      	blt.n	80071b8 <scalbnf+0x4c>
 80071a0:	4604      	mov	r4, r0
 80071a2:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80071a6:	3a19      	subs	r2, #25
 80071a8:	442a      	add	r2, r5
 80071aa:	2afe      	cmp	r2, #254	; 0xfe
 80071ac:	dd0a      	ble.n	80071c4 <scalbnf+0x58>
 80071ae:	4913      	ldr	r1, [pc, #76]	; (80071fc <scalbnf+0x90>)
 80071b0:	4618      	mov	r0, r3
 80071b2:	f361 001e 	bfi	r0, r1, #0, #31
 80071b6:	e000      	b.n	80071ba <scalbnf+0x4e>
 80071b8:	4911      	ldr	r1, [pc, #68]	; (8007200 <scalbnf+0x94>)
 80071ba:	f7f9 fdc3 	bl	8000d44 <__aeabi_fmul>
 80071be:	e7e2      	b.n	8007186 <scalbnf+0x1a>
 80071c0:	0dd2      	lsrs	r2, r2, #23
 80071c2:	e7f1      	b.n	80071a8 <scalbnf+0x3c>
 80071c4:	2a00      	cmp	r2, #0
 80071c6:	dd05      	ble.n	80071d4 <scalbnf+0x68>
 80071c8:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 80071cc:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 80071d0:	4618      	mov	r0, r3
 80071d2:	bd38      	pop	{r3, r4, r5, pc}
 80071d4:	f112 0f16 	cmn.w	r2, #22
 80071d8:	da05      	bge.n	80071e6 <scalbnf+0x7a>
 80071da:	f24c 3250 	movw	r2, #50000	; 0xc350
 80071de:	4295      	cmp	r5, r2
 80071e0:	dce5      	bgt.n	80071ae <scalbnf+0x42>
 80071e2:	4907      	ldr	r1, [pc, #28]	; (8007200 <scalbnf+0x94>)
 80071e4:	e7e4      	b.n	80071b0 <scalbnf+0x44>
 80071e6:	3219      	adds	r2, #25
 80071e8:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 80071ec:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80071f0:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 80071f4:	e7e1      	b.n	80071ba <scalbnf+0x4e>
 80071f6:	bf00      	nop
 80071f8:	ffff3cb0 	.word	0xffff3cb0
 80071fc:	7149f2ca 	.word	0x7149f2ca
 8007200:	0da24260 	.word	0x0da24260

08007204 <_init>:
 8007204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007206:	bf00      	nop
 8007208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720a:	bc08      	pop	{r3}
 800720c:	469e      	mov	lr, r3
 800720e:	4770      	bx	lr

08007210 <_fini>:
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	bf00      	nop
 8007214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007216:	bc08      	pop	{r3}
 8007218:	469e      	mov	lr, r3
 800721a:	4770      	bx	lr
