
mmWave_RADAR_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e60  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08005f70  08005f70  00015f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063a4  080063a4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080063a4  080063a4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080063a4  080063a4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063a4  080063a4  000163a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080063ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  200001dc  08006588  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08006588  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000053a9  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001663  00000000  00000000  000255ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000630  00000000  00000000  00026c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000558  00000000  00000000  00027248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017aad  00000000  00000000  000277a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008541  00000000  00000000  0003f24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083ec7  00000000  00000000  0004778e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cb655  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002970  00000000  00000000  000cb6a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f58 	.word	0x08005f58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08005f58 	.word	0x08005f58

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <lcdStrobe>:
//pin declarations
#define RS GPIO_PIN_12
#define EN GPIO_PIN_13

void lcdStrobe()
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, EN, 1);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <lcdStrobe+0x28>)
 800103c:	f001 faec 	bl	8002618 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001040:	2005      	movs	r0, #5
 8001042:	f000 fc0d 	bl	8001860 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, EN, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800104c:	4802      	ldr	r0, [pc, #8]	; (8001058 <lcdStrobe+0x28>)
 800104e:	f001 fae3 	bl	8002618 <HAL_GPIO_WritePin>
}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40010800 	.word	0x40010800

0800105c <lcdWriteData>:

void lcdWriteData(uint8_t data)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR = data;
 8001066:	4a07      	ldr	r2, [pc, #28]	; (8001084 <lcdWriteData+0x28>)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	60d3      	str	r3, [r2, #12]
	HAL_GPIO_WritePin(GPIOA, RS, 1); //set RS to HIGH to send data
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001072:	4804      	ldr	r0, [pc, #16]	; (8001084 <lcdWriteData+0x28>)
 8001074:	f001 fad0 	bl	8002618 <HAL_GPIO_WritePin>
	lcdStrobe();
 8001078:	f7ff ffda 	bl	8001030 <lcdStrobe>
}
 800107c:	bf00      	nop
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40010800 	.word	0x40010800

08001088 <lcdWriteCmd>:

void lcdWriteCmd(uint8_t data)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
	GPIOA->ODR = data;
 8001092:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <lcdWriteCmd+0x28>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	60d3      	str	r3, [r2, #12]
	HAL_GPIO_WritePin(GPIOA, RS, 0);//set RS to LOW to send commands
 8001098:	2200      	movs	r2, #0
 800109a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800109e:	4804      	ldr	r0, [pc, #16]	; (80010b0 <lcdWriteCmd+0x28>)
 80010a0:	f001 faba 	bl	8002618 <HAL_GPIO_WritePin>
	lcdStrobe();
 80010a4:	f7ff ffc4 	bl	8001030 <lcdStrobe>
}
 80010a8:	bf00      	nop
 80010aa:	3708      	adds	r7, #8
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40010800 	.word	0x40010800

080010b4 <lcdInit>:

void lcdInit()
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 80010b8:	2032      	movs	r0, #50	; 0x32
 80010ba:	f000 fbd1 	bl	8001860 <HAL_Delay>
	lcdWriteCmd(0x38);
 80010be:	2038      	movs	r0, #56	; 0x38
 80010c0:	f7ff ffe2 	bl	8001088 <lcdWriteCmd>
	lcdStrobe();
 80010c4:	f7ff ffb4 	bl	8001030 <lcdStrobe>

	lcdWriteCmd(0x0C);
 80010c8:	200c      	movs	r0, #12
 80010ca:	f7ff ffdd 	bl	8001088 <lcdWriteCmd>
	lcdStrobe();
 80010ce:	f7ff ffaf 	bl	8001030 <lcdStrobe>

	lcdWriteCmd(0x06);
 80010d2:	2006      	movs	r0, #6
 80010d4:	f7ff ffd8 	bl	8001088 <lcdWriteCmd>
	lcdStrobe();
 80010d8:	f7ff ffaa 	bl	8001030 <lcdStrobe>

	lcdWriteCmd(0x01);
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff ffd3 	bl	8001088 <lcdWriteCmd>
	lcdStrobe();
 80010e2:	f7ff ffa5 	bl	8001030 <lcdStrobe>

	lcdWriteCmd(0x80);
 80010e6:	2080      	movs	r0, #128	; 0x80
 80010e8:	f7ff ffce 	bl	8001088 <lcdWriteCmd>
	lcdStrobe();
 80010ec:	f7ff ffa0 	bl	8001030 <lcdStrobe>
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <lcdWriteString>:


void lcdWriteString(char const *s)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	while(*s)
 80010fc:	e006      	b.n	800110c <lcdWriteString+0x18>
	{
		lcdWriteData(*s++);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ffa8 	bl	800105c <lcdWriteData>
	while(*s)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d1f4      	bne.n	80010fe <lcdWriteString+0xa>
	}

}
 8001114:	bf00      	nop
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <lcdClear>:

void lcdClear()
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
	lcdWriteCmd(0x01);
 8001122:	2001      	movs	r0, #1
 8001124:	f7ff ffb0 	bl	8001088 <lcdWriteCmd>
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}

0800112c <adcToDistance>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

float adcToDistance(uint16_t adcValue) {
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	80fb      	strh	r3, [r7, #6]
	//konverzija ocitavanja ADC-a u metre
    return (float)adcValue * 60 / 4095.0;
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fd5b 	bl	8000bf4 <__aeabi_ui2f>
 800113e:	4603      	mov	r3, r0
 8001140:	4906      	ldr	r1, [pc, #24]	; (800115c <adcToDistance+0x30>)
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fdae 	bl	8000ca4 <__aeabi_fmul>
 8001148:	4603      	mov	r3, r0
 800114a:	4905      	ldr	r1, [pc, #20]	; (8001160 <adcToDistance+0x34>)
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff fe5d 	bl	8000e0c <__aeabi_fdiv>
 8001152:	4603      	mov	r3, r0
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	42700000 	.word	0x42700000
 8001160:	457ff000 	.word	0x457ff000

08001164 <floatToString>:

//pomocna funkcija za konverziju float u string
void floatToString(char *buffer, int bufferSize, float value) {
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b087      	sub	sp, #28
 8001168:	af02      	add	r7, sp, #8
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	607a      	str	r2, [r7, #4]
    snprintf(buffer, bufferSize, "%.2f", value);
 8001170:	68bc      	ldr	r4, [r7, #8]
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff f958 	bl	8000428 <__aeabi_f2d>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	e9cd 2300 	strd	r2, r3, [sp]
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <floatToString+0x30>)
 8001182:	4621      	mov	r1, r4
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f002 fc59 	bl	8003a3c <sniprintf>
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	bd90      	pop	{r4, r7, pc}
 8001192:	bf00      	nop
 8001194:	08005f70 	.word	0x08005f70

08001198 <warningFlash>:

//pomocna funkcija za paljenje i gasenje led diode
void warningFlash(GPIO_TypeDef *port, uint16_t pin){
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]

	if(!flashWarning)
 80011a4:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <warningFlash+0x50>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d106      	bne.n	80011ba <warningFlash+0x22>
	{
		HAL_GPIO_WritePin(port, pin, 1);
 80011ac:	887b      	ldrh	r3, [r7, #2]
 80011ae:	2201      	movs	r2, #1
 80011b0:	4619      	mov	r1, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f001 fa30 	bl	8002618 <HAL_GPIO_WritePin>
		return;
 80011b8:	e012      	b.n	80011e0 <warningFlash+0x48>
	}

	HAL_GPIO_WritePin(port, pin, 0);
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	2200      	movs	r2, #0
 80011be:	4619      	mov	r1, r3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f001 fa29 	bl	8002618 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011c6:	2064      	movs	r0, #100	; 0x64
 80011c8:	f000 fb4a 	bl	8001860 <HAL_Delay>
	HAL_GPIO_WritePin(port, pin, 1);
 80011cc:	887b      	ldrh	r3, [r7, #2]
 80011ce:	2201      	movs	r2, #1
 80011d0:	4619      	mov	r1, r3
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f001 fa20 	bl	8002618 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011d8:	2064      	movs	r0, #100	; 0x64
 80011da:	f000 fb41 	bl	8001860 <HAL_Delay>
	return;
 80011de:	bf00      	nop
}
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000228 	.word	0x20000228

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f000 fad3 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f6:	f000 f875 	bl	80012e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011fa:	f000 f901 	bl	8001400 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011fe:	f000 f8c1 	bl	8001384 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  lcdInit();
 8001202:	f7ff ff57 	bl	80010b4 <lcdInit>

  uint16_t adcValue = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	83fb      	strh	r3, [r7, #30]
  uint16_t adcValueSave = 0;
 800120a:	2300      	movs	r3, #0
 800120c:	83bb      	strh	r3, [r7, #28]
  float simulatedDistance = 0.0;
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
  char distanceString[20];
  int writeAgain = TRUE;
 8001214:	2301      	movs	r3, #1
 8001216:	61bb      	str	r3, [r7, #24]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //ocitavanje vrednosti potenciometra
	  HAL_ADC_Start(&hadc1);
 8001218:	482c      	ldr	r0, [pc, #176]	; (80012cc <main+0xe0>)
 800121a:	f000 fc1d 	bl	8001a58 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) {
 800121e:	f04f 31ff 	mov.w	r1, #4294967295
 8001222:	482a      	ldr	r0, [pc, #168]	; (80012cc <main+0xe0>)
 8001224:	f000 fcf2 	bl	8001c0c <HAL_ADC_PollForConversion>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d104      	bne.n	8001238 <main+0x4c>
		  adcValue = HAL_ADC_GetValue(&hadc1);
 800122e:	4827      	ldr	r0, [pc, #156]	; (80012cc <main+0xe0>)
 8001230:	f000 fdf2 	bl	8001e18 <HAL_ADC_GetValue>
 8001234:	4603      	mov	r3, r0
 8001236:	83fb      	strh	r3, [r7, #30]
	  }
	  HAL_ADC_Stop(&hadc1);
 8001238:	4824      	ldr	r0, [pc, #144]	; (80012cc <main+0xe0>)
 800123a:	f000 fcbb 	bl	8001bb4 <HAL_ADC_Stop>

	  //prebacivanje distance
	  simulatedDistance = adcToDistance(adcValue);
 800123e:	8bfb      	ldrh	r3, [r7, #30]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff73 	bl	800112c <adcToDistance>
 8001246:	6178      	str	r0, [r7, #20]
	  floatToString(distanceString, sizeof(distanceString), simulatedDistance);
 8001248:	463b      	mov	r3, r7
 800124a:	697a      	ldr	r2, [r7, #20]
 800124c:	2114      	movs	r1, #20
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff88 	bl	8001164 <floatToString>

	  if(writeAgain)//provera da li se vrednost ocitana sa ADC-a izmenila
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d029      	beq.n	80012ae <main+0xc2>
	  {

		  if(simulatedDistance < 5.0)
 800125a:	491d      	ldr	r1, [pc, #116]	; (80012d0 <main+0xe4>)
 800125c:	6978      	ldr	r0, [r7, #20]
 800125e:	f7ff febf 	bl	8000fe0 <__aeabi_fcmplt>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d012      	beq.n	800128e <main+0xa2>
		  {
			  lcdClear();
 8001268:	f7ff ff59 	bl	800111e <lcdClear>
			  lcdWriteString("COLLISION_WARN");
 800126c:	4819      	ldr	r0, [pc, #100]	; (80012d4 <main+0xe8>)
 800126e:	f7ff ff41 	bl	80010f4 <lcdWriteString>
			  lcdWriteCmd(0xC0);//prebacivanje kursora LCD-a na sledecu liniju
 8001272:	20c0      	movs	r0, #192	; 0xc0
 8001274:	f7ff ff08 	bl	8001088 <lcdWriteCmd>
			  lcdWriteString(distanceString);
 8001278:	463b      	mov	r3, r7
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ff3a 	bl	80010f4 <lcdWriteString>
			  lcdWriteString("m");
 8001280:	4815      	ldr	r0, [pc, #84]	; (80012d8 <main+0xec>)
 8001282:	f7ff ff37 	bl	80010f4 <lcdWriteString>
			  flashWarning = TRUE;
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <main+0xf0>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	e00b      	b.n	80012a6 <main+0xba>
		  }
		  else
		  {
			  lcdClear();
 800128e:	f7ff ff46 	bl	800111e <lcdClear>
			  lcdWriteString(distanceString);
 8001292:	463b      	mov	r3, r7
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff2d 	bl	80010f4 <lcdWriteString>
			  lcdWriteString("m");
 800129a:	480f      	ldr	r0, [pc, #60]	; (80012d8 <main+0xec>)
 800129c:	f7ff ff2a 	bl	80010f4 <lcdWriteString>
			  flashWarning = FALSE;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <main+0xf0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
		  }

		  writeAgain = FALSE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
		  adcValueSave = adcValue;
 80012aa:	8bfb      	ldrh	r3, [r7, #30]
 80012ac:	83bb      	strh	r3, [r7, #28]
	  }


	  warningFlash(GPIOB, GPIO_PIN_15);
 80012ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b2:	480b      	ldr	r0, [pc, #44]	; (80012e0 <main+0xf4>)
 80012b4:	f7ff ff70 	bl	8001198 <warningFlash>


	  if(adcValueSave != adcValue)
 80012b8:	8bba      	ldrh	r2, [r7, #28]
 80012ba:	8bfb      	ldrh	r3, [r7, #30]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d001      	beq.n	80012c4 <main+0xd8>
	  {
		  writeAgain = TRUE;
 80012c0:	2301      	movs	r3, #1
 80012c2:	61bb      	str	r3, [r7, #24]
	  }


	  HAL_Delay(150);
 80012c4:	2096      	movs	r0, #150	; 0x96
 80012c6:	f000 facb 	bl	8001860 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 80012ca:	e7a5      	b.n	8001218 <main+0x2c>
 80012cc:	200001f8 	.word	0x200001f8
 80012d0:	40a00000 	.word	0x40a00000
 80012d4:	08005f78 	.word	0x08005f78
 80012d8:	08005f88 	.word	0x08005f88
 80012dc:	20000228 	.word	0x20000228
 80012e0:	40010c00 	.word	0x40010c00

080012e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b094      	sub	sp, #80	; 0x50
 80012e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ee:	2228      	movs	r2, #40	; 0x28
 80012f0:	2100      	movs	r1, #0
 80012f2:	4618      	mov	r0, r3
 80012f4:	f001 ff3a 	bl	800316c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001314:	2302      	movs	r3, #2
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131c:	2310      	movs	r3, #16
 800131e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001320:	2300      	movs	r3, #0
 8001322:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001328:	4618      	mov	r0, r3
 800132a:	f001 f98d 	bl	8002648 <HAL_RCC_OscConfig>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001334:	f000 f8ba 	bl	80014ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001338:	230f      	movs	r3, #15
 800133a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800133c:	2300      	movs	r3, #0
 800133e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001348:	2300      	movs	r3, #0
 800134a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f001 fbfa 	bl	8002b4c <HAL_RCC_ClockConfig>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800135e:	f000 f8a5 	bl	80014ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001362:	2302      	movs	r3, #2
 8001364:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4618      	mov	r0, r3
 800136e:	f001 fd67 	bl	8002e40 <HAL_RCCEx_PeriphCLKConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001378:	f000 f898 	bl	80014ac <Error_Handler>
  }
}
 800137c:	bf00      	nop
 800137e:	3750      	adds	r7, #80	; 0x50
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <MX_ADC1_Init+0x74>)
 8001396:	4a19      	ldr	r2, [pc, #100]	; (80013fc <MX_ADC1_Init+0x78>)
 8001398:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_ADC1_Init+0x74>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <MX_ADC1_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_ADC1_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <MX_ADC1_Init+0x74>)
 80013ae:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80013b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b4:	4b10      	ldr	r3, [pc, #64]	; (80013f8 <MX_ADC1_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80013ba:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_ADC1_Init+0x74>)
 80013bc:	2201      	movs	r2, #1
 80013be:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013c0:	480d      	ldr	r0, [pc, #52]	; (80013f8 <MX_ADC1_Init+0x74>)
 80013c2:	f000 fa71 	bl	80018a8 <HAL_ADC_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80013cc:	f000 f86e 	bl	80014ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013d0:	2308      	movs	r3, #8
 80013d2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013dc:	1d3b      	adds	r3, r7, #4
 80013de:	4619      	mov	r1, r3
 80013e0:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_ADC1_Init+0x74>)
 80013e2:	f000 fd25 	bl	8001e30 <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013ec:	f000 f85e 	bl	80014ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	3710      	adds	r7, #16
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200001f8 	.word	0x200001f8
 80013fc:	40012400 	.word	0x40012400

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001414:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <MX_GPIO_Init+0xa0>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a21      	ldr	r2, [pc, #132]	; (80014a0 <MX_GPIO_Init+0xa0>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b1f      	ldr	r3, [pc, #124]	; (80014a0 <MX_GPIO_Init+0xa0>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	607b      	str	r3, [r7, #4]
 800142a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <MX_GPIO_Init+0xa0>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a1b      	ldr	r2, [pc, #108]	; (80014a0 <MX_GPIO_Init+0xa0>)
 8001432:	f043 0308 	orr.w	r3, r3, #8
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <MX_GPIO_Init+0xa0>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001444:	2200      	movs	r2, #0
 8001446:	f243 01ff 	movw	r1, #12543	; 0x30ff
 800144a:	4816      	ldr	r0, [pc, #88]	; (80014a4 <MX_GPIO_Init+0xa4>)
 800144c:	f001 f8e4 	bl	8002618 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001450:	2201      	movs	r2, #1
 8001452:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001456:	4814      	ldr	r0, [pc, #80]	; (80014a8 <MX_GPIO_Init+0xa8>)
 8001458:	f001 f8de 	bl	8002618 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA12 PA13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800145c:	f243 03ff 	movw	r3, #12543	; 0x30ff
 8001460:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001462:	2301      	movs	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146a:	2302      	movs	r3, #2
 800146c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	4619      	mov	r1, r3
 8001474:	480b      	ldr	r0, [pc, #44]	; (80014a4 <MX_GPIO_Init+0xa4>)
 8001476:	f000 ff53 	bl	8002320 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800147a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800147e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001480:	2301      	movs	r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2302      	movs	r3, #2
 800148a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	4619      	mov	r1, r3
 8001492:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_GPIO_Init+0xa8>)
 8001494:	f000 ff44 	bl	8002320 <HAL_GPIO_Init>

}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40010800 	.word	0x40010800
 80014a8:	40010c00 	.word	0x40010c00

080014ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b0:	b672      	cpsid	i
}
 80014b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <Error_Handler+0x8>
	...

080014b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_MspInit+0x40>)
 80014c0:	699b      	ldr	r3, [r3, #24]
 80014c2:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <HAL_MspInit+0x40>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6193      	str	r3, [r2, #24]
 80014ca:	4b0b      	ldr	r3, [pc, #44]	; (80014f8 <HAL_MspInit+0x40>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d6:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <HAL_MspInit+0x40>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <HAL_MspInit+0x40>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	61d3      	str	r3, [r2, #28]
 80014e2:	4b05      	ldr	r3, [pc, #20]	; (80014f8 <HAL_MspInit+0x40>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr
 80014f8:	40021000 	.word	0x40021000

080014fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 0310 	add.w	r3, r7, #16
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a14      	ldr	r2, [pc, #80]	; (8001568 <HAL_ADC_MspInit+0x6c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d121      	bne.n	8001560 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800151c:	4b13      	ldr	r3, [pc, #76]	; (800156c <HAL_ADC_MspInit+0x70>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a12      	ldr	r2, [pc, #72]	; (800156c <HAL_ADC_MspInit+0x70>)
 8001522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_ADC_MspInit+0x70>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_ADC_MspInit+0x70>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a0c      	ldr	r2, [pc, #48]	; (800156c <HAL_ADC_MspInit+0x70>)
 800153a:	f043 0308 	orr.w	r3, r3, #8
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_ADC_MspInit+0x70>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800154c:	2301      	movs	r3, #1
 800154e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001550:	2303      	movs	r3, #3
 8001552:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0310 	add.w	r3, r7, #16
 8001558:	4619      	mov	r1, r3
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <HAL_ADC_MspInit+0x74>)
 800155c:	f000 fee0 	bl	8002320 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001560:	bf00      	nop
 8001562:	3720      	adds	r7, #32
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40012400 	.word	0x40012400
 800156c:	40021000 	.word	0x40021000
 8001570:	40010c00 	.word	0x40010c00

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr

0800159e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ba:	f000 f935 	bl	8001828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
	return 1;
 80015c6:	2301      	movs	r3, #1
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <_kill>:

int _kill(int pid, int sig)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015da:	f001 fd9d 	bl	8003118 <__errno>
 80015de:	4603      	mov	r3, r0
 80015e0:	2216      	movs	r2, #22
 80015e2:	601a      	str	r2, [r3, #0]
	return -1;
 80015e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <_exit>:

void _exit (int status)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80015f8:	f04f 31ff 	mov.w	r1, #4294967295
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ffe7 	bl	80015d0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001602:	e7fe      	b.n	8001602 <_exit+0x12>

08001604 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	e00a      	b.n	800162c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001616:	f3af 8000 	nop.w
 800161a:	4601      	mov	r1, r0
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	1c5a      	adds	r2, r3, #1
 8001620:	60ba      	str	r2, [r7, #8]
 8001622:	b2ca      	uxtb	r2, r1
 8001624:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	3301      	adds	r3, #1
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	429a      	cmp	r2, r3
 8001632:	dbf0      	blt.n	8001616 <_read+0x12>
	}

return len;
 8001634:	687b      	ldr	r3, [r7, #4]
}
 8001636:	4618      	mov	r0, r3
 8001638:	3718      	adds	r7, #24
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	60f8      	str	r0, [r7, #12]
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164a:	2300      	movs	r3, #0
 800164c:	617b      	str	r3, [r7, #20]
 800164e:	e009      	b.n	8001664 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	60ba      	str	r2, [r7, #8]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbf1      	blt.n	8001650 <_write+0x12>
	}
	return len;
 800166c:	687b      	ldr	r3, [r7, #4]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_close>:

int _close(int file)
{
 8001676:	b480      	push	{r7}
 8001678:	b083      	sub	sp, #12
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
	return -1;
 800167e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001682:	4618      	mov	r0, r3
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800169c:	605a      	str	r2, [r3, #4]
	return 0;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <_isatty>:

int _isatty(int file)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
	return 1;
 80016b2:	2301      	movs	r3, #1
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016be:	b480      	push	{r7}
 80016c0:	b085      	sub	sp, #20
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	60f8      	str	r0, [r7, #12]
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
	return 0;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr
	...

080016d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <_sbrk+0x5c>)
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <_sbrk+0x60>)
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <_sbrk+0x64>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <_sbrk+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	429a      	cmp	r2, r3
 8001706:	d207      	bcs.n	8001718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001708:	f001 fd06 	bl	8003118 <__errno>
 800170c:	4603      	mov	r3, r0
 800170e:	220c      	movs	r2, #12
 8001710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	e009      	b.n	800172c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <_sbrk+0x64>)
 8001728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20002800 	.word	0x20002800
 8001738:	00000400 	.word	0x00000400
 800173c:	2000022c 	.word	0x2000022c
 8001740:	20000248 	.word	0x20000248

08001744 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001750:	f7ff fff8 	bl	8001744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001756:	490c      	ldr	r1, [pc, #48]	; (8001788 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001758:	4a0c      	ldr	r2, [pc, #48]	; (800178c <LoopFillZerobss+0x16>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a09      	ldr	r2, [pc, #36]	; (8001790 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800176c:	4c09      	ldr	r4, [pc, #36]	; (8001794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800177a:	f001 fcd3 	bl	8003124 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800177e:	f7ff fd35 	bl	80011ec <main>
  bx lr
 8001782:	4770      	bx	lr
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800178c:	080063ac 	.word	0x080063ac
  ldr r2, =_sbss
 8001790:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001794:	20000244 	.word	0x20000244

08001798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC1_2_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_Init+0x28>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_Init+0x28>)
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 fd83 	bl	80022b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b2:	200f      	movs	r0, #15
 80017b4:	f000 f808 	bl	80017c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b8:	f7ff fe7e 	bl	80014b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40022000 	.word	0x40022000

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x54>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_InitTick+0x58>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 fd8d 	bl	8002306 <HAL_SYSTICK_Config>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00e      	b.n	8001814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d80a      	bhi.n	8001812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 fd63 	bl	80022ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <HAL_InitTick+0x5c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000000 	.word	0x20000000
 8001820:	20000008 	.word	0x20000008
 8001824:	20000004 	.word	0x20000004

08001828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_IncTick+0x1c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_IncTick+0x20>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4413      	add	r3, r2
 8001838:	4a03      	ldr	r2, [pc, #12]	; (8001848 <HAL_IncTick+0x20>)
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	20000008 	.word	0x20000008
 8001848:	20000230 	.word	0x20000230

0800184c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <HAL_GetTick+0x10>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000230 	.word	0x20000230

08001860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001868:	f7ff fff0 	bl	800184c <HAL_GetTick>
 800186c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001878:	d005      	beq.n	8001886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <HAL_Delay+0x44>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4413      	add	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001886:	bf00      	nop
 8001888:	f7ff ffe0 	bl	800184c <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	429a      	cmp	r2, r3
 8001896:	d8f7      	bhi.n	8001888 <HAL_Delay+0x28>
  {
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000008 	.word	0x20000008

080018a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0be      	b.n	8001a48 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d109      	bne.n	80018ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e6:	6878      	ldr	r0, [r7, #4]
 80018e8:	f7ff fe08 	bl	80014fc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f000 fbf1 	bl	80020d4 <ADC_ConversionStop_Disable>
 80018f2:	4603      	mov	r3, r0
 80018f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f040 8099 	bne.w	8001a36 <HAL_ADC_Init+0x18e>
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	2b00      	cmp	r3, #0
 8001908:	f040 8095 	bne.w	8001a36 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001910:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001914:	f023 0302 	bic.w	r3, r3, #2
 8001918:	f043 0202 	orr.w	r2, r3, #2
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001928:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7b1b      	ldrb	r3, [r3, #12]
 800192e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001930:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	4313      	orrs	r3, r2
 8001936:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001940:	d003      	beq.n	800194a <HAL_ADC_Init+0xa2>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d102      	bne.n	8001950 <HAL_ADC_Init+0xa8>
 800194a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800194e:	e000      	b.n	8001952 <HAL_ADC_Init+0xaa>
 8001950:	2300      	movs	r3, #0
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4313      	orrs	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7d1b      	ldrb	r3, [r3, #20]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d119      	bne.n	8001994 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	7b1b      	ldrb	r3, [r3, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d109      	bne.n	800197c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	3b01      	subs	r3, #1
 800196e:	035a      	lsls	r2, r3, #13
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	4313      	orrs	r3, r2
 8001974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	e00b      	b.n	8001994 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001980:	f043 0220 	orr.w	r2, r3, #32
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	f043 0201 	orr.w	r2, r3, #1
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	430a      	orrs	r2, r1
 80019a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <HAL_ADC_Init+0x1a8>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	68b9      	ldr	r1, [r7, #8]
 80019b8:	430b      	orrs	r3, r1
 80019ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c4:	d003      	beq.n	80019ce <HAL_ADC_Init+0x126>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d104      	bne.n	80019d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	051b      	lsls	r3, r3, #20
 80019d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689a      	ldr	r2, [r3, #8]
 80019f2:	4b18      	ldr	r3, [pc, #96]	; (8001a54 <HAL_ADC_Init+0x1ac>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	68ba      	ldr	r2, [r7, #8]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d10b      	bne.n	8001a14 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a06:	f023 0303 	bic.w	r3, r3, #3
 8001a0a:	f043 0201 	orr.w	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a12:	e018      	b.n	8001a46 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	f023 0312 	bic.w	r3, r3, #18
 8001a1c:	f043 0210 	orr.w	r2, r3, #16
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001a34:	e007      	b.n	8001a46 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	f043 0210 	orr.w	r2, r3, #16
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3718      	adds	r7, #24
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	ffe1f7fd 	.word	0xffe1f7fd
 8001a54:	ff1f0efe 	.word	0xff1f0efe

08001a58 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a60:	2300      	movs	r3, #0
 8001a62:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d101      	bne.n	8001a72 <HAL_ADC_Start+0x1a>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e098      	b.n	8001ba4 <HAL_ADC_Start+0x14c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 fad0 	bl	8002020 <ADC_Enable>
 8001a80:	4603      	mov	r3, r0
 8001a82:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f040 8087 	bne.w	8001b9a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a94:	f023 0301 	bic.w	r3, r3, #1
 8001a98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a41      	ldr	r2, [pc, #260]	; (8001bac <HAL_ADC_Start+0x154>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d105      	bne.n	8001ab6 <HAL_ADC_Start+0x5e>
 8001aaa:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <HAL_ADC_Start+0x158>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d115      	bne.n	8001ae2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d026      	beq.n	8001b1e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ad8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ae0:	e01d      	b.n	8001b1e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a2f      	ldr	r2, [pc, #188]	; (8001bb0 <HAL_ADC_Start+0x158>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <HAL_ADC_Start+0xaa>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a2b      	ldr	r2, [pc, #172]	; (8001bac <HAL_ADC_Start+0x154>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10d      	bne.n	8001b1e <HAL_ADC_Start+0xc6>
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_ADC_Start+0x158>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d007      	beq.n	8001b1e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b16:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d006      	beq.n	8001b38 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	f023 0206 	bic.w	r2, r3, #6
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b36:	e002      	b.n	8001b3e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f06f 0202 	mvn.w	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001b5a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001b5e:	d113      	bne.n	8001b88 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b64:	4a11      	ldr	r2, [pc, #68]	; (8001bac <HAL_ADC_Start+0x154>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d105      	bne.n	8001b76 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <HAL_ADC_Start+0x158>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d108      	bne.n	8001b88 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b84:	609a      	str	r2, [r3, #8]
 8001b86:	e00c      	b.n	8001ba2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	e003      	b.n	8001ba2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40012800 	.word	0x40012800
 8001bb0:	40012400 	.word	0x40012400

08001bb4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_Stop+0x1a>
 8001bca:	2302      	movs	r3, #2
 8001bcc:	e01a      	b.n	8001c04 <HAL_ADC_Stop+0x50>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fa7c 	bl	80020d4 <ADC_ConversionStop_Disable>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d109      	bne.n	8001bfa <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001bee:	f023 0301 	bic.w	r3, r3, #1
 8001bf2:	f043 0201 	orr.w	r2, r3, #1
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c22:	f7ff fe13 	bl	800184c <HAL_GetTick>
 8001c26:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00b      	beq.n	8001c4e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3a:	f043 0220 	orr.w	r2, r3, #32
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e0d3      	b.n	8001df6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d131      	bne.n	8001cc0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d12a      	bne.n	8001cc0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c6a:	e021      	b.n	8001cb0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c72:	d01d      	beq.n	8001cb0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <HAL_ADC_PollForConversion+0x7e>
 8001c7a:	f7ff fde7 	bl	800184c <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d212      	bcs.n	8001cb0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10b      	bne.n	8001cb0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9c:	f043 0204 	orr.w	r2, r3, #4
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e0a2      	b.n	8001df6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0d6      	beq.n	8001c6c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001cbe:	e070      	b.n	8001da2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001cc0:	4b4f      	ldr	r3, [pc, #316]	; (8001e00 <HAL_ADC_PollForConversion+0x1f4>)
 8001cc2:	681c      	ldr	r4, [r3, #0]
 8001cc4:	2002      	movs	r0, #2
 8001cc6:	f001 f971 	bl	8002fac <HAL_RCCEx_GetPeriphCLKFreq>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6919      	ldr	r1, [r3, #16]
 8001cd6:	4b4b      	ldr	r3, [pc, #300]	; (8001e04 <HAL_ADC_PollForConversion+0x1f8>)
 8001cd8:	400b      	ands	r3, r1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d118      	bne.n	8001d10 <HAL_ADC_PollForConversion+0x104>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68d9      	ldr	r1, [r3, #12]
 8001ce4:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <HAL_ADC_PollForConversion+0x1fc>)
 8001ce6:	400b      	ands	r3, r1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d111      	bne.n	8001d10 <HAL_ADC_PollForConversion+0x104>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6919      	ldr	r1, [r3, #16]
 8001cf2:	4b46      	ldr	r3, [pc, #280]	; (8001e0c <HAL_ADC_PollForConversion+0x200>)
 8001cf4:	400b      	ands	r3, r1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d108      	bne.n	8001d0c <HAL_ADC_PollForConversion+0x100>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	68d9      	ldr	r1, [r3, #12]
 8001d00:	4b43      	ldr	r3, [pc, #268]	; (8001e10 <HAL_ADC_PollForConversion+0x204>)
 8001d02:	400b      	ands	r3, r1
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_ADC_PollForConversion+0x100>
 8001d08:	2314      	movs	r3, #20
 8001d0a:	e020      	b.n	8001d4e <HAL_ADC_PollForConversion+0x142>
 8001d0c:	2329      	movs	r3, #41	; 0x29
 8001d0e:	e01e      	b.n	8001d4e <HAL_ADC_PollForConversion+0x142>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6919      	ldr	r1, [r3, #16]
 8001d16:	4b3d      	ldr	r3, [pc, #244]	; (8001e0c <HAL_ADC_PollForConversion+0x200>)
 8001d18:	400b      	ands	r3, r1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_ADC_PollForConversion+0x120>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68d9      	ldr	r1, [r3, #12]
 8001d24:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <HAL_ADC_PollForConversion+0x204>)
 8001d26:	400b      	ands	r3, r1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00d      	beq.n	8001d48 <HAL_ADC_PollForConversion+0x13c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6919      	ldr	r1, [r3, #16]
 8001d32:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <HAL_ADC_PollForConversion+0x208>)
 8001d34:	400b      	ands	r3, r1
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d108      	bne.n	8001d4c <HAL_ADC_PollForConversion+0x140>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68d9      	ldr	r1, [r3, #12]
 8001d40:	4b34      	ldr	r3, [pc, #208]	; (8001e14 <HAL_ADC_PollForConversion+0x208>)
 8001d42:	400b      	ands	r3, r1
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_ADC_PollForConversion+0x140>
 8001d48:	2354      	movs	r3, #84	; 0x54
 8001d4a:	e000      	b.n	8001d4e <HAL_ADC_PollForConversion+0x142>
 8001d4c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d54:	e021      	b.n	8001d9a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d5c:	d01a      	beq.n	8001d94 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <HAL_ADC_PollForConversion+0x168>
 8001d64:	f7ff fd72 	bl	800184c <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d20f      	bcs.n	8001d94 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d90b      	bls.n	8001d94 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d80:	f043 0204 	orr.w	r2, r3, #4
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e030      	b.n	8001df6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	3301      	adds	r3, #1
 8001d98:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d8d9      	bhi.n	8001d56 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f06f 0212 	mvn.w	r2, #18
 8001daa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001dc2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001dc6:	d115      	bne.n	8001df4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d111      	bne.n	8001df4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d105      	bne.n	8001df4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	371c      	adds	r7, #28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000000 	.word	0x20000000
 8001e04:	24924924 	.word	0x24924924
 8001e08:	00924924 	.word	0x00924924
 8001e0c:	12492492 	.word	0x12492492
 8001e10:	00492492 	.word	0x00492492
 8001e14:	00249249 	.word	0x00249249

08001e18 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bc80      	pop	{r7}
 8001e2e:	4770      	bx	lr

08001e30 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e30:	b480      	push	{r7}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x20>
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	e0dc      	b.n	800200a <HAL_ADC_ConfigChannel+0x1da>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d81c      	bhi.n	8001e9a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b05      	subs	r3, #5
 8001e72:	221f      	movs	r2, #31
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	4019      	ands	r1, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	6818      	ldr	r0, [r3, #0]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	3b05      	subs	r3, #5
 8001e8c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	430a      	orrs	r2, r1
 8001e96:	635a      	str	r2, [r3, #52]	; 0x34
 8001e98:	e03c      	b.n	8001f14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d81c      	bhi.n	8001edc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685a      	ldr	r2, [r3, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3b23      	subs	r3, #35	; 0x23
 8001eb4:	221f      	movs	r2, #31
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	4019      	ands	r1, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6818      	ldr	r0, [r3, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b23      	subs	r3, #35	; 0x23
 8001ece:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30
 8001eda:	e01b      	b.n	8001f14 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	4413      	add	r3, r2
 8001eec:	3b41      	subs	r3, #65	; 0x41
 8001eee:	221f      	movs	r2, #31
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	4019      	ands	r1, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	3b41      	subs	r3, #65	; 0x41
 8001f08:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b09      	cmp	r3, #9
 8001f1a:	d91c      	bls.n	8001f56 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68d9      	ldr	r1, [r3, #12]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	4613      	mov	r3, r2
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b1e      	subs	r3, #30
 8001f2e:	2207      	movs	r2, #7
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	4019      	ands	r1, r3
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	6898      	ldr	r0, [r3, #8]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4613      	mov	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	4413      	add	r3, r2
 8001f46:	3b1e      	subs	r3, #30
 8001f48:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	60da      	str	r2, [r3, #12]
 8001f54:	e019      	b.n	8001f8a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6919      	ldr	r1, [r3, #16]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	2207      	movs	r2, #7
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	4019      	ands	r1, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6898      	ldr	r0, [r3, #8]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b10      	cmp	r3, #16
 8001f90:	d003      	beq.n	8001f9a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001f96:	2b11      	cmp	r3, #17
 8001f98:	d132      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <HAL_ADC_ConfigChannel+0x1e4>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d125      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d126      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001fc0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b10      	cmp	r3, #16
 8001fc8:	d11a      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fca:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a13      	ldr	r2, [pc, #76]	; (800201c <HAL_ADC_ConfigChannel+0x1ec>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	0c9a      	lsrs	r2, r3, #18
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4413      	add	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fe0:	e002      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f9      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x1b2>
 8001fee:	e007      	b.n	8002000 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	f043 0220 	orr.w	r2, r3, #32
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002008:	7bfb      	ldrb	r3, [r7, #15]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40012400 	.word	0x40012400
 8002018:	20000000 	.word	0x20000000
 800201c:	431bde83 	.word	0x431bde83

08002020 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b01      	cmp	r3, #1
 800203c:	d040      	beq.n	80020c0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0201 	orr.w	r2, r2, #1
 800204c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800204e:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <ADC_Enable+0xac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a1f      	ldr	r2, [pc, #124]	; (80020d0 <ADC_Enable+0xb0>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	0c9b      	lsrs	r3, r3, #18
 800205a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800205c:	e002      	b.n	8002064 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	3b01      	subs	r3, #1
 8002062:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f9      	bne.n	800205e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800206a:	f7ff fbef 	bl	800184c <HAL_GetTick>
 800206e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002070:	e01f      	b.n	80020b2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002072:	f7ff fbeb 	bl	800184c <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d918      	bls.n	80020b2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	2b01      	cmp	r3, #1
 800208c:	d011      	beq.n	80020b2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	f043 0210 	orr.w	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e007      	b.n	80020c2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d1d8      	bne.n	8002072 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000000 	.word	0x20000000
 80020d0:	431bde83 	.word	0x431bde83

080020d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d12e      	bne.n	800214c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020fe:	f7ff fba5 	bl	800184c <HAL_GetTick>
 8002102:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002104:	e01b      	b.n	800213e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002106:	f7ff fba1 	bl	800184c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d914      	bls.n	800213e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b01      	cmp	r3, #1
 8002120:	d10d      	bne.n	800213e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002126:	f043 0210 	orr.w	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e007      	b.n	800214e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d0dc      	beq.n	8002106 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f003 0307 	and.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002168:	4b0c      	ldr	r3, [pc, #48]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002174:	4013      	ands	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002180:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002184:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002188:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800218a:	4a04      	ldr	r2, [pc, #16]	; (800219c <__NVIC_SetPriorityGrouping+0x44>)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	60d3      	str	r3, [r2, #12]
}
 8002190:	bf00      	nop
 8002192:	3714      	adds	r7, #20
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <__NVIC_GetPriorityGrouping+0x18>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	0a1b      	lsrs	r3, r3, #8
 80021aa:	f003 0307 	and.w	r3, r3, #7
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	e000ed00 	.word	0xe000ed00

080021bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	4603      	mov	r3, r0
 80021c4:	6039      	str	r1, [r7, #0]
 80021c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	db0a      	blt.n	80021e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	490c      	ldr	r1, [pc, #48]	; (8002208 <__NVIC_SetPriority+0x4c>)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	0112      	lsls	r2, r2, #4
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	440b      	add	r3, r1
 80021e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021e4:	e00a      	b.n	80021fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	4908      	ldr	r1, [pc, #32]	; (800220c <__NVIC_SetPriority+0x50>)
 80021ec:	79fb      	ldrb	r3, [r7, #7]
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	3b04      	subs	r3, #4
 80021f4:	0112      	lsls	r2, r2, #4
 80021f6:	b2d2      	uxtb	r2, r2
 80021f8:	440b      	add	r3, r1
 80021fa:	761a      	strb	r2, [r3, #24]
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	bc80      	pop	{r7}
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	e000e100 	.word	0xe000e100
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002210:	b480      	push	{r7}
 8002212:	b089      	sub	sp, #36	; 0x24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f1c3 0307 	rsb	r3, r3, #7
 800222a:	2b04      	cmp	r3, #4
 800222c:	bf28      	it	cs
 800222e:	2304      	movcs	r3, #4
 8002230:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3304      	adds	r3, #4
 8002236:	2b06      	cmp	r3, #6
 8002238:	d902      	bls.n	8002240 <NVIC_EncodePriority+0x30>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3b03      	subs	r3, #3
 800223e:	e000      	b.n	8002242 <NVIC_EncodePriority+0x32>
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	f04f 32ff 	mov.w	r2, #4294967295
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	401a      	ands	r2, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002258:	f04f 31ff 	mov.w	r1, #4294967295
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa01 f303 	lsl.w	r3, r1, r3
 8002262:	43d9      	mvns	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002268:	4313      	orrs	r3, r2
         );
}
 800226a:	4618      	mov	r0, r3
 800226c:	3724      	adds	r7, #36	; 0x24
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3b01      	subs	r3, #1
 8002280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002284:	d301      	bcc.n	800228a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002286:	2301      	movs	r3, #1
 8002288:	e00f      	b.n	80022aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <SysTick_Config+0x40>)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3b01      	subs	r3, #1
 8002290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002292:	210f      	movs	r1, #15
 8002294:	f04f 30ff 	mov.w	r0, #4294967295
 8002298:	f7ff ff90 	bl	80021bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800229c:	4b05      	ldr	r3, [pc, #20]	; (80022b4 <SysTick_Config+0x40>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022a2:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <SysTick_Config+0x40>)
 80022a4:	2207      	movs	r2, #7
 80022a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000e010 	.word	0xe000e010

080022b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ff49 	bl	8002158 <__NVIC_SetPriorityGrouping>
}
 80022c6:	bf00      	nop
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b086      	sub	sp, #24
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	60b9      	str	r1, [r7, #8]
 80022d8:	607a      	str	r2, [r7, #4]
 80022da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e0:	f7ff ff5e 	bl	80021a0 <__NVIC_GetPriorityGrouping>
 80022e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f7ff ff90 	bl	8002210 <NVIC_EncodePriority>
 80022f0:	4602      	mov	r2, r0
 80022f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f6:	4611      	mov	r1, r2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff5f 	bl	80021bc <__NVIC_SetPriority>
}
 80022fe:	bf00      	nop
 8002300:	3718      	adds	r7, #24
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ffb0 	bl	8002274 <SysTick_Config>
 8002314:	4603      	mov	r3, r0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002320:	b480      	push	{r7}
 8002322:	b08b      	sub	sp, #44	; 0x2c
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800232a:	2300      	movs	r3, #0
 800232c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800232e:	2300      	movs	r3, #0
 8002330:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002332:	e161      	b.n	80025f8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002334:	2201      	movs	r2, #1
 8002336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	429a      	cmp	r2, r3
 800234e:	f040 8150 	bne.w	80025f2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4a97      	ldr	r2, [pc, #604]	; (80025b4 <HAL_GPIO_Init+0x294>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d05e      	beq.n	800241a <HAL_GPIO_Init+0xfa>
 800235c:	4a95      	ldr	r2, [pc, #596]	; (80025b4 <HAL_GPIO_Init+0x294>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d875      	bhi.n	800244e <HAL_GPIO_Init+0x12e>
 8002362:	4a95      	ldr	r2, [pc, #596]	; (80025b8 <HAL_GPIO_Init+0x298>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d058      	beq.n	800241a <HAL_GPIO_Init+0xfa>
 8002368:	4a93      	ldr	r2, [pc, #588]	; (80025b8 <HAL_GPIO_Init+0x298>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d86f      	bhi.n	800244e <HAL_GPIO_Init+0x12e>
 800236e:	4a93      	ldr	r2, [pc, #588]	; (80025bc <HAL_GPIO_Init+0x29c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d052      	beq.n	800241a <HAL_GPIO_Init+0xfa>
 8002374:	4a91      	ldr	r2, [pc, #580]	; (80025bc <HAL_GPIO_Init+0x29c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d869      	bhi.n	800244e <HAL_GPIO_Init+0x12e>
 800237a:	4a91      	ldr	r2, [pc, #580]	; (80025c0 <HAL_GPIO_Init+0x2a0>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d04c      	beq.n	800241a <HAL_GPIO_Init+0xfa>
 8002380:	4a8f      	ldr	r2, [pc, #572]	; (80025c0 <HAL_GPIO_Init+0x2a0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d863      	bhi.n	800244e <HAL_GPIO_Init+0x12e>
 8002386:	4a8f      	ldr	r2, [pc, #572]	; (80025c4 <HAL_GPIO_Init+0x2a4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d046      	beq.n	800241a <HAL_GPIO_Init+0xfa>
 800238c:	4a8d      	ldr	r2, [pc, #564]	; (80025c4 <HAL_GPIO_Init+0x2a4>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d85d      	bhi.n	800244e <HAL_GPIO_Init+0x12e>
 8002392:	2b12      	cmp	r3, #18
 8002394:	d82a      	bhi.n	80023ec <HAL_GPIO_Init+0xcc>
 8002396:	2b12      	cmp	r3, #18
 8002398:	d859      	bhi.n	800244e <HAL_GPIO_Init+0x12e>
 800239a:	a201      	add	r2, pc, #4	; (adr r2, 80023a0 <HAL_GPIO_Init+0x80>)
 800239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a0:	0800241b 	.word	0x0800241b
 80023a4:	080023f5 	.word	0x080023f5
 80023a8:	08002407 	.word	0x08002407
 80023ac:	08002449 	.word	0x08002449
 80023b0:	0800244f 	.word	0x0800244f
 80023b4:	0800244f 	.word	0x0800244f
 80023b8:	0800244f 	.word	0x0800244f
 80023bc:	0800244f 	.word	0x0800244f
 80023c0:	0800244f 	.word	0x0800244f
 80023c4:	0800244f 	.word	0x0800244f
 80023c8:	0800244f 	.word	0x0800244f
 80023cc:	0800244f 	.word	0x0800244f
 80023d0:	0800244f 	.word	0x0800244f
 80023d4:	0800244f 	.word	0x0800244f
 80023d8:	0800244f 	.word	0x0800244f
 80023dc:	0800244f 	.word	0x0800244f
 80023e0:	0800244f 	.word	0x0800244f
 80023e4:	080023fd 	.word	0x080023fd
 80023e8:	08002411 	.word	0x08002411
 80023ec:	4a76      	ldr	r2, [pc, #472]	; (80025c8 <HAL_GPIO_Init+0x2a8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023f2:	e02c      	b.n	800244e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	623b      	str	r3, [r7, #32]
          break;
 80023fa:	e029      	b.n	8002450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	3304      	adds	r3, #4
 8002402:	623b      	str	r3, [r7, #32]
          break;
 8002404:	e024      	b.n	8002450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	3308      	adds	r3, #8
 800240c:	623b      	str	r3, [r7, #32]
          break;
 800240e:	e01f      	b.n	8002450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	330c      	adds	r3, #12
 8002416:	623b      	str	r3, [r7, #32]
          break;
 8002418:	e01a      	b.n	8002450 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d102      	bne.n	8002428 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002422:	2304      	movs	r3, #4
 8002424:	623b      	str	r3, [r7, #32]
          break;
 8002426:	e013      	b.n	8002450 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d105      	bne.n	800243c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002430:	2308      	movs	r3, #8
 8002432:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	611a      	str	r2, [r3, #16]
          break;
 800243a:	e009      	b.n	8002450 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800243c:	2308      	movs	r3, #8
 800243e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69fa      	ldr	r2, [r7, #28]
 8002444:	615a      	str	r2, [r3, #20]
          break;
 8002446:	e003      	b.n	8002450 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002448:	2300      	movs	r3, #0
 800244a:	623b      	str	r3, [r7, #32]
          break;
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x130>
          break;
 800244e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	2bff      	cmp	r3, #255	; 0xff
 8002454:	d801      	bhi.n	800245a <HAL_GPIO_Init+0x13a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	e001      	b.n	800245e <HAL_GPIO_Init+0x13e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	3304      	adds	r3, #4
 800245e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	2bff      	cmp	r3, #255	; 0xff
 8002464:	d802      	bhi.n	800246c <HAL_GPIO_Init+0x14c>
 8002466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	e002      	b.n	8002472 <HAL_GPIO_Init+0x152>
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	3b08      	subs	r3, #8
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	210f      	movs	r1, #15
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	fa01 f303 	lsl.w	r3, r1, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	401a      	ands	r2, r3
 8002484:	6a39      	ldr	r1, [r7, #32]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	fa01 f303 	lsl.w	r3, r1, r3
 800248c:	431a      	orrs	r2, r3
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 80a9 	beq.w	80025f2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80024a0:	4b4a      	ldr	r3, [pc, #296]	; (80025cc <HAL_GPIO_Init+0x2ac>)
 80024a2:	699b      	ldr	r3, [r3, #24]
 80024a4:	4a49      	ldr	r2, [pc, #292]	; (80025cc <HAL_GPIO_Init+0x2ac>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6193      	str	r3, [r2, #24]
 80024ac:	4b47      	ldr	r3, [pc, #284]	; (80025cc <HAL_GPIO_Init+0x2ac>)
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0301 	and.w	r3, r3, #1
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024b8:	4a45      	ldr	r2, [pc, #276]	; (80025d0 <HAL_GPIO_Init+0x2b0>)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	089b      	lsrs	r3, r3, #2
 80024be:	3302      	adds	r3, #2
 80024c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	220f      	movs	r2, #15
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4013      	ands	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a3d      	ldr	r2, [pc, #244]	; (80025d4 <HAL_GPIO_Init+0x2b4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00d      	beq.n	8002500 <HAL_GPIO_Init+0x1e0>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a3c      	ldr	r2, [pc, #240]	; (80025d8 <HAL_GPIO_Init+0x2b8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d007      	beq.n	80024fc <HAL_GPIO_Init+0x1dc>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a3b      	ldr	r2, [pc, #236]	; (80025dc <HAL_GPIO_Init+0x2bc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_GPIO_Init+0x1d8>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e004      	b.n	8002502 <HAL_GPIO_Init+0x1e2>
 80024f8:	2303      	movs	r3, #3
 80024fa:	e002      	b.n	8002502 <HAL_GPIO_Init+0x1e2>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_GPIO_Init+0x1e2>
 8002500:	2300      	movs	r3, #0
 8002502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002504:	f002 0203 	and.w	r2, r2, #3
 8002508:	0092      	lsls	r2, r2, #2
 800250a:	4093      	lsls	r3, r2
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002512:	492f      	ldr	r1, [pc, #188]	; (80025d0 <HAL_GPIO_Init+0x2b0>)
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	3302      	adds	r3, #2
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800252c:	4b2c      	ldr	r3, [pc, #176]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	492b      	ldr	r1, [pc, #172]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]
 8002538:	e006      	b.n	8002548 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800253a:	4b29      	ldr	r3, [pc, #164]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	43db      	mvns	r3, r3
 8002542:	4927      	ldr	r1, [pc, #156]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 8002544:	4013      	ands	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d006      	beq.n	8002562 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002554:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 8002556:	68da      	ldr	r2, [r3, #12]
 8002558:	4921      	ldr	r1, [pc, #132]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	60cb      	str	r3, [r1, #12]
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002562:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	43db      	mvns	r3, r3
 800256a:	491d      	ldr	r1, [pc, #116]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 800256c:	4013      	ands	r3, r2
 800256e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d006      	beq.n	800258a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800257c:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	4917      	ldr	r1, [pc, #92]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800258a:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	43db      	mvns	r3, r3
 8002592:	4913      	ldr	r1, [pc, #76]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 8002594:	4013      	ands	r3, r2
 8002596:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01f      	beq.n	80025e4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	490d      	ldr	r1, [pc, #52]	; (80025e0 <HAL_GPIO_Init+0x2c0>)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
 80025b0:	e01f      	b.n	80025f2 <HAL_GPIO_Init+0x2d2>
 80025b2:	bf00      	nop
 80025b4:	10320000 	.word	0x10320000
 80025b8:	10310000 	.word	0x10310000
 80025bc:	10220000 	.word	0x10220000
 80025c0:	10210000 	.word	0x10210000
 80025c4:	10120000 	.word	0x10120000
 80025c8:	10110000 	.word	0x10110000
 80025cc:	40021000 	.word	0x40021000
 80025d0:	40010000 	.word	0x40010000
 80025d4:	40010800 	.word	0x40010800
 80025d8:	40010c00 	.word	0x40010c00
 80025dc:	40011000 	.word	0x40011000
 80025e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_GPIO_Init+0x2f4>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	4909      	ldr	r1, [pc, #36]	; (8002614 <HAL_GPIO_Init+0x2f4>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	3301      	adds	r3, #1
 80025f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	f47f ae96 	bne.w	8002334 <HAL_GPIO_Init+0x14>
  }
}
 8002608:	bf00      	nop
 800260a:	bf00      	nop
 800260c:	372c      	adds	r7, #44	; 0x2c
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	40010400 	.word	0x40010400

08002618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
 8002624:	4613      	mov	r3, r2
 8002626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002628:	787b      	ldrb	r3, [r7, #1]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800262e:	887a      	ldrh	r2, [r7, #2]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002634:	e003      	b.n	800263e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002636:	887b      	ldrh	r3, [r7, #2]
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	611a      	str	r2, [r3, #16]
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e272      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 8087 	beq.w	8002776 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002668:	4b92      	ldr	r3, [pc, #584]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	2b04      	cmp	r3, #4
 8002672:	d00c      	beq.n	800268e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002674:	4b8f      	ldr	r3, [pc, #572]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 030c 	and.w	r3, r3, #12
 800267c:	2b08      	cmp	r3, #8
 800267e:	d112      	bne.n	80026a6 <HAL_RCC_OscConfig+0x5e>
 8002680:	4b8c      	ldr	r3, [pc, #560]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268c:	d10b      	bne.n	80026a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800268e:	4b89      	ldr	r3, [pc, #548]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d06c      	beq.n	8002774 <HAL_RCC_OscConfig+0x12c>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d168      	bne.n	8002774 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e24c      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ae:	d106      	bne.n	80026be <HAL_RCC_OscConfig+0x76>
 80026b0:	4b80      	ldr	r3, [pc, #512]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a7f      	ldr	r2, [pc, #508]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	e02e      	b.n	800271c <HAL_RCC_OscConfig+0xd4>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10c      	bne.n	80026e0 <HAL_RCC_OscConfig+0x98>
 80026c6:	4b7b      	ldr	r3, [pc, #492]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a7a      	ldr	r2, [pc, #488]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026d0:	6013      	str	r3, [r2, #0]
 80026d2:	4b78      	ldr	r3, [pc, #480]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a77      	ldr	r2, [pc, #476]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e01d      	b.n	800271c <HAL_RCC_OscConfig+0xd4>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0xbc>
 80026ea:	4b72      	ldr	r3, [pc, #456]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a71      	ldr	r2, [pc, #452]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b6f      	ldr	r3, [pc, #444]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a6e      	ldr	r2, [pc, #440]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0xd4>
 8002704:	4b6b      	ldr	r3, [pc, #428]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a6a      	ldr	r2, [pc, #424]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 800270a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b68      	ldr	r3, [pc, #416]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a67      	ldr	r2, [pc, #412]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d013      	beq.n	800274c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff f892 	bl	800184c <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800272c:	f7ff f88e 	bl	800184c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e200      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	4b5d      	ldr	r3, [pc, #372]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0xe4>
 800274a:	e014      	b.n	8002776 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7ff f87e 	bl	800184c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002754:	f7ff f87a 	bl	800184c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e1ec      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	4b53      	ldr	r3, [pc, #332]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0x10c>
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d063      	beq.n	800284a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002782:	4b4c      	ldr	r3, [pc, #304]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800278e:	4b49      	ldr	r3, [pc, #292]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b08      	cmp	r3, #8
 8002798:	d11c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x18c>
 800279a:	4b46      	ldr	r3, [pc, #280]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d116      	bne.n	80027d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	4b43      	ldr	r3, [pc, #268]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_RCC_OscConfig+0x176>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e1c0      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027be:	4b3d      	ldr	r3, [pc, #244]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4939      	ldr	r1, [pc, #228]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d2:	e03a      	b.n	800284a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027dc:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <HAL_RCC_OscConfig+0x270>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7ff f833 	bl	800184c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ea:	f7ff f82f 	bl	800184c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e1a1      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	4b2d      	ldr	r3, [pc, #180]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b2a      	ldr	r3, [pc, #168]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4927      	ldr	r1, [pc, #156]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]
 800281c:	e015      	b.n	800284a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281e:	4b26      	ldr	r3, [pc, #152]	; (80028b8 <HAL_RCC_OscConfig+0x270>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7ff f812 	bl	800184c <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282c:	f7ff f80e 	bl	800184c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e180      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	4b1d      	ldr	r3, [pc, #116]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d03a      	beq.n	80028cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d019      	beq.n	8002892 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285e:	4b17      	ldr	r3, [pc, #92]	; (80028bc <HAL_RCC_OscConfig+0x274>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002864:	f7fe fff2 	bl	800184c <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286c:	f7fe ffee 	bl	800184c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e160      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	4b0d      	ldr	r3, [pc, #52]	; (80028b4 <HAL_RCC_OscConfig+0x26c>)
 8002880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800288a:	2001      	movs	r0, #1
 800288c:	f000 faba 	bl	8002e04 <RCC_Delay>
 8002890:	e01c      	b.n	80028cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_RCC_OscConfig+0x274>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002898:	f7fe ffd8 	bl	800184c <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800289e:	e00f      	b.n	80028c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a0:	f7fe ffd4 	bl	800184c <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d908      	bls.n	80028c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e146      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
 80028b2:	bf00      	nop
 80028b4:	40021000 	.word	0x40021000
 80028b8:	42420000 	.word	0x42420000
 80028bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028c0:	4b92      	ldr	r3, [pc, #584]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1e9      	bne.n	80028a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80a6 	beq.w	8002a26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028de:	4b8b      	ldr	r3, [pc, #556]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10d      	bne.n	8002906 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	4b88      	ldr	r3, [pc, #544]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	4a87      	ldr	r2, [pc, #540]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f4:	61d3      	str	r3, [r2, #28]
 80028f6:	4b85      	ldr	r3, [pc, #532]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	60bb      	str	r3, [r7, #8]
 8002900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002902:	2301      	movs	r3, #1
 8002904:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002906:	4b82      	ldr	r3, [pc, #520]	; (8002b10 <HAL_RCC_OscConfig+0x4c8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290e:	2b00      	cmp	r3, #0
 8002910:	d118      	bne.n	8002944 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002912:	4b7f      	ldr	r3, [pc, #508]	; (8002b10 <HAL_RCC_OscConfig+0x4c8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a7e      	ldr	r2, [pc, #504]	; (8002b10 <HAL_RCC_OscConfig+0x4c8>)
 8002918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800291c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291e:	f7fe ff95 	bl	800184c <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002926:	f7fe ff91 	bl	800184c <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b64      	cmp	r3, #100	; 0x64
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e103      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	4b75      	ldr	r3, [pc, #468]	; (8002b10 <HAL_RCC_OscConfig+0x4c8>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0f0      	beq.n	8002926 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d106      	bne.n	800295a <HAL_RCC_OscConfig+0x312>
 800294c:	4b6f      	ldr	r3, [pc, #444]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4a6e      	ldr	r2, [pc, #440]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	6213      	str	r3, [r2, #32]
 8002958:	e02d      	b.n	80029b6 <HAL_RCC_OscConfig+0x36e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0x334>
 8002962:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	4a69      	ldr	r2, [pc, #420]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	6213      	str	r3, [r2, #32]
 800296e:	4b67      	ldr	r3, [pc, #412]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4a66      	ldr	r2, [pc, #408]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f023 0304 	bic.w	r3, r3, #4
 8002978:	6213      	str	r3, [r2, #32]
 800297a:	e01c      	b.n	80029b6 <HAL_RCC_OscConfig+0x36e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b05      	cmp	r3, #5
 8002982:	d10c      	bne.n	800299e <HAL_RCC_OscConfig+0x356>
 8002984:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	4a60      	ldr	r2, [pc, #384]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 800298a:	f043 0304 	orr.w	r3, r3, #4
 800298e:	6213      	str	r3, [r2, #32]
 8002990:	4b5e      	ldr	r3, [pc, #376]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	4a5d      	ldr	r2, [pc, #372]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002996:	f043 0301 	orr.w	r3, r3, #1
 800299a:	6213      	str	r3, [r2, #32]
 800299c:	e00b      	b.n	80029b6 <HAL_RCC_OscConfig+0x36e>
 800299e:	4b5b      	ldr	r3, [pc, #364]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4a5a      	ldr	r2, [pc, #360]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	6213      	str	r3, [r2, #32]
 80029aa:	4b58      	ldr	r3, [pc, #352]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4a57      	ldr	r2, [pc, #348]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 80029b0:	f023 0304 	bic.w	r3, r3, #4
 80029b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d015      	beq.n	80029ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029be:	f7fe ff45 	bl	800184c <HAL_GetTick>
 80029c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c4:	e00a      	b.n	80029dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fe ff41 	bl	800184c <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e0b1      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029dc:	4b4b      	ldr	r3, [pc, #300]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d0ee      	beq.n	80029c6 <HAL_RCC_OscConfig+0x37e>
 80029e8:	e014      	b.n	8002a14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ea:	f7fe ff2f 	bl	800184c <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029f0:	e00a      	b.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f2:	f7fe ff2b 	bl	800184c <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d901      	bls.n	8002a08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a04:	2303      	movs	r3, #3
 8002a06:	e09b      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a08:	4b40      	ldr	r3, [pc, #256]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ee      	bne.n	80029f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d105      	bne.n	8002a26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1a:	4b3c      	ldr	r3, [pc, #240]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	4a3b      	ldr	r2, [pc, #236]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002a20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8087 	beq.w	8002b3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a30:	4b36      	ldr	r3, [pc, #216]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d061      	beq.n	8002b00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d146      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a44:	4b33      	ldr	r3, [pc, #204]	; (8002b14 <HAL_RCC_OscConfig+0x4cc>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4a:	f7fe feff 	bl	800184c <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a52:	f7fe fefb 	bl	800184c <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e06d      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a64:	4b29      	ldr	r3, [pc, #164]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d1f0      	bne.n	8002a52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
 8002a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a78:	d108      	bne.n	8002a8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a7a:	4b24      	ldr	r3, [pc, #144]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4921      	ldr	r1, [pc, #132]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a8c:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a19      	ldr	r1, [r3, #32]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	491b      	ldr	r1, [pc, #108]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <HAL_RCC_OscConfig+0x4cc>)
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fecf 	bl	800184c <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab2:	f7fe fecb 	bl	800184c <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e03d      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ac4:	4b11      	ldr	r3, [pc, #68]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0f0      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x46a>
 8002ad0:	e035      	b.n	8002b3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad2:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <HAL_RCC_OscConfig+0x4cc>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7fe feb8 	bl	800184c <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe feb4 	bl	800184c <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e026      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af2:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x498>
 8002afe:	e01e      	b.n	8002b3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e019      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40007000 	.word	0x40007000
 8002b14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002b18:	4b0b      	ldr	r3, [pc, #44]	; (8002b48 <HAL_RCC_OscConfig+0x500>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d106      	bne.n	8002b3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d001      	beq.n	8002b3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000

08002b4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0d0      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b60:	4b6a      	ldr	r3, [pc, #424]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d910      	bls.n	8002b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b67      	ldr	r3, [pc, #412]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 0207 	bic.w	r2, r3, #7
 8002b76:	4965      	ldr	r1, [pc, #404]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b63      	ldr	r3, [pc, #396]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0b8      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d020      	beq.n	8002bde <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ba8:	4b59      	ldr	r3, [pc, #356]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	4a58      	ldr	r2, [pc, #352]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002bb2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0308 	and.w	r3, r3, #8
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc0:	4b53      	ldr	r3, [pc, #332]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	4a52      	ldr	r2, [pc, #328]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002bca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bcc:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	494d      	ldr	r1, [pc, #308]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d040      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d107      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf2:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d115      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e07f      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d107      	bne.n	8002c1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0a:	4b41      	ldr	r3, [pc, #260]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d109      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e073      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1a:	4b3d      	ldr	r3, [pc, #244]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e06b      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2a:	4b39      	ldr	r3, [pc, #228]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f023 0203 	bic.w	r2, r3, #3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4936      	ldr	r1, [pc, #216]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c3c:	f7fe fe06 	bl	800184c <HAL_GetTick>
 8002c40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c42:	e00a      	b.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c44:	f7fe fe02 	bl	800184c <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e053      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c5a:	4b2d      	ldr	r3, [pc, #180]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f003 020c 	and.w	r2, r3, #12
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d1eb      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c6c:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d210      	bcs.n	8002c9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c7a:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 0207 	bic.w	r2, r3, #7
 8002c82:	4922      	ldr	r1, [pc, #136]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b20      	ldr	r3, [pc, #128]	; (8002d0c <HAL_RCC_ClockConfig+0x1c0>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e032      	b.n	8002d02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d008      	beq.n	8002cba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ca8:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	4916      	ldr	r1, [pc, #88]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0308 	and.w	r3, r3, #8
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d009      	beq.n	8002cda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cc6:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	490e      	ldr	r1, [pc, #56]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cda:	f000 f821 	bl	8002d20 <HAL_RCC_GetSysClockFreq>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	490a      	ldr	r1, [pc, #40]	; (8002d14 <HAL_RCC_ClockConfig+0x1c8>)
 8002cec:	5ccb      	ldrb	r3, [r1, r3]
 8002cee:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf2:	4a09      	ldr	r2, [pc, #36]	; (8002d18 <HAL_RCC_ClockConfig+0x1cc>)
 8002cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_RCC_ClockConfig+0x1d0>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fd64 	bl	80017c8 <HAL_InitTick>

  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40022000 	.word	0x40022000
 8002d10:	40021000 	.word	0x40021000
 8002d14:	08005f8c 	.word	0x08005f8c
 8002d18:	20000000 	.word	0x20000000
 8002d1c:	20000004 	.word	0x20000004

08002d20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	2300      	movs	r3, #0
 8002d34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002d3a:	4b1e      	ldr	r3, [pc, #120]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f003 030c 	and.w	r3, r3, #12
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d002      	beq.n	8002d50 <HAL_RCC_GetSysClockFreq+0x30>
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d003      	beq.n	8002d56 <HAL_RCC_GetSysClockFreq+0x36>
 8002d4e:	e027      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d50:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d52:	613b      	str	r3, [r7, #16]
      break;
 8002d54:	e027      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	0c9b      	lsrs	r3, r3, #18
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	4a17      	ldr	r2, [pc, #92]	; (8002dbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d60:	5cd3      	ldrb	r3, [r2, r3]
 8002d62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d010      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d6e:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	0c5b      	lsrs	r3, r3, #17
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	4a11      	ldr	r2, [pc, #68]	; (8002dc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d7a:	5cd3      	ldrb	r3, [r2, r3]
 8002d7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a0d      	ldr	r2, [pc, #52]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d82:	fb03 f202 	mul.w	r2, r3, r2
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e004      	b.n	8002d9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a0c      	ldr	r2, [pc, #48]	; (8002dc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d94:	fb02 f303 	mul.w	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	613b      	str	r3, [r7, #16]
      break;
 8002d9e:	e002      	b.n	8002da6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002da0:	4b05      	ldr	r3, [pc, #20]	; (8002db8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002da2:	613b      	str	r3, [r7, #16]
      break;
 8002da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002da6:	693b      	ldr	r3, [r7, #16]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	371c      	adds	r7, #28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	40021000 	.word	0x40021000
 8002db8:	007a1200 	.word	0x007a1200
 8002dbc:	08005fa4 	.word	0x08005fa4
 8002dc0:	08005fb4 	.word	0x08005fb4
 8002dc4:	003d0900 	.word	0x003d0900

08002dc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dcc:	4b02      	ldr	r3, [pc, #8]	; (8002dd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002dce:	681b      	ldr	r3, [r3, #0]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr
 8002dd8:	20000000 	.word	0x20000000

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de0:	f7ff fff2 	bl	8002dc8 <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	0adb      	lsrs	r3, r3, #11
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4903      	ldr	r1, [pc, #12]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	08005f9c 	.word	0x08005f9c

08002e04 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e0c:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <RCC_Delay+0x34>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <RCC_Delay+0x38>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0a5b      	lsrs	r3, r3, #9
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002e20:	bf00      	nop
  }
  while (Delay --);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	1e5a      	subs	r2, r3, #1
 8002e26:	60fa      	str	r2, [r7, #12]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1f9      	bne.n	8002e20 <RCC_Delay+0x1c>
}
 8002e2c:	bf00      	nop
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bc80      	pop	{r7}
 8002e36:	4770      	bx	lr
 8002e38:	20000000 	.word	0x20000000
 8002e3c:	10624dd3 	.word	0x10624dd3

08002e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0301 	and.w	r3, r3, #1
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d07d      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e60:	4b4f      	ldr	r3, [pc, #316]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10d      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6c:	4b4c      	ldr	r3, [pc, #304]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6e:	69db      	ldr	r3, [r3, #28]
 8002e70:	4a4b      	ldr	r2, [pc, #300]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e76:	61d3      	str	r3, [r2, #28]
 8002e78:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e84:	2301      	movs	r3, #1
 8002e86:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e88:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d118      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e94:	4b43      	ldr	r3, [pc, #268]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a42      	ldr	r2, [pc, #264]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea0:	f7fe fcd4 	bl	800184c <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea6:	e008      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ea8:	f7fe fcd0 	bl	800184c <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b64      	cmp	r3, #100	; 0x64
 8002eb4:	d901      	bls.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e06d      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eba:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f0      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ec6:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ece:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d02e      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d027      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ee4:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee6:	6a1b      	ldr	r3, [r3, #32]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002eee:	4b2e      	ldr	r3, [pc, #184]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef4:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002efa:	4a29      	ldr	r2, [pc, #164]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d014      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0a:	f7fe fc9f 	bl	800184c <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f10:	e00a      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f12:	f7fe fc9b 	bl	800184c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e036      	b.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f28:	4b1d      	ldr	r3, [pc, #116]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0ee      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f34:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	4917      	ldr	r1, [pc, #92]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d105      	bne.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f4c:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	4a13      	ldr	r2, [pc, #76]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f56:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d008      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f64:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	490b      	ldr	r1, [pc, #44]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0310 	and.w	r3, r3, #16
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d008      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	4904      	ldr	r1, [pc, #16]	; (8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	42420440 	.word	0x42420440

08002fac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b10      	cmp	r3, #16
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	f200 808a 	bhi.w	80030ea <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d045      	beq.n	8003068 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d075      	beq.n	80030ce <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002fe2:	e082      	b.n	80030ea <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002fe4:	4b46      	ldr	r3, [pc, #280]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002fea:	4b45      	ldr	r3, [pc, #276]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d07b      	beq.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	0c9b      	lsrs	r3, r3, #18
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	4a41      	ldr	r2, [pc, #260]	; (8003104 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003000:	5cd3      	ldrb	r3, [r2, r3]
 8003002:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d015      	beq.n	800303a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800300e:	4b3c      	ldr	r3, [pc, #240]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	0c5b      	lsrs	r3, r3, #17
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	4a3b      	ldr	r2, [pc, #236]	; (8003108 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800301a:	5cd3      	ldrb	r3, [r2, r3]
 800301c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00d      	beq.n	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003028:	4a38      	ldr	r2, [pc, #224]	; (800310c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	fb02 f303 	mul.w	r3, r2, r3
 8003036:	61fb      	str	r3, [r7, #28]
 8003038:	e004      	b.n	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4a34      	ldr	r2, [pc, #208]	; (8003110 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003044:	4b2e      	ldr	r3, [pc, #184]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800304c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003050:	d102      	bne.n	8003058 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	61bb      	str	r3, [r7, #24]
      break;
 8003056:	e04a      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4a2d      	ldr	r2, [pc, #180]	; (8003114 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800305e:	fba2 2303 	umull	r2, r3, r2, r3
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	61bb      	str	r3, [r7, #24]
      break;
 8003066:	e042      	b.n	80030ee <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003068:	4b25      	ldr	r3, [pc, #148]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003078:	d108      	bne.n	800308c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003088:	61bb      	str	r3, [r7, #24]
 800308a:	e01f      	b.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003096:	d109      	bne.n	80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003098:	4b19      	ldr	r3, [pc, #100]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80030a4:	f649 4340 	movw	r3, #40000	; 0x9c40
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	e00f      	b.n	80030cc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030b6:	d11c      	bne.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d016      	beq.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80030c4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80030c8:	61bb      	str	r3, [r7, #24]
      break;
 80030ca:	e012      	b.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80030cc:	e011      	b.n	80030f2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80030ce:	f7ff fe85 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 80030d2:	4602      	mov	r2, r0
 80030d4:	4b0a      	ldr	r3, [pc, #40]	; (8003100 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	0b9b      	lsrs	r3, r3, #14
 80030da:	f003 0303 	and.w	r3, r3, #3
 80030de:	3301      	adds	r3, #1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030e6:	61bb      	str	r3, [r7, #24]
      break;
 80030e8:	e004      	b.n	80030f4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030ea:	bf00      	nop
 80030ec:	e002      	b.n	80030f4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030ee:	bf00      	nop
 80030f0:	e000      	b.n	80030f4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80030f2:	bf00      	nop
    }
  }
  return (frequency);
 80030f4:	69bb      	ldr	r3, [r7, #24]
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40021000 	.word	0x40021000
 8003104:	08005fb8 	.word	0x08005fb8
 8003108:	08005fc8 	.word	0x08005fc8
 800310c:	007a1200 	.word	0x007a1200
 8003110:	003d0900 	.word	0x003d0900
 8003114:	aaaaaaab 	.word	0xaaaaaaab

08003118 <__errno>:
 8003118:	4b01      	ldr	r3, [pc, #4]	; (8003120 <__errno+0x8>)
 800311a:	6818      	ldr	r0, [r3, #0]
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	2000000c 	.word	0x2000000c

08003124 <__libc_init_array>:
 8003124:	b570      	push	{r4, r5, r6, lr}
 8003126:	2600      	movs	r6, #0
 8003128:	4d0c      	ldr	r5, [pc, #48]	; (800315c <__libc_init_array+0x38>)
 800312a:	4c0d      	ldr	r4, [pc, #52]	; (8003160 <__libc_init_array+0x3c>)
 800312c:	1b64      	subs	r4, r4, r5
 800312e:	10a4      	asrs	r4, r4, #2
 8003130:	42a6      	cmp	r6, r4
 8003132:	d109      	bne.n	8003148 <__libc_init_array+0x24>
 8003134:	f002 ff10 	bl	8005f58 <_init>
 8003138:	2600      	movs	r6, #0
 800313a:	4d0a      	ldr	r5, [pc, #40]	; (8003164 <__libc_init_array+0x40>)
 800313c:	4c0a      	ldr	r4, [pc, #40]	; (8003168 <__libc_init_array+0x44>)
 800313e:	1b64      	subs	r4, r4, r5
 8003140:	10a4      	asrs	r4, r4, #2
 8003142:	42a6      	cmp	r6, r4
 8003144:	d105      	bne.n	8003152 <__libc_init_array+0x2e>
 8003146:	bd70      	pop	{r4, r5, r6, pc}
 8003148:	f855 3b04 	ldr.w	r3, [r5], #4
 800314c:	4798      	blx	r3
 800314e:	3601      	adds	r6, #1
 8003150:	e7ee      	b.n	8003130 <__libc_init_array+0xc>
 8003152:	f855 3b04 	ldr.w	r3, [r5], #4
 8003156:	4798      	blx	r3
 8003158:	3601      	adds	r6, #1
 800315a:	e7f2      	b.n	8003142 <__libc_init_array+0x1e>
 800315c:	080063a4 	.word	0x080063a4
 8003160:	080063a4 	.word	0x080063a4
 8003164:	080063a4 	.word	0x080063a4
 8003168:	080063a8 	.word	0x080063a8

0800316c <memset>:
 800316c:	4603      	mov	r3, r0
 800316e:	4402      	add	r2, r0
 8003170:	4293      	cmp	r3, r2
 8003172:	d100      	bne.n	8003176 <memset+0xa>
 8003174:	4770      	bx	lr
 8003176:	f803 1b01 	strb.w	r1, [r3], #1
 800317a:	e7f9      	b.n	8003170 <memset+0x4>

0800317c <__cvt>:
 800317c:	2b00      	cmp	r3, #0
 800317e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003182:	461f      	mov	r7, r3
 8003184:	bfbb      	ittet	lt
 8003186:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800318a:	461f      	movlt	r7, r3
 800318c:	2300      	movge	r3, #0
 800318e:	232d      	movlt	r3, #45	; 0x2d
 8003190:	b088      	sub	sp, #32
 8003192:	4614      	mov	r4, r2
 8003194:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003196:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003198:	7013      	strb	r3, [r2, #0]
 800319a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800319c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80031a0:	f023 0820 	bic.w	r8, r3, #32
 80031a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80031a8:	d005      	beq.n	80031b6 <__cvt+0x3a>
 80031aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80031ae:	d100      	bne.n	80031b2 <__cvt+0x36>
 80031b0:	3501      	adds	r5, #1
 80031b2:	2302      	movs	r3, #2
 80031b4:	e000      	b.n	80031b8 <__cvt+0x3c>
 80031b6:	2303      	movs	r3, #3
 80031b8:	aa07      	add	r2, sp, #28
 80031ba:	9204      	str	r2, [sp, #16]
 80031bc:	aa06      	add	r2, sp, #24
 80031be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80031c2:	e9cd 3500 	strd	r3, r5, [sp]
 80031c6:	4622      	mov	r2, r4
 80031c8:	463b      	mov	r3, r7
 80031ca:	f000 fcf9 	bl	8003bc0 <_dtoa_r>
 80031ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80031d2:	4606      	mov	r6, r0
 80031d4:	d102      	bne.n	80031dc <__cvt+0x60>
 80031d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80031d8:	07db      	lsls	r3, r3, #31
 80031da:	d522      	bpl.n	8003222 <__cvt+0xa6>
 80031dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80031e0:	eb06 0905 	add.w	r9, r6, r5
 80031e4:	d110      	bne.n	8003208 <__cvt+0x8c>
 80031e6:	7833      	ldrb	r3, [r6, #0]
 80031e8:	2b30      	cmp	r3, #48	; 0x30
 80031ea:	d10a      	bne.n	8003202 <__cvt+0x86>
 80031ec:	2200      	movs	r2, #0
 80031ee:	2300      	movs	r3, #0
 80031f0:	4620      	mov	r0, r4
 80031f2:	4639      	mov	r1, r7
 80031f4:	f7fd fbd8 	bl	80009a8 <__aeabi_dcmpeq>
 80031f8:	b918      	cbnz	r0, 8003202 <__cvt+0x86>
 80031fa:	f1c5 0501 	rsb	r5, r5, #1
 80031fe:	f8ca 5000 	str.w	r5, [sl]
 8003202:	f8da 3000 	ldr.w	r3, [sl]
 8003206:	4499      	add	r9, r3
 8003208:	2200      	movs	r2, #0
 800320a:	2300      	movs	r3, #0
 800320c:	4620      	mov	r0, r4
 800320e:	4639      	mov	r1, r7
 8003210:	f7fd fbca 	bl	80009a8 <__aeabi_dcmpeq>
 8003214:	b108      	cbz	r0, 800321a <__cvt+0x9e>
 8003216:	f8cd 901c 	str.w	r9, [sp, #28]
 800321a:	2230      	movs	r2, #48	; 0x30
 800321c:	9b07      	ldr	r3, [sp, #28]
 800321e:	454b      	cmp	r3, r9
 8003220:	d307      	bcc.n	8003232 <__cvt+0xb6>
 8003222:	4630      	mov	r0, r6
 8003224:	9b07      	ldr	r3, [sp, #28]
 8003226:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003228:	1b9b      	subs	r3, r3, r6
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	b008      	add	sp, #32
 800322e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003232:	1c59      	adds	r1, r3, #1
 8003234:	9107      	str	r1, [sp, #28]
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e7f0      	b.n	800321c <__cvt+0xa0>

0800323a <__exponent>:
 800323a:	4603      	mov	r3, r0
 800323c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800323e:	2900      	cmp	r1, #0
 8003240:	f803 2b02 	strb.w	r2, [r3], #2
 8003244:	bfb6      	itet	lt
 8003246:	222d      	movlt	r2, #45	; 0x2d
 8003248:	222b      	movge	r2, #43	; 0x2b
 800324a:	4249      	neglt	r1, r1
 800324c:	2909      	cmp	r1, #9
 800324e:	7042      	strb	r2, [r0, #1]
 8003250:	dd2b      	ble.n	80032aa <__exponent+0x70>
 8003252:	f10d 0407 	add.w	r4, sp, #7
 8003256:	46a4      	mov	ip, r4
 8003258:	270a      	movs	r7, #10
 800325a:	fb91 f6f7 	sdiv	r6, r1, r7
 800325e:	460a      	mov	r2, r1
 8003260:	46a6      	mov	lr, r4
 8003262:	fb07 1516 	mls	r5, r7, r6, r1
 8003266:	2a63      	cmp	r2, #99	; 0x63
 8003268:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800326c:	4631      	mov	r1, r6
 800326e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003272:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003276:	dcf0      	bgt.n	800325a <__exponent+0x20>
 8003278:	3130      	adds	r1, #48	; 0x30
 800327a:	f1ae 0502 	sub.w	r5, lr, #2
 800327e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003282:	4629      	mov	r1, r5
 8003284:	1c44      	adds	r4, r0, #1
 8003286:	4561      	cmp	r1, ip
 8003288:	d30a      	bcc.n	80032a0 <__exponent+0x66>
 800328a:	f10d 0209 	add.w	r2, sp, #9
 800328e:	eba2 020e 	sub.w	r2, r2, lr
 8003292:	4565      	cmp	r5, ip
 8003294:	bf88      	it	hi
 8003296:	2200      	movhi	r2, #0
 8003298:	4413      	add	r3, r2
 800329a:	1a18      	subs	r0, r3, r0
 800329c:	b003      	add	sp, #12
 800329e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80032a4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80032a8:	e7ed      	b.n	8003286 <__exponent+0x4c>
 80032aa:	2330      	movs	r3, #48	; 0x30
 80032ac:	3130      	adds	r1, #48	; 0x30
 80032ae:	7083      	strb	r3, [r0, #2]
 80032b0:	70c1      	strb	r1, [r0, #3]
 80032b2:	1d03      	adds	r3, r0, #4
 80032b4:	e7f1      	b.n	800329a <__exponent+0x60>
	...

080032b8 <_printf_float>:
 80032b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032bc:	b091      	sub	sp, #68	; 0x44
 80032be:	460c      	mov	r4, r1
 80032c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80032c4:	4616      	mov	r6, r2
 80032c6:	461f      	mov	r7, r3
 80032c8:	4605      	mov	r5, r0
 80032ca:	f001 fa67 	bl	800479c <_localeconv_r>
 80032ce:	6803      	ldr	r3, [r0, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	9309      	str	r3, [sp, #36]	; 0x24
 80032d4:	f7fc ff3c 	bl	8000150 <strlen>
 80032d8:	2300      	movs	r3, #0
 80032da:	930e      	str	r3, [sp, #56]	; 0x38
 80032dc:	f8d8 3000 	ldr.w	r3, [r8]
 80032e0:	900a      	str	r0, [sp, #40]	; 0x28
 80032e2:	3307      	adds	r3, #7
 80032e4:	f023 0307 	bic.w	r3, r3, #7
 80032e8:	f103 0208 	add.w	r2, r3, #8
 80032ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 80032f0:	f8d4 b000 	ldr.w	fp, [r4]
 80032f4:	f8c8 2000 	str.w	r2, [r8]
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003300:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003304:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003308:	930b      	str	r3, [sp, #44]	; 0x2c
 800330a:	f04f 32ff 	mov.w	r2, #4294967295
 800330e:	4640      	mov	r0, r8
 8003310:	4b9c      	ldr	r3, [pc, #624]	; (8003584 <_printf_float+0x2cc>)
 8003312:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003314:	f7fd fb7a 	bl	8000a0c <__aeabi_dcmpun>
 8003318:	bb70      	cbnz	r0, 8003378 <_printf_float+0xc0>
 800331a:	f04f 32ff 	mov.w	r2, #4294967295
 800331e:	4640      	mov	r0, r8
 8003320:	4b98      	ldr	r3, [pc, #608]	; (8003584 <_printf_float+0x2cc>)
 8003322:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003324:	f7fd fb54 	bl	80009d0 <__aeabi_dcmple>
 8003328:	bb30      	cbnz	r0, 8003378 <_printf_float+0xc0>
 800332a:	2200      	movs	r2, #0
 800332c:	2300      	movs	r3, #0
 800332e:	4640      	mov	r0, r8
 8003330:	4651      	mov	r1, sl
 8003332:	f7fd fb43 	bl	80009bc <__aeabi_dcmplt>
 8003336:	b110      	cbz	r0, 800333e <_printf_float+0x86>
 8003338:	232d      	movs	r3, #45	; 0x2d
 800333a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800333e:	4b92      	ldr	r3, [pc, #584]	; (8003588 <_printf_float+0x2d0>)
 8003340:	4892      	ldr	r0, [pc, #584]	; (800358c <_printf_float+0x2d4>)
 8003342:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003346:	bf94      	ite	ls
 8003348:	4698      	movls	r8, r3
 800334a:	4680      	movhi	r8, r0
 800334c:	2303      	movs	r3, #3
 800334e:	f04f 0a00 	mov.w	sl, #0
 8003352:	6123      	str	r3, [r4, #16]
 8003354:	f02b 0304 	bic.w	r3, fp, #4
 8003358:	6023      	str	r3, [r4, #0]
 800335a:	4633      	mov	r3, r6
 800335c:	4621      	mov	r1, r4
 800335e:	4628      	mov	r0, r5
 8003360:	9700      	str	r7, [sp, #0]
 8003362:	aa0f      	add	r2, sp, #60	; 0x3c
 8003364:	f000 f9d4 	bl	8003710 <_printf_common>
 8003368:	3001      	adds	r0, #1
 800336a:	f040 8090 	bne.w	800348e <_printf_float+0x1d6>
 800336e:	f04f 30ff 	mov.w	r0, #4294967295
 8003372:	b011      	add	sp, #68	; 0x44
 8003374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003378:	4642      	mov	r2, r8
 800337a:	4653      	mov	r3, sl
 800337c:	4640      	mov	r0, r8
 800337e:	4651      	mov	r1, sl
 8003380:	f7fd fb44 	bl	8000a0c <__aeabi_dcmpun>
 8003384:	b148      	cbz	r0, 800339a <_printf_float+0xe2>
 8003386:	f1ba 0f00 	cmp.w	sl, #0
 800338a:	bfb8      	it	lt
 800338c:	232d      	movlt	r3, #45	; 0x2d
 800338e:	4880      	ldr	r0, [pc, #512]	; (8003590 <_printf_float+0x2d8>)
 8003390:	bfb8      	it	lt
 8003392:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003396:	4b7f      	ldr	r3, [pc, #508]	; (8003594 <_printf_float+0x2dc>)
 8003398:	e7d3      	b.n	8003342 <_printf_float+0x8a>
 800339a:	6863      	ldr	r3, [r4, #4]
 800339c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	d142      	bne.n	800342a <_printf_float+0x172>
 80033a4:	2306      	movs	r3, #6
 80033a6:	6063      	str	r3, [r4, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	9206      	str	r2, [sp, #24]
 80033ac:	aa0e      	add	r2, sp, #56	; 0x38
 80033ae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80033b2:	aa0d      	add	r2, sp, #52	; 0x34
 80033b4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80033b8:	9203      	str	r2, [sp, #12]
 80033ba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80033be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80033c2:	6023      	str	r3, [r4, #0]
 80033c4:	6863      	ldr	r3, [r4, #4]
 80033c6:	4642      	mov	r2, r8
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	4628      	mov	r0, r5
 80033cc:	4653      	mov	r3, sl
 80033ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80033d0:	f7ff fed4 	bl	800317c <__cvt>
 80033d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80033d6:	4680      	mov	r8, r0
 80033d8:	2947      	cmp	r1, #71	; 0x47
 80033da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80033dc:	d108      	bne.n	80033f0 <_printf_float+0x138>
 80033de:	1cc8      	adds	r0, r1, #3
 80033e0:	db02      	blt.n	80033e8 <_printf_float+0x130>
 80033e2:	6863      	ldr	r3, [r4, #4]
 80033e4:	4299      	cmp	r1, r3
 80033e6:	dd40      	ble.n	800346a <_printf_float+0x1b2>
 80033e8:	f1a9 0902 	sub.w	r9, r9, #2
 80033ec:	fa5f f989 	uxtb.w	r9, r9
 80033f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80033f4:	d81f      	bhi.n	8003436 <_printf_float+0x17e>
 80033f6:	464a      	mov	r2, r9
 80033f8:	3901      	subs	r1, #1
 80033fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80033fe:	910d      	str	r1, [sp, #52]	; 0x34
 8003400:	f7ff ff1b 	bl	800323a <__exponent>
 8003404:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003406:	4682      	mov	sl, r0
 8003408:	1813      	adds	r3, r2, r0
 800340a:	2a01      	cmp	r2, #1
 800340c:	6123      	str	r3, [r4, #16]
 800340e:	dc02      	bgt.n	8003416 <_printf_float+0x15e>
 8003410:	6822      	ldr	r2, [r4, #0]
 8003412:	07d2      	lsls	r2, r2, #31
 8003414:	d501      	bpl.n	800341a <_printf_float+0x162>
 8003416:	3301      	adds	r3, #1
 8003418:	6123      	str	r3, [r4, #16]
 800341a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800341e:	2b00      	cmp	r3, #0
 8003420:	d09b      	beq.n	800335a <_printf_float+0xa2>
 8003422:	232d      	movs	r3, #45	; 0x2d
 8003424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003428:	e797      	b.n	800335a <_printf_float+0xa2>
 800342a:	2947      	cmp	r1, #71	; 0x47
 800342c:	d1bc      	bne.n	80033a8 <_printf_float+0xf0>
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ba      	bne.n	80033a8 <_printf_float+0xf0>
 8003432:	2301      	movs	r3, #1
 8003434:	e7b7      	b.n	80033a6 <_printf_float+0xee>
 8003436:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800343a:	d118      	bne.n	800346e <_printf_float+0x1b6>
 800343c:	2900      	cmp	r1, #0
 800343e:	6863      	ldr	r3, [r4, #4]
 8003440:	dd0b      	ble.n	800345a <_printf_float+0x1a2>
 8003442:	6121      	str	r1, [r4, #16]
 8003444:	b913      	cbnz	r3, 800344c <_printf_float+0x194>
 8003446:	6822      	ldr	r2, [r4, #0]
 8003448:	07d0      	lsls	r0, r2, #31
 800344a:	d502      	bpl.n	8003452 <_printf_float+0x19a>
 800344c:	3301      	adds	r3, #1
 800344e:	440b      	add	r3, r1
 8003450:	6123      	str	r3, [r4, #16]
 8003452:	f04f 0a00 	mov.w	sl, #0
 8003456:	65a1      	str	r1, [r4, #88]	; 0x58
 8003458:	e7df      	b.n	800341a <_printf_float+0x162>
 800345a:	b913      	cbnz	r3, 8003462 <_printf_float+0x1aa>
 800345c:	6822      	ldr	r2, [r4, #0]
 800345e:	07d2      	lsls	r2, r2, #31
 8003460:	d501      	bpl.n	8003466 <_printf_float+0x1ae>
 8003462:	3302      	adds	r3, #2
 8003464:	e7f4      	b.n	8003450 <_printf_float+0x198>
 8003466:	2301      	movs	r3, #1
 8003468:	e7f2      	b.n	8003450 <_printf_float+0x198>
 800346a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800346e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003470:	4299      	cmp	r1, r3
 8003472:	db05      	blt.n	8003480 <_printf_float+0x1c8>
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	6121      	str	r1, [r4, #16]
 8003478:	07d8      	lsls	r0, r3, #31
 800347a:	d5ea      	bpl.n	8003452 <_printf_float+0x19a>
 800347c:	1c4b      	adds	r3, r1, #1
 800347e:	e7e7      	b.n	8003450 <_printf_float+0x198>
 8003480:	2900      	cmp	r1, #0
 8003482:	bfcc      	ite	gt
 8003484:	2201      	movgt	r2, #1
 8003486:	f1c1 0202 	rsble	r2, r1, #2
 800348a:	4413      	add	r3, r2
 800348c:	e7e0      	b.n	8003450 <_printf_float+0x198>
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	055a      	lsls	r2, r3, #21
 8003492:	d407      	bmi.n	80034a4 <_printf_float+0x1ec>
 8003494:	6923      	ldr	r3, [r4, #16]
 8003496:	4642      	mov	r2, r8
 8003498:	4631      	mov	r1, r6
 800349a:	4628      	mov	r0, r5
 800349c:	47b8      	blx	r7
 800349e:	3001      	adds	r0, #1
 80034a0:	d12b      	bne.n	80034fa <_printf_float+0x242>
 80034a2:	e764      	b.n	800336e <_printf_float+0xb6>
 80034a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80034a8:	f240 80dd 	bls.w	8003666 <_printf_float+0x3ae>
 80034ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034b0:	2200      	movs	r2, #0
 80034b2:	2300      	movs	r3, #0
 80034b4:	f7fd fa78 	bl	80009a8 <__aeabi_dcmpeq>
 80034b8:	2800      	cmp	r0, #0
 80034ba:	d033      	beq.n	8003524 <_printf_float+0x26c>
 80034bc:	2301      	movs	r3, #1
 80034be:	4631      	mov	r1, r6
 80034c0:	4628      	mov	r0, r5
 80034c2:	4a35      	ldr	r2, [pc, #212]	; (8003598 <_printf_float+0x2e0>)
 80034c4:	47b8      	blx	r7
 80034c6:	3001      	adds	r0, #1
 80034c8:	f43f af51 	beq.w	800336e <_printf_float+0xb6>
 80034cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80034d0:	429a      	cmp	r2, r3
 80034d2:	db02      	blt.n	80034da <_printf_float+0x222>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	07d8      	lsls	r0, r3, #31
 80034d8:	d50f      	bpl.n	80034fa <_printf_float+0x242>
 80034da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80034de:	4631      	mov	r1, r6
 80034e0:	4628      	mov	r0, r5
 80034e2:	47b8      	blx	r7
 80034e4:	3001      	adds	r0, #1
 80034e6:	f43f af42 	beq.w	800336e <_printf_float+0xb6>
 80034ea:	f04f 0800 	mov.w	r8, #0
 80034ee:	f104 091a 	add.w	r9, r4, #26
 80034f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034f4:	3b01      	subs	r3, #1
 80034f6:	4543      	cmp	r3, r8
 80034f8:	dc09      	bgt.n	800350e <_printf_float+0x256>
 80034fa:	6823      	ldr	r3, [r4, #0]
 80034fc:	079b      	lsls	r3, r3, #30
 80034fe:	f100 8102 	bmi.w	8003706 <_printf_float+0x44e>
 8003502:	68e0      	ldr	r0, [r4, #12]
 8003504:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003506:	4298      	cmp	r0, r3
 8003508:	bfb8      	it	lt
 800350a:	4618      	movlt	r0, r3
 800350c:	e731      	b.n	8003372 <_printf_float+0xba>
 800350e:	2301      	movs	r3, #1
 8003510:	464a      	mov	r2, r9
 8003512:	4631      	mov	r1, r6
 8003514:	4628      	mov	r0, r5
 8003516:	47b8      	blx	r7
 8003518:	3001      	adds	r0, #1
 800351a:	f43f af28 	beq.w	800336e <_printf_float+0xb6>
 800351e:	f108 0801 	add.w	r8, r8, #1
 8003522:	e7e6      	b.n	80034f2 <_printf_float+0x23a>
 8003524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003526:	2b00      	cmp	r3, #0
 8003528:	dc38      	bgt.n	800359c <_printf_float+0x2e4>
 800352a:	2301      	movs	r3, #1
 800352c:	4631      	mov	r1, r6
 800352e:	4628      	mov	r0, r5
 8003530:	4a19      	ldr	r2, [pc, #100]	; (8003598 <_printf_float+0x2e0>)
 8003532:	47b8      	blx	r7
 8003534:	3001      	adds	r0, #1
 8003536:	f43f af1a 	beq.w	800336e <_printf_float+0xb6>
 800353a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800353e:	4313      	orrs	r3, r2
 8003540:	d102      	bne.n	8003548 <_printf_float+0x290>
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	07d9      	lsls	r1, r3, #31
 8003546:	d5d8      	bpl.n	80034fa <_printf_float+0x242>
 8003548:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800354c:	4631      	mov	r1, r6
 800354e:	4628      	mov	r0, r5
 8003550:	47b8      	blx	r7
 8003552:	3001      	adds	r0, #1
 8003554:	f43f af0b 	beq.w	800336e <_printf_float+0xb6>
 8003558:	f04f 0900 	mov.w	r9, #0
 800355c:	f104 0a1a 	add.w	sl, r4, #26
 8003560:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003562:	425b      	negs	r3, r3
 8003564:	454b      	cmp	r3, r9
 8003566:	dc01      	bgt.n	800356c <_printf_float+0x2b4>
 8003568:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800356a:	e794      	b.n	8003496 <_printf_float+0x1de>
 800356c:	2301      	movs	r3, #1
 800356e:	4652      	mov	r2, sl
 8003570:	4631      	mov	r1, r6
 8003572:	4628      	mov	r0, r5
 8003574:	47b8      	blx	r7
 8003576:	3001      	adds	r0, #1
 8003578:	f43f aef9 	beq.w	800336e <_printf_float+0xb6>
 800357c:	f109 0901 	add.w	r9, r9, #1
 8003580:	e7ee      	b.n	8003560 <_printf_float+0x2a8>
 8003582:	bf00      	nop
 8003584:	7fefffff 	.word	0x7fefffff
 8003588:	08005fd0 	.word	0x08005fd0
 800358c:	08005fd4 	.word	0x08005fd4
 8003590:	08005fdc 	.word	0x08005fdc
 8003594:	08005fd8 	.word	0x08005fd8
 8003598:	08005fe0 	.word	0x08005fe0
 800359c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800359e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035a0:	429a      	cmp	r2, r3
 80035a2:	bfa8      	it	ge
 80035a4:	461a      	movge	r2, r3
 80035a6:	2a00      	cmp	r2, #0
 80035a8:	4691      	mov	r9, r2
 80035aa:	dc37      	bgt.n	800361c <_printf_float+0x364>
 80035ac:	f04f 0b00 	mov.w	fp, #0
 80035b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035b4:	f104 021a 	add.w	r2, r4, #26
 80035b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80035bc:	ebaa 0309 	sub.w	r3, sl, r9
 80035c0:	455b      	cmp	r3, fp
 80035c2:	dc33      	bgt.n	800362c <_printf_float+0x374>
 80035c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035c8:	429a      	cmp	r2, r3
 80035ca:	db3b      	blt.n	8003644 <_printf_float+0x38c>
 80035cc:	6823      	ldr	r3, [r4, #0]
 80035ce:	07da      	lsls	r2, r3, #31
 80035d0:	d438      	bmi.n	8003644 <_printf_float+0x38c>
 80035d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035d6:	eba3 020a 	sub.w	r2, r3, sl
 80035da:	eba3 0901 	sub.w	r9, r3, r1
 80035de:	4591      	cmp	r9, r2
 80035e0:	bfa8      	it	ge
 80035e2:	4691      	movge	r9, r2
 80035e4:	f1b9 0f00 	cmp.w	r9, #0
 80035e8:	dc34      	bgt.n	8003654 <_printf_float+0x39c>
 80035ea:	f04f 0800 	mov.w	r8, #0
 80035ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035f2:	f104 0a1a 	add.w	sl, r4, #26
 80035f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	eba3 0309 	sub.w	r3, r3, r9
 8003600:	4543      	cmp	r3, r8
 8003602:	f77f af7a 	ble.w	80034fa <_printf_float+0x242>
 8003606:	2301      	movs	r3, #1
 8003608:	4652      	mov	r2, sl
 800360a:	4631      	mov	r1, r6
 800360c:	4628      	mov	r0, r5
 800360e:	47b8      	blx	r7
 8003610:	3001      	adds	r0, #1
 8003612:	f43f aeac 	beq.w	800336e <_printf_float+0xb6>
 8003616:	f108 0801 	add.w	r8, r8, #1
 800361a:	e7ec      	b.n	80035f6 <_printf_float+0x33e>
 800361c:	4613      	mov	r3, r2
 800361e:	4631      	mov	r1, r6
 8003620:	4642      	mov	r2, r8
 8003622:	4628      	mov	r0, r5
 8003624:	47b8      	blx	r7
 8003626:	3001      	adds	r0, #1
 8003628:	d1c0      	bne.n	80035ac <_printf_float+0x2f4>
 800362a:	e6a0      	b.n	800336e <_printf_float+0xb6>
 800362c:	2301      	movs	r3, #1
 800362e:	4631      	mov	r1, r6
 8003630:	4628      	mov	r0, r5
 8003632:	920b      	str	r2, [sp, #44]	; 0x2c
 8003634:	47b8      	blx	r7
 8003636:	3001      	adds	r0, #1
 8003638:	f43f ae99 	beq.w	800336e <_printf_float+0xb6>
 800363c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800363e:	f10b 0b01 	add.w	fp, fp, #1
 8003642:	e7b9      	b.n	80035b8 <_printf_float+0x300>
 8003644:	4631      	mov	r1, r6
 8003646:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800364a:	4628      	mov	r0, r5
 800364c:	47b8      	blx	r7
 800364e:	3001      	adds	r0, #1
 8003650:	d1bf      	bne.n	80035d2 <_printf_float+0x31a>
 8003652:	e68c      	b.n	800336e <_printf_float+0xb6>
 8003654:	464b      	mov	r3, r9
 8003656:	4631      	mov	r1, r6
 8003658:	4628      	mov	r0, r5
 800365a:	eb08 020a 	add.w	r2, r8, sl
 800365e:	47b8      	blx	r7
 8003660:	3001      	adds	r0, #1
 8003662:	d1c2      	bne.n	80035ea <_printf_float+0x332>
 8003664:	e683      	b.n	800336e <_printf_float+0xb6>
 8003666:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003668:	2a01      	cmp	r2, #1
 800366a:	dc01      	bgt.n	8003670 <_printf_float+0x3b8>
 800366c:	07db      	lsls	r3, r3, #31
 800366e:	d537      	bpl.n	80036e0 <_printf_float+0x428>
 8003670:	2301      	movs	r3, #1
 8003672:	4642      	mov	r2, r8
 8003674:	4631      	mov	r1, r6
 8003676:	4628      	mov	r0, r5
 8003678:	47b8      	blx	r7
 800367a:	3001      	adds	r0, #1
 800367c:	f43f ae77 	beq.w	800336e <_printf_float+0xb6>
 8003680:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003684:	4631      	mov	r1, r6
 8003686:	4628      	mov	r0, r5
 8003688:	47b8      	blx	r7
 800368a:	3001      	adds	r0, #1
 800368c:	f43f ae6f 	beq.w	800336e <_printf_float+0xb6>
 8003690:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003694:	2200      	movs	r2, #0
 8003696:	2300      	movs	r3, #0
 8003698:	f7fd f986 	bl	80009a8 <__aeabi_dcmpeq>
 800369c:	b9d8      	cbnz	r0, 80036d6 <_printf_float+0x41e>
 800369e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036a0:	f108 0201 	add.w	r2, r8, #1
 80036a4:	3b01      	subs	r3, #1
 80036a6:	4631      	mov	r1, r6
 80036a8:	4628      	mov	r0, r5
 80036aa:	47b8      	blx	r7
 80036ac:	3001      	adds	r0, #1
 80036ae:	d10e      	bne.n	80036ce <_printf_float+0x416>
 80036b0:	e65d      	b.n	800336e <_printf_float+0xb6>
 80036b2:	2301      	movs	r3, #1
 80036b4:	464a      	mov	r2, r9
 80036b6:	4631      	mov	r1, r6
 80036b8:	4628      	mov	r0, r5
 80036ba:	47b8      	blx	r7
 80036bc:	3001      	adds	r0, #1
 80036be:	f43f ae56 	beq.w	800336e <_printf_float+0xb6>
 80036c2:	f108 0801 	add.w	r8, r8, #1
 80036c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036c8:	3b01      	subs	r3, #1
 80036ca:	4543      	cmp	r3, r8
 80036cc:	dcf1      	bgt.n	80036b2 <_printf_float+0x3fa>
 80036ce:	4653      	mov	r3, sl
 80036d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80036d4:	e6e0      	b.n	8003498 <_printf_float+0x1e0>
 80036d6:	f04f 0800 	mov.w	r8, #0
 80036da:	f104 091a 	add.w	r9, r4, #26
 80036de:	e7f2      	b.n	80036c6 <_printf_float+0x40e>
 80036e0:	2301      	movs	r3, #1
 80036e2:	4642      	mov	r2, r8
 80036e4:	e7df      	b.n	80036a6 <_printf_float+0x3ee>
 80036e6:	2301      	movs	r3, #1
 80036e8:	464a      	mov	r2, r9
 80036ea:	4631      	mov	r1, r6
 80036ec:	4628      	mov	r0, r5
 80036ee:	47b8      	blx	r7
 80036f0:	3001      	adds	r0, #1
 80036f2:	f43f ae3c 	beq.w	800336e <_printf_float+0xb6>
 80036f6:	f108 0801 	add.w	r8, r8, #1
 80036fa:	68e3      	ldr	r3, [r4, #12]
 80036fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80036fe:	1a5b      	subs	r3, r3, r1
 8003700:	4543      	cmp	r3, r8
 8003702:	dcf0      	bgt.n	80036e6 <_printf_float+0x42e>
 8003704:	e6fd      	b.n	8003502 <_printf_float+0x24a>
 8003706:	f04f 0800 	mov.w	r8, #0
 800370a:	f104 0919 	add.w	r9, r4, #25
 800370e:	e7f4      	b.n	80036fa <_printf_float+0x442>

08003710 <_printf_common>:
 8003710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003714:	4616      	mov	r6, r2
 8003716:	4699      	mov	r9, r3
 8003718:	688a      	ldr	r2, [r1, #8]
 800371a:	690b      	ldr	r3, [r1, #16]
 800371c:	4607      	mov	r7, r0
 800371e:	4293      	cmp	r3, r2
 8003720:	bfb8      	it	lt
 8003722:	4613      	movlt	r3, r2
 8003724:	6033      	str	r3, [r6, #0]
 8003726:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800372a:	460c      	mov	r4, r1
 800372c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003730:	b10a      	cbz	r2, 8003736 <_printf_common+0x26>
 8003732:	3301      	adds	r3, #1
 8003734:	6033      	str	r3, [r6, #0]
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	0699      	lsls	r1, r3, #26
 800373a:	bf42      	ittt	mi
 800373c:	6833      	ldrmi	r3, [r6, #0]
 800373e:	3302      	addmi	r3, #2
 8003740:	6033      	strmi	r3, [r6, #0]
 8003742:	6825      	ldr	r5, [r4, #0]
 8003744:	f015 0506 	ands.w	r5, r5, #6
 8003748:	d106      	bne.n	8003758 <_printf_common+0x48>
 800374a:	f104 0a19 	add.w	sl, r4, #25
 800374e:	68e3      	ldr	r3, [r4, #12]
 8003750:	6832      	ldr	r2, [r6, #0]
 8003752:	1a9b      	subs	r3, r3, r2
 8003754:	42ab      	cmp	r3, r5
 8003756:	dc28      	bgt.n	80037aa <_printf_common+0x9a>
 8003758:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800375c:	1e13      	subs	r3, r2, #0
 800375e:	6822      	ldr	r2, [r4, #0]
 8003760:	bf18      	it	ne
 8003762:	2301      	movne	r3, #1
 8003764:	0692      	lsls	r2, r2, #26
 8003766:	d42d      	bmi.n	80037c4 <_printf_common+0xb4>
 8003768:	4649      	mov	r1, r9
 800376a:	4638      	mov	r0, r7
 800376c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003770:	47c0      	blx	r8
 8003772:	3001      	adds	r0, #1
 8003774:	d020      	beq.n	80037b8 <_printf_common+0xa8>
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	68e5      	ldr	r5, [r4, #12]
 800377a:	f003 0306 	and.w	r3, r3, #6
 800377e:	2b04      	cmp	r3, #4
 8003780:	bf18      	it	ne
 8003782:	2500      	movne	r5, #0
 8003784:	6832      	ldr	r2, [r6, #0]
 8003786:	f04f 0600 	mov.w	r6, #0
 800378a:	68a3      	ldr	r3, [r4, #8]
 800378c:	bf08      	it	eq
 800378e:	1aad      	subeq	r5, r5, r2
 8003790:	6922      	ldr	r2, [r4, #16]
 8003792:	bf08      	it	eq
 8003794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003798:	4293      	cmp	r3, r2
 800379a:	bfc4      	itt	gt
 800379c:	1a9b      	subgt	r3, r3, r2
 800379e:	18ed      	addgt	r5, r5, r3
 80037a0:	341a      	adds	r4, #26
 80037a2:	42b5      	cmp	r5, r6
 80037a4:	d11a      	bne.n	80037dc <_printf_common+0xcc>
 80037a6:	2000      	movs	r0, #0
 80037a8:	e008      	b.n	80037bc <_printf_common+0xac>
 80037aa:	2301      	movs	r3, #1
 80037ac:	4652      	mov	r2, sl
 80037ae:	4649      	mov	r1, r9
 80037b0:	4638      	mov	r0, r7
 80037b2:	47c0      	blx	r8
 80037b4:	3001      	adds	r0, #1
 80037b6:	d103      	bne.n	80037c0 <_printf_common+0xb0>
 80037b8:	f04f 30ff 	mov.w	r0, #4294967295
 80037bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037c0:	3501      	adds	r5, #1
 80037c2:	e7c4      	b.n	800374e <_printf_common+0x3e>
 80037c4:	2030      	movs	r0, #48	; 0x30
 80037c6:	18e1      	adds	r1, r4, r3
 80037c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80037d2:	4422      	add	r2, r4
 80037d4:	3302      	adds	r3, #2
 80037d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80037da:	e7c5      	b.n	8003768 <_printf_common+0x58>
 80037dc:	2301      	movs	r3, #1
 80037de:	4622      	mov	r2, r4
 80037e0:	4649      	mov	r1, r9
 80037e2:	4638      	mov	r0, r7
 80037e4:	47c0      	blx	r8
 80037e6:	3001      	adds	r0, #1
 80037e8:	d0e6      	beq.n	80037b8 <_printf_common+0xa8>
 80037ea:	3601      	adds	r6, #1
 80037ec:	e7d9      	b.n	80037a2 <_printf_common+0x92>
	...

080037f0 <_printf_i>:
 80037f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037f4:	7e0f      	ldrb	r7, [r1, #24]
 80037f6:	4691      	mov	r9, r2
 80037f8:	2f78      	cmp	r7, #120	; 0x78
 80037fa:	4680      	mov	r8, r0
 80037fc:	460c      	mov	r4, r1
 80037fe:	469a      	mov	sl, r3
 8003800:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003802:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003806:	d807      	bhi.n	8003818 <_printf_i+0x28>
 8003808:	2f62      	cmp	r7, #98	; 0x62
 800380a:	d80a      	bhi.n	8003822 <_printf_i+0x32>
 800380c:	2f00      	cmp	r7, #0
 800380e:	f000 80d9 	beq.w	80039c4 <_printf_i+0x1d4>
 8003812:	2f58      	cmp	r7, #88	; 0x58
 8003814:	f000 80a4 	beq.w	8003960 <_printf_i+0x170>
 8003818:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800381c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003820:	e03a      	b.n	8003898 <_printf_i+0xa8>
 8003822:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003826:	2b15      	cmp	r3, #21
 8003828:	d8f6      	bhi.n	8003818 <_printf_i+0x28>
 800382a:	a101      	add	r1, pc, #4	; (adr r1, 8003830 <_printf_i+0x40>)
 800382c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003830:	08003889 	.word	0x08003889
 8003834:	0800389d 	.word	0x0800389d
 8003838:	08003819 	.word	0x08003819
 800383c:	08003819 	.word	0x08003819
 8003840:	08003819 	.word	0x08003819
 8003844:	08003819 	.word	0x08003819
 8003848:	0800389d 	.word	0x0800389d
 800384c:	08003819 	.word	0x08003819
 8003850:	08003819 	.word	0x08003819
 8003854:	08003819 	.word	0x08003819
 8003858:	08003819 	.word	0x08003819
 800385c:	080039ab 	.word	0x080039ab
 8003860:	080038cd 	.word	0x080038cd
 8003864:	0800398d 	.word	0x0800398d
 8003868:	08003819 	.word	0x08003819
 800386c:	08003819 	.word	0x08003819
 8003870:	080039cd 	.word	0x080039cd
 8003874:	08003819 	.word	0x08003819
 8003878:	080038cd 	.word	0x080038cd
 800387c:	08003819 	.word	0x08003819
 8003880:	08003819 	.word	0x08003819
 8003884:	08003995 	.word	0x08003995
 8003888:	682b      	ldr	r3, [r5, #0]
 800388a:	1d1a      	adds	r2, r3, #4
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	602a      	str	r2, [r5, #0]
 8003890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003894:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003898:	2301      	movs	r3, #1
 800389a:	e0a4      	b.n	80039e6 <_printf_i+0x1f6>
 800389c:	6820      	ldr	r0, [r4, #0]
 800389e:	6829      	ldr	r1, [r5, #0]
 80038a0:	0606      	lsls	r6, r0, #24
 80038a2:	f101 0304 	add.w	r3, r1, #4
 80038a6:	d50a      	bpl.n	80038be <_printf_i+0xce>
 80038a8:	680e      	ldr	r6, [r1, #0]
 80038aa:	602b      	str	r3, [r5, #0]
 80038ac:	2e00      	cmp	r6, #0
 80038ae:	da03      	bge.n	80038b8 <_printf_i+0xc8>
 80038b0:	232d      	movs	r3, #45	; 0x2d
 80038b2:	4276      	negs	r6, r6
 80038b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038b8:	230a      	movs	r3, #10
 80038ba:	485e      	ldr	r0, [pc, #376]	; (8003a34 <_printf_i+0x244>)
 80038bc:	e019      	b.n	80038f2 <_printf_i+0x102>
 80038be:	680e      	ldr	r6, [r1, #0]
 80038c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80038c4:	602b      	str	r3, [r5, #0]
 80038c6:	bf18      	it	ne
 80038c8:	b236      	sxthne	r6, r6
 80038ca:	e7ef      	b.n	80038ac <_printf_i+0xbc>
 80038cc:	682b      	ldr	r3, [r5, #0]
 80038ce:	6820      	ldr	r0, [r4, #0]
 80038d0:	1d19      	adds	r1, r3, #4
 80038d2:	6029      	str	r1, [r5, #0]
 80038d4:	0601      	lsls	r1, r0, #24
 80038d6:	d501      	bpl.n	80038dc <_printf_i+0xec>
 80038d8:	681e      	ldr	r6, [r3, #0]
 80038da:	e002      	b.n	80038e2 <_printf_i+0xf2>
 80038dc:	0646      	lsls	r6, r0, #25
 80038de:	d5fb      	bpl.n	80038d8 <_printf_i+0xe8>
 80038e0:	881e      	ldrh	r6, [r3, #0]
 80038e2:	2f6f      	cmp	r7, #111	; 0x6f
 80038e4:	bf0c      	ite	eq
 80038e6:	2308      	moveq	r3, #8
 80038e8:	230a      	movne	r3, #10
 80038ea:	4852      	ldr	r0, [pc, #328]	; (8003a34 <_printf_i+0x244>)
 80038ec:	2100      	movs	r1, #0
 80038ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80038f2:	6865      	ldr	r5, [r4, #4]
 80038f4:	2d00      	cmp	r5, #0
 80038f6:	bfa8      	it	ge
 80038f8:	6821      	ldrge	r1, [r4, #0]
 80038fa:	60a5      	str	r5, [r4, #8]
 80038fc:	bfa4      	itt	ge
 80038fe:	f021 0104 	bicge.w	r1, r1, #4
 8003902:	6021      	strge	r1, [r4, #0]
 8003904:	b90e      	cbnz	r6, 800390a <_printf_i+0x11a>
 8003906:	2d00      	cmp	r5, #0
 8003908:	d04d      	beq.n	80039a6 <_printf_i+0x1b6>
 800390a:	4615      	mov	r5, r2
 800390c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003910:	fb03 6711 	mls	r7, r3, r1, r6
 8003914:	5dc7      	ldrb	r7, [r0, r7]
 8003916:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800391a:	4637      	mov	r7, r6
 800391c:	42bb      	cmp	r3, r7
 800391e:	460e      	mov	r6, r1
 8003920:	d9f4      	bls.n	800390c <_printf_i+0x11c>
 8003922:	2b08      	cmp	r3, #8
 8003924:	d10b      	bne.n	800393e <_printf_i+0x14e>
 8003926:	6823      	ldr	r3, [r4, #0]
 8003928:	07de      	lsls	r6, r3, #31
 800392a:	d508      	bpl.n	800393e <_printf_i+0x14e>
 800392c:	6923      	ldr	r3, [r4, #16]
 800392e:	6861      	ldr	r1, [r4, #4]
 8003930:	4299      	cmp	r1, r3
 8003932:	bfde      	ittt	le
 8003934:	2330      	movle	r3, #48	; 0x30
 8003936:	f805 3c01 	strble.w	r3, [r5, #-1]
 800393a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800393e:	1b52      	subs	r2, r2, r5
 8003940:	6122      	str	r2, [r4, #16]
 8003942:	464b      	mov	r3, r9
 8003944:	4621      	mov	r1, r4
 8003946:	4640      	mov	r0, r8
 8003948:	f8cd a000 	str.w	sl, [sp]
 800394c:	aa03      	add	r2, sp, #12
 800394e:	f7ff fedf 	bl	8003710 <_printf_common>
 8003952:	3001      	adds	r0, #1
 8003954:	d14c      	bne.n	80039f0 <_printf_i+0x200>
 8003956:	f04f 30ff 	mov.w	r0, #4294967295
 800395a:	b004      	add	sp, #16
 800395c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003960:	4834      	ldr	r0, [pc, #208]	; (8003a34 <_printf_i+0x244>)
 8003962:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003966:	6829      	ldr	r1, [r5, #0]
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	f851 6b04 	ldr.w	r6, [r1], #4
 800396e:	6029      	str	r1, [r5, #0]
 8003970:	061d      	lsls	r5, r3, #24
 8003972:	d514      	bpl.n	800399e <_printf_i+0x1ae>
 8003974:	07df      	lsls	r7, r3, #31
 8003976:	bf44      	itt	mi
 8003978:	f043 0320 	orrmi.w	r3, r3, #32
 800397c:	6023      	strmi	r3, [r4, #0]
 800397e:	b91e      	cbnz	r6, 8003988 <_printf_i+0x198>
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	f023 0320 	bic.w	r3, r3, #32
 8003986:	6023      	str	r3, [r4, #0]
 8003988:	2310      	movs	r3, #16
 800398a:	e7af      	b.n	80038ec <_printf_i+0xfc>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	f043 0320 	orr.w	r3, r3, #32
 8003992:	6023      	str	r3, [r4, #0]
 8003994:	2378      	movs	r3, #120	; 0x78
 8003996:	4828      	ldr	r0, [pc, #160]	; (8003a38 <_printf_i+0x248>)
 8003998:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800399c:	e7e3      	b.n	8003966 <_printf_i+0x176>
 800399e:	0659      	lsls	r1, r3, #25
 80039a0:	bf48      	it	mi
 80039a2:	b2b6      	uxthmi	r6, r6
 80039a4:	e7e6      	b.n	8003974 <_printf_i+0x184>
 80039a6:	4615      	mov	r5, r2
 80039a8:	e7bb      	b.n	8003922 <_printf_i+0x132>
 80039aa:	682b      	ldr	r3, [r5, #0]
 80039ac:	6826      	ldr	r6, [r4, #0]
 80039ae:	1d18      	adds	r0, r3, #4
 80039b0:	6961      	ldr	r1, [r4, #20]
 80039b2:	6028      	str	r0, [r5, #0]
 80039b4:	0635      	lsls	r5, r6, #24
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	d501      	bpl.n	80039be <_printf_i+0x1ce>
 80039ba:	6019      	str	r1, [r3, #0]
 80039bc:	e002      	b.n	80039c4 <_printf_i+0x1d4>
 80039be:	0670      	lsls	r0, r6, #25
 80039c0:	d5fb      	bpl.n	80039ba <_printf_i+0x1ca>
 80039c2:	8019      	strh	r1, [r3, #0]
 80039c4:	2300      	movs	r3, #0
 80039c6:	4615      	mov	r5, r2
 80039c8:	6123      	str	r3, [r4, #16]
 80039ca:	e7ba      	b.n	8003942 <_printf_i+0x152>
 80039cc:	682b      	ldr	r3, [r5, #0]
 80039ce:	2100      	movs	r1, #0
 80039d0:	1d1a      	adds	r2, r3, #4
 80039d2:	602a      	str	r2, [r5, #0]
 80039d4:	681d      	ldr	r5, [r3, #0]
 80039d6:	6862      	ldr	r2, [r4, #4]
 80039d8:	4628      	mov	r0, r5
 80039da:	f000 feeb 	bl	80047b4 <memchr>
 80039de:	b108      	cbz	r0, 80039e4 <_printf_i+0x1f4>
 80039e0:	1b40      	subs	r0, r0, r5
 80039e2:	6060      	str	r0, [r4, #4]
 80039e4:	6863      	ldr	r3, [r4, #4]
 80039e6:	6123      	str	r3, [r4, #16]
 80039e8:	2300      	movs	r3, #0
 80039ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039ee:	e7a8      	b.n	8003942 <_printf_i+0x152>
 80039f0:	462a      	mov	r2, r5
 80039f2:	4649      	mov	r1, r9
 80039f4:	4640      	mov	r0, r8
 80039f6:	6923      	ldr	r3, [r4, #16]
 80039f8:	47d0      	blx	sl
 80039fa:	3001      	adds	r0, #1
 80039fc:	d0ab      	beq.n	8003956 <_printf_i+0x166>
 80039fe:	6823      	ldr	r3, [r4, #0]
 8003a00:	079b      	lsls	r3, r3, #30
 8003a02:	d413      	bmi.n	8003a2c <_printf_i+0x23c>
 8003a04:	68e0      	ldr	r0, [r4, #12]
 8003a06:	9b03      	ldr	r3, [sp, #12]
 8003a08:	4298      	cmp	r0, r3
 8003a0a:	bfb8      	it	lt
 8003a0c:	4618      	movlt	r0, r3
 8003a0e:	e7a4      	b.n	800395a <_printf_i+0x16a>
 8003a10:	2301      	movs	r3, #1
 8003a12:	4632      	mov	r2, r6
 8003a14:	4649      	mov	r1, r9
 8003a16:	4640      	mov	r0, r8
 8003a18:	47d0      	blx	sl
 8003a1a:	3001      	adds	r0, #1
 8003a1c:	d09b      	beq.n	8003956 <_printf_i+0x166>
 8003a1e:	3501      	adds	r5, #1
 8003a20:	68e3      	ldr	r3, [r4, #12]
 8003a22:	9903      	ldr	r1, [sp, #12]
 8003a24:	1a5b      	subs	r3, r3, r1
 8003a26:	42ab      	cmp	r3, r5
 8003a28:	dcf2      	bgt.n	8003a10 <_printf_i+0x220>
 8003a2a:	e7eb      	b.n	8003a04 <_printf_i+0x214>
 8003a2c:	2500      	movs	r5, #0
 8003a2e:	f104 0619 	add.w	r6, r4, #25
 8003a32:	e7f5      	b.n	8003a20 <_printf_i+0x230>
 8003a34:	08005fe2 	.word	0x08005fe2
 8003a38:	08005ff3 	.word	0x08005ff3

08003a3c <sniprintf>:
 8003a3c:	b40c      	push	{r2, r3}
 8003a3e:	b530      	push	{r4, r5, lr}
 8003a40:	4b17      	ldr	r3, [pc, #92]	; (8003aa0 <sniprintf+0x64>)
 8003a42:	1e0c      	subs	r4, r1, #0
 8003a44:	681d      	ldr	r5, [r3, #0]
 8003a46:	b09d      	sub	sp, #116	; 0x74
 8003a48:	da08      	bge.n	8003a5c <sniprintf+0x20>
 8003a4a:	238b      	movs	r3, #139	; 0x8b
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	602b      	str	r3, [r5, #0]
 8003a52:	b01d      	add	sp, #116	; 0x74
 8003a54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a58:	b002      	add	sp, #8
 8003a5a:	4770      	bx	lr
 8003a5c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003a60:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003a64:	bf0c      	ite	eq
 8003a66:	4623      	moveq	r3, r4
 8003a68:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003a6c:	9304      	str	r3, [sp, #16]
 8003a6e:	9307      	str	r3, [sp, #28]
 8003a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a74:	9002      	str	r0, [sp, #8]
 8003a76:	9006      	str	r0, [sp, #24]
 8003a78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	ab21      	add	r3, sp, #132	; 0x84
 8003a80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003a82:	a902      	add	r1, sp, #8
 8003a84:	9301      	str	r3, [sp, #4]
 8003a86:	f001 fb7f 	bl	8005188 <_svfiprintf_r>
 8003a8a:	1c43      	adds	r3, r0, #1
 8003a8c:	bfbc      	itt	lt
 8003a8e:	238b      	movlt	r3, #139	; 0x8b
 8003a90:	602b      	strlt	r3, [r5, #0]
 8003a92:	2c00      	cmp	r4, #0
 8003a94:	d0dd      	beq.n	8003a52 <sniprintf+0x16>
 8003a96:	2200      	movs	r2, #0
 8003a98:	9b02      	ldr	r3, [sp, #8]
 8003a9a:	701a      	strb	r2, [r3, #0]
 8003a9c:	e7d9      	b.n	8003a52 <sniprintf+0x16>
 8003a9e:	bf00      	nop
 8003aa0:	2000000c 	.word	0x2000000c

08003aa4 <quorem>:
 8003aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa8:	6903      	ldr	r3, [r0, #16]
 8003aaa:	690c      	ldr	r4, [r1, #16]
 8003aac:	4607      	mov	r7, r0
 8003aae:	42a3      	cmp	r3, r4
 8003ab0:	f2c0 8082 	blt.w	8003bb8 <quorem+0x114>
 8003ab4:	3c01      	subs	r4, #1
 8003ab6:	f100 0514 	add.w	r5, r0, #20
 8003aba:	f101 0814 	add.w	r8, r1, #20
 8003abe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003ac8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003acc:	3301      	adds	r3, #1
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	fbb2 f6f3 	udiv	r6, r2, r3
 8003ad4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003ad8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003adc:	d331      	bcc.n	8003b42 <quorem+0x9e>
 8003ade:	f04f 0e00 	mov.w	lr, #0
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	46ac      	mov	ip, r5
 8003ae6:	46f2      	mov	sl, lr
 8003ae8:	f850 2b04 	ldr.w	r2, [r0], #4
 8003aec:	b293      	uxth	r3, r2
 8003aee:	fb06 e303 	mla	r3, r6, r3, lr
 8003af2:	0c12      	lsrs	r2, r2, #16
 8003af4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	fb06 e202 	mla	r2, r6, r2, lr
 8003afe:	ebaa 0303 	sub.w	r3, sl, r3
 8003b02:	f8dc a000 	ldr.w	sl, [ip]
 8003b06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003b0a:	fa1f fa8a 	uxth.w	sl, sl
 8003b0e:	4453      	add	r3, sl
 8003b10:	f8dc a000 	ldr.w	sl, [ip]
 8003b14:	b292      	uxth	r2, r2
 8003b16:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003b1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b24:	4581      	cmp	r9, r0
 8003b26:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003b2a:	f84c 3b04 	str.w	r3, [ip], #4
 8003b2e:	d2db      	bcs.n	8003ae8 <quorem+0x44>
 8003b30:	f855 300b 	ldr.w	r3, [r5, fp]
 8003b34:	b92b      	cbnz	r3, 8003b42 <quorem+0x9e>
 8003b36:	9b01      	ldr	r3, [sp, #4]
 8003b38:	3b04      	subs	r3, #4
 8003b3a:	429d      	cmp	r5, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	d32f      	bcc.n	8003ba0 <quorem+0xfc>
 8003b40:	613c      	str	r4, [r7, #16]
 8003b42:	4638      	mov	r0, r7
 8003b44:	f001 f8d0 	bl	8004ce8 <__mcmp>
 8003b48:	2800      	cmp	r0, #0
 8003b4a:	db25      	blt.n	8003b98 <quorem+0xf4>
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	f04f 0c00 	mov.w	ip, #0
 8003b52:	3601      	adds	r6, #1
 8003b54:	f858 1b04 	ldr.w	r1, [r8], #4
 8003b58:	f8d0 e000 	ldr.w	lr, [r0]
 8003b5c:	b28b      	uxth	r3, r1
 8003b5e:	ebac 0303 	sub.w	r3, ip, r3
 8003b62:	fa1f f28e 	uxth.w	r2, lr
 8003b66:	4413      	add	r3, r2
 8003b68:	0c0a      	lsrs	r2, r1, #16
 8003b6a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003b6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003b78:	45c1      	cmp	r9, r8
 8003b7a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003b7e:	f840 3b04 	str.w	r3, [r0], #4
 8003b82:	d2e7      	bcs.n	8003b54 <quorem+0xb0>
 8003b84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b8c:	b922      	cbnz	r2, 8003b98 <quorem+0xf4>
 8003b8e:	3b04      	subs	r3, #4
 8003b90:	429d      	cmp	r5, r3
 8003b92:	461a      	mov	r2, r3
 8003b94:	d30a      	bcc.n	8003bac <quorem+0x108>
 8003b96:	613c      	str	r4, [r7, #16]
 8003b98:	4630      	mov	r0, r6
 8003b9a:	b003      	add	sp, #12
 8003b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	3b04      	subs	r3, #4
 8003ba4:	2a00      	cmp	r2, #0
 8003ba6:	d1cb      	bne.n	8003b40 <quorem+0x9c>
 8003ba8:	3c01      	subs	r4, #1
 8003baa:	e7c6      	b.n	8003b3a <quorem+0x96>
 8003bac:	6812      	ldr	r2, [r2, #0]
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	2a00      	cmp	r2, #0
 8003bb2:	d1f0      	bne.n	8003b96 <quorem+0xf2>
 8003bb4:	3c01      	subs	r4, #1
 8003bb6:	e7eb      	b.n	8003b90 <quorem+0xec>
 8003bb8:	2000      	movs	r0, #0
 8003bba:	e7ee      	b.n	8003b9a <quorem+0xf6>
 8003bbc:	0000      	movs	r0, r0
	...

08003bc0 <_dtoa_r>:
 8003bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc4:	4616      	mov	r6, r2
 8003bc6:	461f      	mov	r7, r3
 8003bc8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8003bca:	b099      	sub	sp, #100	; 0x64
 8003bcc:	4605      	mov	r5, r0
 8003bce:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003bd2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003bd6:	b974      	cbnz	r4, 8003bf6 <_dtoa_r+0x36>
 8003bd8:	2010      	movs	r0, #16
 8003bda:	f000 fde3 	bl	80047a4 <malloc>
 8003bde:	4602      	mov	r2, r0
 8003be0:	6268      	str	r0, [r5, #36]	; 0x24
 8003be2:	b920      	cbnz	r0, 8003bee <_dtoa_r+0x2e>
 8003be4:	21ea      	movs	r1, #234	; 0xea
 8003be6:	4ba8      	ldr	r3, [pc, #672]	; (8003e88 <_dtoa_r+0x2c8>)
 8003be8:	48a8      	ldr	r0, [pc, #672]	; (8003e8c <_dtoa_r+0x2cc>)
 8003bea:	f001 fbdd 	bl	80053a8 <__assert_func>
 8003bee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003bf2:	6004      	str	r4, [r0, #0]
 8003bf4:	60c4      	str	r4, [r0, #12]
 8003bf6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003bf8:	6819      	ldr	r1, [r3, #0]
 8003bfa:	b151      	cbz	r1, 8003c12 <_dtoa_r+0x52>
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4093      	lsls	r3, r2
 8003c02:	604a      	str	r2, [r1, #4]
 8003c04:	608b      	str	r3, [r1, #8]
 8003c06:	4628      	mov	r0, r5
 8003c08:	f000 fe30 	bl	800486c <_Bfree>
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	1e3b      	subs	r3, r7, #0
 8003c14:	bfaf      	iteee	ge
 8003c16:	2300      	movge	r3, #0
 8003c18:	2201      	movlt	r2, #1
 8003c1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003c1e:	9305      	strlt	r3, [sp, #20]
 8003c20:	bfa8      	it	ge
 8003c22:	f8c8 3000 	strge.w	r3, [r8]
 8003c26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003c2a:	4b99      	ldr	r3, [pc, #612]	; (8003e90 <_dtoa_r+0x2d0>)
 8003c2c:	bfb8      	it	lt
 8003c2e:	f8c8 2000 	strlt.w	r2, [r8]
 8003c32:	ea33 0309 	bics.w	r3, r3, r9
 8003c36:	d119      	bne.n	8003c6c <_dtoa_r+0xac>
 8003c38:	f242 730f 	movw	r3, #9999	; 0x270f
 8003c3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003c44:	4333      	orrs	r3, r6
 8003c46:	f000 857f 	beq.w	8004748 <_dtoa_r+0xb88>
 8003c4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c4c:	b953      	cbnz	r3, 8003c64 <_dtoa_r+0xa4>
 8003c4e:	4b91      	ldr	r3, [pc, #580]	; (8003e94 <_dtoa_r+0x2d4>)
 8003c50:	e022      	b.n	8003c98 <_dtoa_r+0xd8>
 8003c52:	4b91      	ldr	r3, [pc, #580]	; (8003e98 <_dtoa_r+0x2d8>)
 8003c54:	9303      	str	r3, [sp, #12]
 8003c56:	3308      	adds	r3, #8
 8003c58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	9803      	ldr	r0, [sp, #12]
 8003c5e:	b019      	add	sp, #100	; 0x64
 8003c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c64:	4b8b      	ldr	r3, [pc, #556]	; (8003e94 <_dtoa_r+0x2d4>)
 8003c66:	9303      	str	r3, [sp, #12]
 8003c68:	3303      	adds	r3, #3
 8003c6a:	e7f5      	b.n	8003c58 <_dtoa_r+0x98>
 8003c6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003c70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003c74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f7fc fe94 	bl	80009a8 <__aeabi_dcmpeq>
 8003c80:	4680      	mov	r8, r0
 8003c82:	b158      	cbz	r0, 8003c9c <_dtoa_r+0xdc>
 8003c84:	2301      	movs	r3, #1
 8003c86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8558 	beq.w	8004742 <_dtoa_r+0xb82>
 8003c92:	4882      	ldr	r0, [pc, #520]	; (8003e9c <_dtoa_r+0x2dc>)
 8003c94:	6018      	str	r0, [r3, #0]
 8003c96:	1e43      	subs	r3, r0, #1
 8003c98:	9303      	str	r3, [sp, #12]
 8003c9a:	e7df      	b.n	8003c5c <_dtoa_r+0x9c>
 8003c9c:	ab16      	add	r3, sp, #88	; 0x58
 8003c9e:	9301      	str	r3, [sp, #4]
 8003ca0:	ab17      	add	r3, sp, #92	; 0x5c
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003caa:	f001 f8c5 	bl	8004e38 <__d2b>
 8003cae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003cb2:	4683      	mov	fp, r0
 8003cb4:	2c00      	cmp	r4, #0
 8003cb6:	d07f      	beq.n	8003db8 <_dtoa_r+0x1f8>
 8003cb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003cbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cbe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003cc2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cc6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003cca:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8003cce:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	4b72      	ldr	r3, [pc, #456]	; (8003ea0 <_dtoa_r+0x2e0>)
 8003cd6:	f7fc fa47 	bl	8000168 <__aeabi_dsub>
 8003cda:	a365      	add	r3, pc, #404	; (adr r3, 8003e70 <_dtoa_r+0x2b0>)
 8003cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce0:	f7fc fbfa 	bl	80004d8 <__aeabi_dmul>
 8003ce4:	a364      	add	r3, pc, #400	; (adr r3, 8003e78 <_dtoa_r+0x2b8>)
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	f7fc fa3f 	bl	800016c <__adddf3>
 8003cee:	4606      	mov	r6, r0
 8003cf0:	4620      	mov	r0, r4
 8003cf2:	460f      	mov	r7, r1
 8003cf4:	f7fc fb86 	bl	8000404 <__aeabi_i2d>
 8003cf8:	a361      	add	r3, pc, #388	; (adr r3, 8003e80 <_dtoa_r+0x2c0>)
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f7fc fbeb 	bl	80004d8 <__aeabi_dmul>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4630      	mov	r0, r6
 8003d08:	4639      	mov	r1, r7
 8003d0a:	f7fc fa2f 	bl	800016c <__adddf3>
 8003d0e:	4606      	mov	r6, r0
 8003d10:	460f      	mov	r7, r1
 8003d12:	f7fc fe91 	bl	8000a38 <__aeabi_d2iz>
 8003d16:	2200      	movs	r2, #0
 8003d18:	4682      	mov	sl, r0
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	4639      	mov	r1, r7
 8003d20:	f7fc fe4c 	bl	80009bc <__aeabi_dcmplt>
 8003d24:	b148      	cbz	r0, 8003d3a <_dtoa_r+0x17a>
 8003d26:	4650      	mov	r0, sl
 8003d28:	f7fc fb6c 	bl	8000404 <__aeabi_i2d>
 8003d2c:	4632      	mov	r2, r6
 8003d2e:	463b      	mov	r3, r7
 8003d30:	f7fc fe3a 	bl	80009a8 <__aeabi_dcmpeq>
 8003d34:	b908      	cbnz	r0, 8003d3a <_dtoa_r+0x17a>
 8003d36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d3a:	f1ba 0f16 	cmp.w	sl, #22
 8003d3e:	d858      	bhi.n	8003df2 <_dtoa_r+0x232>
 8003d40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003d44:	4b57      	ldr	r3, [pc, #348]	; (8003ea4 <_dtoa_r+0x2e4>)
 8003d46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4e:	f7fc fe35 	bl	80009bc <__aeabi_dcmplt>
 8003d52:	2800      	cmp	r0, #0
 8003d54:	d04f      	beq.n	8003df6 <_dtoa_r+0x236>
 8003d56:	2300      	movs	r3, #0
 8003d58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d5c:	930f      	str	r3, [sp, #60]	; 0x3c
 8003d5e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003d60:	1b1c      	subs	r4, r3, r4
 8003d62:	1e63      	subs	r3, r4, #1
 8003d64:	9309      	str	r3, [sp, #36]	; 0x24
 8003d66:	bf49      	itett	mi
 8003d68:	f1c4 0301 	rsbmi	r3, r4, #1
 8003d6c:	2300      	movpl	r3, #0
 8003d6e:	9306      	strmi	r3, [sp, #24]
 8003d70:	2300      	movmi	r3, #0
 8003d72:	bf54      	ite	pl
 8003d74:	9306      	strpl	r3, [sp, #24]
 8003d76:	9309      	strmi	r3, [sp, #36]	; 0x24
 8003d78:	f1ba 0f00 	cmp.w	sl, #0
 8003d7c:	db3d      	blt.n	8003dfa <_dtoa_r+0x23a>
 8003d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d80:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003d84:	4453      	add	r3, sl
 8003d86:	9309      	str	r3, [sp, #36]	; 0x24
 8003d88:	2300      	movs	r3, #0
 8003d8a:	930a      	str	r3, [sp, #40]	; 0x28
 8003d8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d8e:	2b09      	cmp	r3, #9
 8003d90:	f200 808c 	bhi.w	8003eac <_dtoa_r+0x2ec>
 8003d94:	2b05      	cmp	r3, #5
 8003d96:	bfc4      	itt	gt
 8003d98:	3b04      	subgt	r3, #4
 8003d9a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8003d9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003d9e:	bfc8      	it	gt
 8003da0:	2400      	movgt	r4, #0
 8003da2:	f1a3 0302 	sub.w	r3, r3, #2
 8003da6:	bfd8      	it	le
 8003da8:	2401      	movle	r4, #1
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	f200 808a 	bhi.w	8003ec4 <_dtoa_r+0x304>
 8003db0:	e8df f003 	tbb	[pc, r3]
 8003db4:	5b4d4f2d 	.word	0x5b4d4f2d
 8003db8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8003dbc:	441c      	add	r4, r3
 8003dbe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	bfc3      	ittte	gt
 8003dc6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003dca:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8003dce:	fa09 f303 	lslgt.w	r3, r9, r3
 8003dd2:	f1c3 0320 	rsble	r3, r3, #32
 8003dd6:	bfc6      	itte	gt
 8003dd8:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003ddc:	4318      	orrgt	r0, r3
 8003dde:	fa06 f003 	lslle.w	r0, r6, r3
 8003de2:	f7fc faff 	bl	80003e4 <__aeabi_ui2d>
 8003de6:	2301      	movs	r3, #1
 8003de8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003dec:	3c01      	subs	r4, #1
 8003dee:	9313      	str	r3, [sp, #76]	; 0x4c
 8003df0:	e76f      	b.n	8003cd2 <_dtoa_r+0x112>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e7b2      	b.n	8003d5c <_dtoa_r+0x19c>
 8003df6:	900f      	str	r0, [sp, #60]	; 0x3c
 8003df8:	e7b1      	b.n	8003d5e <_dtoa_r+0x19e>
 8003dfa:	9b06      	ldr	r3, [sp, #24]
 8003dfc:	eba3 030a 	sub.w	r3, r3, sl
 8003e00:	9306      	str	r3, [sp, #24]
 8003e02:	f1ca 0300 	rsb	r3, sl, #0
 8003e06:	930a      	str	r3, [sp, #40]	; 0x28
 8003e08:	2300      	movs	r3, #0
 8003e0a:	930e      	str	r3, [sp, #56]	; 0x38
 8003e0c:	e7be      	b.n	8003d8c <_dtoa_r+0x1cc>
 8003e0e:	2300      	movs	r3, #0
 8003e10:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	dc58      	bgt.n	8003eca <_dtoa_r+0x30a>
 8003e18:	f04f 0901 	mov.w	r9, #1
 8003e1c:	464b      	mov	r3, r9
 8003e1e:	f8cd 9020 	str.w	r9, [sp, #32]
 8003e22:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8003e26:	2200      	movs	r2, #0
 8003e28:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8003e2a:	6042      	str	r2, [r0, #4]
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	f102 0614 	add.w	r6, r2, #20
 8003e32:	429e      	cmp	r6, r3
 8003e34:	6841      	ldr	r1, [r0, #4]
 8003e36:	d94e      	bls.n	8003ed6 <_dtoa_r+0x316>
 8003e38:	4628      	mov	r0, r5
 8003e3a:	f000 fcd7 	bl	80047ec <_Balloc>
 8003e3e:	9003      	str	r0, [sp, #12]
 8003e40:	2800      	cmp	r0, #0
 8003e42:	d14c      	bne.n	8003ede <_dtoa_r+0x31e>
 8003e44:	4602      	mov	r2, r0
 8003e46:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003e4a:	4b17      	ldr	r3, [pc, #92]	; (8003ea8 <_dtoa_r+0x2e8>)
 8003e4c:	e6cc      	b.n	8003be8 <_dtoa_r+0x28>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e7de      	b.n	8003e10 <_dtoa_r+0x250>
 8003e52:	2300      	movs	r3, #0
 8003e54:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003e58:	eb0a 0903 	add.w	r9, sl, r3
 8003e5c:	f109 0301 	add.w	r3, r9, #1
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	9308      	str	r3, [sp, #32]
 8003e64:	bfb8      	it	lt
 8003e66:	2301      	movlt	r3, #1
 8003e68:	e7dd      	b.n	8003e26 <_dtoa_r+0x266>
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e7f2      	b.n	8003e54 <_dtoa_r+0x294>
 8003e6e:	bf00      	nop
 8003e70:	636f4361 	.word	0x636f4361
 8003e74:	3fd287a7 	.word	0x3fd287a7
 8003e78:	8b60c8b3 	.word	0x8b60c8b3
 8003e7c:	3fc68a28 	.word	0x3fc68a28
 8003e80:	509f79fb 	.word	0x509f79fb
 8003e84:	3fd34413 	.word	0x3fd34413
 8003e88:	08006011 	.word	0x08006011
 8003e8c:	08006028 	.word	0x08006028
 8003e90:	7ff00000 	.word	0x7ff00000
 8003e94:	0800600d 	.word	0x0800600d
 8003e98:	08006004 	.word	0x08006004
 8003e9c:	08005fe1 	.word	0x08005fe1
 8003ea0:	3ff80000 	.word	0x3ff80000
 8003ea4:	08006118 	.word	0x08006118
 8003ea8:	08006083 	.word	0x08006083
 8003eac:	2401      	movs	r4, #1
 8003eae:	2300      	movs	r3, #0
 8003eb0:	940b      	str	r4, [sp, #44]	; 0x2c
 8003eb2:	9322      	str	r3, [sp, #136]	; 0x88
 8003eb4:	f04f 39ff 	mov.w	r9, #4294967295
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2312      	movs	r3, #18
 8003ebc:	f8cd 9020 	str.w	r9, [sp, #32]
 8003ec0:	9223      	str	r2, [sp, #140]	; 0x8c
 8003ec2:	e7b0      	b.n	8003e26 <_dtoa_r+0x266>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ec8:	e7f4      	b.n	8003eb4 <_dtoa_r+0x2f4>
 8003eca:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8003ece:	464b      	mov	r3, r9
 8003ed0:	f8cd 9020 	str.w	r9, [sp, #32]
 8003ed4:	e7a7      	b.n	8003e26 <_dtoa_r+0x266>
 8003ed6:	3101      	adds	r1, #1
 8003ed8:	6041      	str	r1, [r0, #4]
 8003eda:	0052      	lsls	r2, r2, #1
 8003edc:	e7a7      	b.n	8003e2e <_dtoa_r+0x26e>
 8003ede:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003ee0:	9a03      	ldr	r2, [sp, #12]
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	9b08      	ldr	r3, [sp, #32]
 8003ee6:	2b0e      	cmp	r3, #14
 8003ee8:	f200 80a8 	bhi.w	800403c <_dtoa_r+0x47c>
 8003eec:	2c00      	cmp	r4, #0
 8003eee:	f000 80a5 	beq.w	800403c <_dtoa_r+0x47c>
 8003ef2:	f1ba 0f00 	cmp.w	sl, #0
 8003ef6:	dd34      	ble.n	8003f62 <_dtoa_r+0x3a2>
 8003ef8:	4a9a      	ldr	r2, [pc, #616]	; (8004164 <_dtoa_r+0x5a4>)
 8003efa:	f00a 030f 	and.w	r3, sl, #15
 8003efe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003f02:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8003f06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f0a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003f0e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8003f12:	d016      	beq.n	8003f42 <_dtoa_r+0x382>
 8003f14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f18:	4b93      	ldr	r3, [pc, #588]	; (8004168 <_dtoa_r+0x5a8>)
 8003f1a:	2703      	movs	r7, #3
 8003f1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f20:	f7fc fc04 	bl	800072c <__aeabi_ddiv>
 8003f24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f28:	f004 040f 	and.w	r4, r4, #15
 8003f2c:	4e8e      	ldr	r6, [pc, #568]	; (8004168 <_dtoa_r+0x5a8>)
 8003f2e:	b954      	cbnz	r4, 8003f46 <_dtoa_r+0x386>
 8003f30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8003f34:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f38:	f7fc fbf8 	bl	800072c <__aeabi_ddiv>
 8003f3c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f40:	e029      	b.n	8003f96 <_dtoa_r+0x3d6>
 8003f42:	2702      	movs	r7, #2
 8003f44:	e7f2      	b.n	8003f2c <_dtoa_r+0x36c>
 8003f46:	07e1      	lsls	r1, r4, #31
 8003f48:	d508      	bpl.n	8003f5c <_dtoa_r+0x39c>
 8003f4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003f4e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003f52:	f7fc fac1 	bl	80004d8 <__aeabi_dmul>
 8003f56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003f5a:	3701      	adds	r7, #1
 8003f5c:	1064      	asrs	r4, r4, #1
 8003f5e:	3608      	adds	r6, #8
 8003f60:	e7e5      	b.n	8003f2e <_dtoa_r+0x36e>
 8003f62:	f000 80a5 	beq.w	80040b0 <_dtoa_r+0x4f0>
 8003f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f6a:	f1ca 0400 	rsb	r4, sl, #0
 8003f6e:	4b7d      	ldr	r3, [pc, #500]	; (8004164 <_dtoa_r+0x5a4>)
 8003f70:	f004 020f 	and.w	r2, r4, #15
 8003f74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7c:	f7fc faac 	bl	80004d8 <__aeabi_dmul>
 8003f80:	2702      	movs	r7, #2
 8003f82:	2300      	movs	r3, #0
 8003f84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f88:	4e77      	ldr	r6, [pc, #476]	; (8004168 <_dtoa_r+0x5a8>)
 8003f8a:	1124      	asrs	r4, r4, #4
 8003f8c:	2c00      	cmp	r4, #0
 8003f8e:	f040 8084 	bne.w	800409a <_dtoa_r+0x4da>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1d2      	bne.n	8003f3c <_dtoa_r+0x37c>
 8003f96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	f000 808b 	beq.w	80040b4 <_dtoa_r+0x4f4>
 8003f9e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003fa2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8003fa6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003faa:	2200      	movs	r2, #0
 8003fac:	4b6f      	ldr	r3, [pc, #444]	; (800416c <_dtoa_r+0x5ac>)
 8003fae:	f7fc fd05 	bl	80009bc <__aeabi_dcmplt>
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d07e      	beq.n	80040b4 <_dtoa_r+0x4f4>
 8003fb6:	9b08      	ldr	r3, [sp, #32]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d07b      	beq.n	80040b4 <_dtoa_r+0x4f4>
 8003fbc:	f1b9 0f00 	cmp.w	r9, #0
 8003fc0:	dd38      	ble.n	8004034 <_dtoa_r+0x474>
 8003fc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	4b69      	ldr	r3, [pc, #420]	; (8004170 <_dtoa_r+0x5b0>)
 8003fca:	f7fc fa85 	bl	80004d8 <__aeabi_dmul>
 8003fce:	464c      	mov	r4, r9
 8003fd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003fd4:	f10a 38ff 	add.w	r8, sl, #4294967295
 8003fd8:	3701      	adds	r7, #1
 8003fda:	4638      	mov	r0, r7
 8003fdc:	f7fc fa12 	bl	8000404 <__aeabi_i2d>
 8003fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fe4:	f7fc fa78 	bl	80004d8 <__aeabi_dmul>
 8003fe8:	2200      	movs	r2, #0
 8003fea:	4b62      	ldr	r3, [pc, #392]	; (8004174 <_dtoa_r+0x5b4>)
 8003fec:	f7fc f8be 	bl	800016c <__adddf3>
 8003ff0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8003ff4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8003ff8:	9611      	str	r6, [sp, #68]	; 0x44
 8003ffa:	2c00      	cmp	r4, #0
 8003ffc:	d15d      	bne.n	80040ba <_dtoa_r+0x4fa>
 8003ffe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004002:	2200      	movs	r2, #0
 8004004:	4b5c      	ldr	r3, [pc, #368]	; (8004178 <_dtoa_r+0x5b8>)
 8004006:	f7fc f8af 	bl	8000168 <__aeabi_dsub>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004012:	4633      	mov	r3, r6
 8004014:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004016:	f7fc fcef 	bl	80009f8 <__aeabi_dcmpgt>
 800401a:	2800      	cmp	r0, #0
 800401c:	f040 829c 	bne.w	8004558 <_dtoa_r+0x998>
 8004020:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004024:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004026:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800402a:	f7fc fcc7 	bl	80009bc <__aeabi_dcmplt>
 800402e:	2800      	cmp	r0, #0
 8004030:	f040 8290 	bne.w	8004554 <_dtoa_r+0x994>
 8004034:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004038:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800403c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800403e:	2b00      	cmp	r3, #0
 8004040:	f2c0 8152 	blt.w	80042e8 <_dtoa_r+0x728>
 8004044:	f1ba 0f0e 	cmp.w	sl, #14
 8004048:	f300 814e 	bgt.w	80042e8 <_dtoa_r+0x728>
 800404c:	4b45      	ldr	r3, [pc, #276]	; (8004164 <_dtoa_r+0x5a4>)
 800404e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004052:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004056:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800405a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800405c:	2b00      	cmp	r3, #0
 800405e:	f280 80db 	bge.w	8004218 <_dtoa_r+0x658>
 8004062:	9b08      	ldr	r3, [sp, #32]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f300 80d7 	bgt.w	8004218 <_dtoa_r+0x658>
 800406a:	f040 8272 	bne.w	8004552 <_dtoa_r+0x992>
 800406e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004072:	2200      	movs	r2, #0
 8004074:	4b40      	ldr	r3, [pc, #256]	; (8004178 <_dtoa_r+0x5b8>)
 8004076:	f7fc fa2f 	bl	80004d8 <__aeabi_dmul>
 800407a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800407e:	f7fc fcb1 	bl	80009e4 <__aeabi_dcmpge>
 8004082:	9c08      	ldr	r4, [sp, #32]
 8004084:	4626      	mov	r6, r4
 8004086:	2800      	cmp	r0, #0
 8004088:	f040 8248 	bne.w	800451c <_dtoa_r+0x95c>
 800408c:	2331      	movs	r3, #49	; 0x31
 800408e:	9f03      	ldr	r7, [sp, #12]
 8004090:	f10a 0a01 	add.w	sl, sl, #1
 8004094:	f807 3b01 	strb.w	r3, [r7], #1
 8004098:	e244      	b.n	8004524 <_dtoa_r+0x964>
 800409a:	07e2      	lsls	r2, r4, #31
 800409c:	d505      	bpl.n	80040aa <_dtoa_r+0x4ea>
 800409e:	e9d6 2300 	ldrd	r2, r3, [r6]
 80040a2:	f7fc fa19 	bl	80004d8 <__aeabi_dmul>
 80040a6:	2301      	movs	r3, #1
 80040a8:	3701      	adds	r7, #1
 80040aa:	1064      	asrs	r4, r4, #1
 80040ac:	3608      	adds	r6, #8
 80040ae:	e76d      	b.n	8003f8c <_dtoa_r+0x3cc>
 80040b0:	2702      	movs	r7, #2
 80040b2:	e770      	b.n	8003f96 <_dtoa_r+0x3d6>
 80040b4:	46d0      	mov	r8, sl
 80040b6:	9c08      	ldr	r4, [sp, #32]
 80040b8:	e78f      	b.n	8003fda <_dtoa_r+0x41a>
 80040ba:	9903      	ldr	r1, [sp, #12]
 80040bc:	4b29      	ldr	r3, [pc, #164]	; (8004164 <_dtoa_r+0x5a4>)
 80040be:	4421      	add	r1, r4
 80040c0:	9112      	str	r1, [sp, #72]	; 0x48
 80040c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80040c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80040cc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80040d0:	2900      	cmp	r1, #0
 80040d2:	d055      	beq.n	8004180 <_dtoa_r+0x5c0>
 80040d4:	2000      	movs	r0, #0
 80040d6:	4929      	ldr	r1, [pc, #164]	; (800417c <_dtoa_r+0x5bc>)
 80040d8:	f7fc fb28 	bl	800072c <__aeabi_ddiv>
 80040dc:	463b      	mov	r3, r7
 80040de:	4632      	mov	r2, r6
 80040e0:	f7fc f842 	bl	8000168 <__aeabi_dsub>
 80040e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80040e8:	9f03      	ldr	r7, [sp, #12]
 80040ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040ee:	f7fc fca3 	bl	8000a38 <__aeabi_d2iz>
 80040f2:	4604      	mov	r4, r0
 80040f4:	f7fc f986 	bl	8000404 <__aeabi_i2d>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004100:	f7fc f832 	bl	8000168 <__aeabi_dsub>
 8004104:	4602      	mov	r2, r0
 8004106:	460b      	mov	r3, r1
 8004108:	3430      	adds	r4, #48	; 0x30
 800410a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800410e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004112:	f807 4b01 	strb.w	r4, [r7], #1
 8004116:	f7fc fc51 	bl	80009bc <__aeabi_dcmplt>
 800411a:	2800      	cmp	r0, #0
 800411c:	d174      	bne.n	8004208 <_dtoa_r+0x648>
 800411e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004122:	2000      	movs	r0, #0
 8004124:	4911      	ldr	r1, [pc, #68]	; (800416c <_dtoa_r+0x5ac>)
 8004126:	f7fc f81f 	bl	8000168 <__aeabi_dsub>
 800412a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800412e:	f7fc fc45 	bl	80009bc <__aeabi_dcmplt>
 8004132:	2800      	cmp	r0, #0
 8004134:	f040 80b7 	bne.w	80042a6 <_dtoa_r+0x6e6>
 8004138:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800413a:	429f      	cmp	r7, r3
 800413c:	f43f af7a 	beq.w	8004034 <_dtoa_r+0x474>
 8004140:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004144:	2200      	movs	r2, #0
 8004146:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <_dtoa_r+0x5b0>)
 8004148:	f7fc f9c6 	bl	80004d8 <__aeabi_dmul>
 800414c:	2200      	movs	r2, #0
 800414e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004152:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004156:	4b06      	ldr	r3, [pc, #24]	; (8004170 <_dtoa_r+0x5b0>)
 8004158:	f7fc f9be 	bl	80004d8 <__aeabi_dmul>
 800415c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004160:	e7c3      	b.n	80040ea <_dtoa_r+0x52a>
 8004162:	bf00      	nop
 8004164:	08006118 	.word	0x08006118
 8004168:	080060f0 	.word	0x080060f0
 800416c:	3ff00000 	.word	0x3ff00000
 8004170:	40240000 	.word	0x40240000
 8004174:	401c0000 	.word	0x401c0000
 8004178:	40140000 	.word	0x40140000
 800417c:	3fe00000 	.word	0x3fe00000
 8004180:	4630      	mov	r0, r6
 8004182:	4639      	mov	r1, r7
 8004184:	f7fc f9a8 	bl	80004d8 <__aeabi_dmul>
 8004188:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800418a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800418e:	9c03      	ldr	r4, [sp, #12]
 8004190:	9314      	str	r3, [sp, #80]	; 0x50
 8004192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004196:	f7fc fc4f 	bl	8000a38 <__aeabi_d2iz>
 800419a:	9015      	str	r0, [sp, #84]	; 0x54
 800419c:	f7fc f932 	bl	8000404 <__aeabi_i2d>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80041a8:	f7fb ffde 	bl	8000168 <__aeabi_dsub>
 80041ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041ae:	4606      	mov	r6, r0
 80041b0:	3330      	adds	r3, #48	; 0x30
 80041b2:	f804 3b01 	strb.w	r3, [r4], #1
 80041b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80041b8:	460f      	mov	r7, r1
 80041ba:	429c      	cmp	r4, r3
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	d124      	bne.n	800420c <_dtoa_r+0x64c>
 80041c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80041c6:	4bb0      	ldr	r3, [pc, #704]	; (8004488 <_dtoa_r+0x8c8>)
 80041c8:	f7fb ffd0 	bl	800016c <__adddf3>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4630      	mov	r0, r6
 80041d2:	4639      	mov	r1, r7
 80041d4:	f7fc fc10 	bl	80009f8 <__aeabi_dcmpgt>
 80041d8:	2800      	cmp	r0, #0
 80041da:	d163      	bne.n	80042a4 <_dtoa_r+0x6e4>
 80041dc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80041e0:	2000      	movs	r0, #0
 80041e2:	49a9      	ldr	r1, [pc, #676]	; (8004488 <_dtoa_r+0x8c8>)
 80041e4:	f7fb ffc0 	bl	8000168 <__aeabi_dsub>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	4630      	mov	r0, r6
 80041ee:	4639      	mov	r1, r7
 80041f0:	f7fc fbe4 	bl	80009bc <__aeabi_dcmplt>
 80041f4:	2800      	cmp	r0, #0
 80041f6:	f43f af1d 	beq.w	8004034 <_dtoa_r+0x474>
 80041fa:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80041fc:	1e7b      	subs	r3, r7, #1
 80041fe:	9314      	str	r3, [sp, #80]	; 0x50
 8004200:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8004204:	2b30      	cmp	r3, #48	; 0x30
 8004206:	d0f8      	beq.n	80041fa <_dtoa_r+0x63a>
 8004208:	46c2      	mov	sl, r8
 800420a:	e03b      	b.n	8004284 <_dtoa_r+0x6c4>
 800420c:	4b9f      	ldr	r3, [pc, #636]	; (800448c <_dtoa_r+0x8cc>)
 800420e:	f7fc f963 	bl	80004d8 <__aeabi_dmul>
 8004212:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004216:	e7bc      	b.n	8004192 <_dtoa_r+0x5d2>
 8004218:	9f03      	ldr	r7, [sp, #12]
 800421a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800421e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004222:	4640      	mov	r0, r8
 8004224:	4649      	mov	r1, r9
 8004226:	f7fc fa81 	bl	800072c <__aeabi_ddiv>
 800422a:	f7fc fc05 	bl	8000a38 <__aeabi_d2iz>
 800422e:	4604      	mov	r4, r0
 8004230:	f7fc f8e8 	bl	8000404 <__aeabi_i2d>
 8004234:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004238:	f7fc f94e 	bl	80004d8 <__aeabi_dmul>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4640      	mov	r0, r8
 8004242:	4649      	mov	r1, r9
 8004244:	f7fb ff90 	bl	8000168 <__aeabi_dsub>
 8004248:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800424c:	f807 6b01 	strb.w	r6, [r7], #1
 8004250:	9e03      	ldr	r6, [sp, #12]
 8004252:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004256:	1bbe      	subs	r6, r7, r6
 8004258:	45b4      	cmp	ip, r6
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	d136      	bne.n	80042ce <_dtoa_r+0x70e>
 8004260:	f7fb ff84 	bl	800016c <__adddf3>
 8004264:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004268:	4680      	mov	r8, r0
 800426a:	4689      	mov	r9, r1
 800426c:	f7fc fbc4 	bl	80009f8 <__aeabi_dcmpgt>
 8004270:	bb58      	cbnz	r0, 80042ca <_dtoa_r+0x70a>
 8004272:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004276:	4640      	mov	r0, r8
 8004278:	4649      	mov	r1, r9
 800427a:	f7fc fb95 	bl	80009a8 <__aeabi_dcmpeq>
 800427e:	b108      	cbz	r0, 8004284 <_dtoa_r+0x6c4>
 8004280:	07e1      	lsls	r1, r4, #31
 8004282:	d422      	bmi.n	80042ca <_dtoa_r+0x70a>
 8004284:	4628      	mov	r0, r5
 8004286:	4659      	mov	r1, fp
 8004288:	f000 faf0 	bl	800486c <_Bfree>
 800428c:	2300      	movs	r3, #0
 800428e:	703b      	strb	r3, [r7, #0]
 8004290:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004292:	f10a 0001 	add.w	r0, sl, #1
 8004296:	6018      	str	r0, [r3, #0]
 8004298:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800429a:	2b00      	cmp	r3, #0
 800429c:	f43f acde 	beq.w	8003c5c <_dtoa_r+0x9c>
 80042a0:	601f      	str	r7, [r3, #0]
 80042a2:	e4db      	b.n	8003c5c <_dtoa_r+0x9c>
 80042a4:	4627      	mov	r7, r4
 80042a6:	463b      	mov	r3, r7
 80042a8:	461f      	mov	r7, r3
 80042aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80042ae:	2a39      	cmp	r2, #57	; 0x39
 80042b0:	d107      	bne.n	80042c2 <_dtoa_r+0x702>
 80042b2:	9a03      	ldr	r2, [sp, #12]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d1f7      	bne.n	80042a8 <_dtoa_r+0x6e8>
 80042b8:	2230      	movs	r2, #48	; 0x30
 80042ba:	9903      	ldr	r1, [sp, #12]
 80042bc:	f108 0801 	add.w	r8, r8, #1
 80042c0:	700a      	strb	r2, [r1, #0]
 80042c2:	781a      	ldrb	r2, [r3, #0]
 80042c4:	3201      	adds	r2, #1
 80042c6:	701a      	strb	r2, [r3, #0]
 80042c8:	e79e      	b.n	8004208 <_dtoa_r+0x648>
 80042ca:	46d0      	mov	r8, sl
 80042cc:	e7eb      	b.n	80042a6 <_dtoa_r+0x6e6>
 80042ce:	2200      	movs	r2, #0
 80042d0:	4b6e      	ldr	r3, [pc, #440]	; (800448c <_dtoa_r+0x8cc>)
 80042d2:	f7fc f901 	bl	80004d8 <__aeabi_dmul>
 80042d6:	2200      	movs	r2, #0
 80042d8:	2300      	movs	r3, #0
 80042da:	4680      	mov	r8, r0
 80042dc:	4689      	mov	r9, r1
 80042de:	f7fc fb63 	bl	80009a8 <__aeabi_dcmpeq>
 80042e2:	2800      	cmp	r0, #0
 80042e4:	d09b      	beq.n	800421e <_dtoa_r+0x65e>
 80042e6:	e7cd      	b.n	8004284 <_dtoa_r+0x6c4>
 80042e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80042ea:	2a00      	cmp	r2, #0
 80042ec:	f000 80d0 	beq.w	8004490 <_dtoa_r+0x8d0>
 80042f0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80042f2:	2a01      	cmp	r2, #1
 80042f4:	f300 80ae 	bgt.w	8004454 <_dtoa_r+0x894>
 80042f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80042fa:	2a00      	cmp	r2, #0
 80042fc:	f000 80a6 	beq.w	800444c <_dtoa_r+0x88c>
 8004300:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004304:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004306:	9f06      	ldr	r7, [sp, #24]
 8004308:	9a06      	ldr	r2, [sp, #24]
 800430a:	2101      	movs	r1, #1
 800430c:	441a      	add	r2, r3
 800430e:	9206      	str	r2, [sp, #24]
 8004310:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004312:	4628      	mov	r0, r5
 8004314:	441a      	add	r2, r3
 8004316:	9209      	str	r2, [sp, #36]	; 0x24
 8004318:	f000 fb5e 	bl	80049d8 <__i2b>
 800431c:	4606      	mov	r6, r0
 800431e:	2f00      	cmp	r7, #0
 8004320:	dd0c      	ble.n	800433c <_dtoa_r+0x77c>
 8004322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	dd09      	ble.n	800433c <_dtoa_r+0x77c>
 8004328:	42bb      	cmp	r3, r7
 800432a:	bfa8      	it	ge
 800432c:	463b      	movge	r3, r7
 800432e:	9a06      	ldr	r2, [sp, #24]
 8004330:	1aff      	subs	r7, r7, r3
 8004332:	1ad2      	subs	r2, r2, r3
 8004334:	9206      	str	r2, [sp, #24]
 8004336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	9309      	str	r3, [sp, #36]	; 0x24
 800433c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800433e:	b1f3      	cbz	r3, 800437e <_dtoa_r+0x7be>
 8004340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004342:	2b00      	cmp	r3, #0
 8004344:	f000 80a8 	beq.w	8004498 <_dtoa_r+0x8d8>
 8004348:	2c00      	cmp	r4, #0
 800434a:	dd10      	ble.n	800436e <_dtoa_r+0x7ae>
 800434c:	4631      	mov	r1, r6
 800434e:	4622      	mov	r2, r4
 8004350:	4628      	mov	r0, r5
 8004352:	f000 fbff 	bl	8004b54 <__pow5mult>
 8004356:	465a      	mov	r2, fp
 8004358:	4601      	mov	r1, r0
 800435a:	4606      	mov	r6, r0
 800435c:	4628      	mov	r0, r5
 800435e:	f000 fb51 	bl	8004a04 <__multiply>
 8004362:	4680      	mov	r8, r0
 8004364:	4659      	mov	r1, fp
 8004366:	4628      	mov	r0, r5
 8004368:	f000 fa80 	bl	800486c <_Bfree>
 800436c:	46c3      	mov	fp, r8
 800436e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004370:	1b1a      	subs	r2, r3, r4
 8004372:	d004      	beq.n	800437e <_dtoa_r+0x7be>
 8004374:	4659      	mov	r1, fp
 8004376:	4628      	mov	r0, r5
 8004378:	f000 fbec 	bl	8004b54 <__pow5mult>
 800437c:	4683      	mov	fp, r0
 800437e:	2101      	movs	r1, #1
 8004380:	4628      	mov	r0, r5
 8004382:	f000 fb29 	bl	80049d8 <__i2b>
 8004386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004388:	4604      	mov	r4, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	f340 8086 	ble.w	800449c <_dtoa_r+0x8dc>
 8004390:	461a      	mov	r2, r3
 8004392:	4601      	mov	r1, r0
 8004394:	4628      	mov	r0, r5
 8004396:	f000 fbdd 	bl	8004b54 <__pow5mult>
 800439a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800439c:	4604      	mov	r4, r0
 800439e:	2b01      	cmp	r3, #1
 80043a0:	dd7f      	ble.n	80044a2 <_dtoa_r+0x8e2>
 80043a2:	f04f 0800 	mov.w	r8, #0
 80043a6:	6923      	ldr	r3, [r4, #16]
 80043a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80043ac:	6918      	ldr	r0, [r3, #16]
 80043ae:	f000 fac5 	bl	800493c <__hi0bits>
 80043b2:	f1c0 0020 	rsb	r0, r0, #32
 80043b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043b8:	4418      	add	r0, r3
 80043ba:	f010 001f 	ands.w	r0, r0, #31
 80043be:	f000 8092 	beq.w	80044e6 <_dtoa_r+0x926>
 80043c2:	f1c0 0320 	rsb	r3, r0, #32
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	f340 808a 	ble.w	80044e0 <_dtoa_r+0x920>
 80043cc:	f1c0 001c 	rsb	r0, r0, #28
 80043d0:	9b06      	ldr	r3, [sp, #24]
 80043d2:	4407      	add	r7, r0
 80043d4:	4403      	add	r3, r0
 80043d6:	9306      	str	r3, [sp, #24]
 80043d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043da:	4403      	add	r3, r0
 80043dc:	9309      	str	r3, [sp, #36]	; 0x24
 80043de:	9b06      	ldr	r3, [sp, #24]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	dd05      	ble.n	80043f0 <_dtoa_r+0x830>
 80043e4:	4659      	mov	r1, fp
 80043e6:	461a      	mov	r2, r3
 80043e8:	4628      	mov	r0, r5
 80043ea:	f000 fc0d 	bl	8004c08 <__lshift>
 80043ee:	4683      	mov	fp, r0
 80043f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	dd05      	ble.n	8004402 <_dtoa_r+0x842>
 80043f6:	4621      	mov	r1, r4
 80043f8:	461a      	mov	r2, r3
 80043fa:	4628      	mov	r0, r5
 80043fc:	f000 fc04 	bl	8004c08 <__lshift>
 8004400:	4604      	mov	r4, r0
 8004402:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d070      	beq.n	80044ea <_dtoa_r+0x92a>
 8004408:	4621      	mov	r1, r4
 800440a:	4658      	mov	r0, fp
 800440c:	f000 fc6c 	bl	8004ce8 <__mcmp>
 8004410:	2800      	cmp	r0, #0
 8004412:	da6a      	bge.n	80044ea <_dtoa_r+0x92a>
 8004414:	2300      	movs	r3, #0
 8004416:	4659      	mov	r1, fp
 8004418:	220a      	movs	r2, #10
 800441a:	4628      	mov	r0, r5
 800441c:	f000 fa48 	bl	80048b0 <__multadd>
 8004420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004422:	4683      	mov	fp, r0
 8004424:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8194 	beq.w	8004756 <_dtoa_r+0xb96>
 800442e:	4631      	mov	r1, r6
 8004430:	2300      	movs	r3, #0
 8004432:	220a      	movs	r2, #10
 8004434:	4628      	mov	r0, r5
 8004436:	f000 fa3b 	bl	80048b0 <__multadd>
 800443a:	f1b9 0f00 	cmp.w	r9, #0
 800443e:	4606      	mov	r6, r0
 8004440:	f300 8093 	bgt.w	800456a <_dtoa_r+0x9aa>
 8004444:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004446:	2b02      	cmp	r3, #2
 8004448:	dc57      	bgt.n	80044fa <_dtoa_r+0x93a>
 800444a:	e08e      	b.n	800456a <_dtoa_r+0x9aa>
 800444c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800444e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004452:	e757      	b.n	8004304 <_dtoa_r+0x744>
 8004454:	9b08      	ldr	r3, [sp, #32]
 8004456:	1e5c      	subs	r4, r3, #1
 8004458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800445a:	42a3      	cmp	r3, r4
 800445c:	bfb7      	itett	lt
 800445e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004460:	1b1c      	subge	r4, r3, r4
 8004462:	1ae2      	sublt	r2, r4, r3
 8004464:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004466:	bfbe      	ittt	lt
 8004468:	940a      	strlt	r4, [sp, #40]	; 0x28
 800446a:	189b      	addlt	r3, r3, r2
 800446c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800446e:	9b08      	ldr	r3, [sp, #32]
 8004470:	bfb8      	it	lt
 8004472:	2400      	movlt	r4, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	bfbb      	ittet	lt
 8004478:	9b06      	ldrlt	r3, [sp, #24]
 800447a:	9a08      	ldrlt	r2, [sp, #32]
 800447c:	9f06      	ldrge	r7, [sp, #24]
 800447e:	1a9f      	sublt	r7, r3, r2
 8004480:	bfac      	ite	ge
 8004482:	9b08      	ldrge	r3, [sp, #32]
 8004484:	2300      	movlt	r3, #0
 8004486:	e73f      	b.n	8004308 <_dtoa_r+0x748>
 8004488:	3fe00000 	.word	0x3fe00000
 800448c:	40240000 	.word	0x40240000
 8004490:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004492:	9f06      	ldr	r7, [sp, #24]
 8004494:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004496:	e742      	b.n	800431e <_dtoa_r+0x75e>
 8004498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800449a:	e76b      	b.n	8004374 <_dtoa_r+0x7b4>
 800449c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800449e:	2b01      	cmp	r3, #1
 80044a0:	dc19      	bgt.n	80044d6 <_dtoa_r+0x916>
 80044a2:	9b04      	ldr	r3, [sp, #16]
 80044a4:	b9bb      	cbnz	r3, 80044d6 <_dtoa_r+0x916>
 80044a6:	9b05      	ldr	r3, [sp, #20]
 80044a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044ac:	b99b      	cbnz	r3, 80044d6 <_dtoa_r+0x916>
 80044ae:	9b05      	ldr	r3, [sp, #20]
 80044b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80044b4:	0d1b      	lsrs	r3, r3, #20
 80044b6:	051b      	lsls	r3, r3, #20
 80044b8:	b183      	cbz	r3, 80044dc <_dtoa_r+0x91c>
 80044ba:	f04f 0801 	mov.w	r8, #1
 80044be:	9b06      	ldr	r3, [sp, #24]
 80044c0:	3301      	adds	r3, #1
 80044c2:	9306      	str	r3, [sp, #24]
 80044c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044c6:	3301      	adds	r3, #1
 80044c8:	9309      	str	r3, [sp, #36]	; 0x24
 80044ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f47f af6a 	bne.w	80043a6 <_dtoa_r+0x7e6>
 80044d2:	2001      	movs	r0, #1
 80044d4:	e76f      	b.n	80043b6 <_dtoa_r+0x7f6>
 80044d6:	f04f 0800 	mov.w	r8, #0
 80044da:	e7f6      	b.n	80044ca <_dtoa_r+0x90a>
 80044dc:	4698      	mov	r8, r3
 80044de:	e7f4      	b.n	80044ca <_dtoa_r+0x90a>
 80044e0:	f43f af7d 	beq.w	80043de <_dtoa_r+0x81e>
 80044e4:	4618      	mov	r0, r3
 80044e6:	301c      	adds	r0, #28
 80044e8:	e772      	b.n	80043d0 <_dtoa_r+0x810>
 80044ea:	9b08      	ldr	r3, [sp, #32]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	dc36      	bgt.n	800455e <_dtoa_r+0x99e>
 80044f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	dd33      	ble.n	800455e <_dtoa_r+0x99e>
 80044f6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044fa:	f1b9 0f00 	cmp.w	r9, #0
 80044fe:	d10d      	bne.n	800451c <_dtoa_r+0x95c>
 8004500:	4621      	mov	r1, r4
 8004502:	464b      	mov	r3, r9
 8004504:	2205      	movs	r2, #5
 8004506:	4628      	mov	r0, r5
 8004508:	f000 f9d2 	bl	80048b0 <__multadd>
 800450c:	4601      	mov	r1, r0
 800450e:	4604      	mov	r4, r0
 8004510:	4658      	mov	r0, fp
 8004512:	f000 fbe9 	bl	8004ce8 <__mcmp>
 8004516:	2800      	cmp	r0, #0
 8004518:	f73f adb8 	bgt.w	800408c <_dtoa_r+0x4cc>
 800451c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800451e:	9f03      	ldr	r7, [sp, #12]
 8004520:	ea6f 0a03 	mvn.w	sl, r3
 8004524:	f04f 0800 	mov.w	r8, #0
 8004528:	4621      	mov	r1, r4
 800452a:	4628      	mov	r0, r5
 800452c:	f000 f99e 	bl	800486c <_Bfree>
 8004530:	2e00      	cmp	r6, #0
 8004532:	f43f aea7 	beq.w	8004284 <_dtoa_r+0x6c4>
 8004536:	f1b8 0f00 	cmp.w	r8, #0
 800453a:	d005      	beq.n	8004548 <_dtoa_r+0x988>
 800453c:	45b0      	cmp	r8, r6
 800453e:	d003      	beq.n	8004548 <_dtoa_r+0x988>
 8004540:	4641      	mov	r1, r8
 8004542:	4628      	mov	r0, r5
 8004544:	f000 f992 	bl	800486c <_Bfree>
 8004548:	4631      	mov	r1, r6
 800454a:	4628      	mov	r0, r5
 800454c:	f000 f98e 	bl	800486c <_Bfree>
 8004550:	e698      	b.n	8004284 <_dtoa_r+0x6c4>
 8004552:	2400      	movs	r4, #0
 8004554:	4626      	mov	r6, r4
 8004556:	e7e1      	b.n	800451c <_dtoa_r+0x95c>
 8004558:	46c2      	mov	sl, r8
 800455a:	4626      	mov	r6, r4
 800455c:	e596      	b.n	800408c <_dtoa_r+0x4cc>
 800455e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004560:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004564:	2b00      	cmp	r3, #0
 8004566:	f000 80fd 	beq.w	8004764 <_dtoa_r+0xba4>
 800456a:	2f00      	cmp	r7, #0
 800456c:	dd05      	ble.n	800457a <_dtoa_r+0x9ba>
 800456e:	4631      	mov	r1, r6
 8004570:	463a      	mov	r2, r7
 8004572:	4628      	mov	r0, r5
 8004574:	f000 fb48 	bl	8004c08 <__lshift>
 8004578:	4606      	mov	r6, r0
 800457a:	f1b8 0f00 	cmp.w	r8, #0
 800457e:	d05c      	beq.n	800463a <_dtoa_r+0xa7a>
 8004580:	4628      	mov	r0, r5
 8004582:	6871      	ldr	r1, [r6, #4]
 8004584:	f000 f932 	bl	80047ec <_Balloc>
 8004588:	4607      	mov	r7, r0
 800458a:	b928      	cbnz	r0, 8004598 <_dtoa_r+0x9d8>
 800458c:	4602      	mov	r2, r0
 800458e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004592:	4b7f      	ldr	r3, [pc, #508]	; (8004790 <_dtoa_r+0xbd0>)
 8004594:	f7ff bb28 	b.w	8003be8 <_dtoa_r+0x28>
 8004598:	6932      	ldr	r2, [r6, #16]
 800459a:	f106 010c 	add.w	r1, r6, #12
 800459e:	3202      	adds	r2, #2
 80045a0:	0092      	lsls	r2, r2, #2
 80045a2:	300c      	adds	r0, #12
 80045a4:	f000 f914 	bl	80047d0 <memcpy>
 80045a8:	2201      	movs	r2, #1
 80045aa:	4639      	mov	r1, r7
 80045ac:	4628      	mov	r0, r5
 80045ae:	f000 fb2b 	bl	8004c08 <__lshift>
 80045b2:	46b0      	mov	r8, r6
 80045b4:	4606      	mov	r6, r0
 80045b6:	9b03      	ldr	r3, [sp, #12]
 80045b8:	3301      	adds	r3, #1
 80045ba:	9308      	str	r3, [sp, #32]
 80045bc:	9b03      	ldr	r3, [sp, #12]
 80045be:	444b      	add	r3, r9
 80045c0:	930a      	str	r3, [sp, #40]	; 0x28
 80045c2:	9b04      	ldr	r3, [sp, #16]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	9309      	str	r3, [sp, #36]	; 0x24
 80045ca:	9b08      	ldr	r3, [sp, #32]
 80045cc:	4621      	mov	r1, r4
 80045ce:	3b01      	subs	r3, #1
 80045d0:	4658      	mov	r0, fp
 80045d2:	9304      	str	r3, [sp, #16]
 80045d4:	f7ff fa66 	bl	8003aa4 <quorem>
 80045d8:	4603      	mov	r3, r0
 80045da:	4641      	mov	r1, r8
 80045dc:	3330      	adds	r3, #48	; 0x30
 80045de:	9006      	str	r0, [sp, #24]
 80045e0:	4658      	mov	r0, fp
 80045e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80045e4:	f000 fb80 	bl	8004ce8 <__mcmp>
 80045e8:	4632      	mov	r2, r6
 80045ea:	4681      	mov	r9, r0
 80045ec:	4621      	mov	r1, r4
 80045ee:	4628      	mov	r0, r5
 80045f0:	f000 fb96 	bl	8004d20 <__mdiff>
 80045f4:	68c2      	ldr	r2, [r0, #12]
 80045f6:	4607      	mov	r7, r0
 80045f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045fa:	bb02      	cbnz	r2, 800463e <_dtoa_r+0xa7e>
 80045fc:	4601      	mov	r1, r0
 80045fe:	4658      	mov	r0, fp
 8004600:	f000 fb72 	bl	8004ce8 <__mcmp>
 8004604:	4602      	mov	r2, r0
 8004606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004608:	4639      	mov	r1, r7
 800460a:	4628      	mov	r0, r5
 800460c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004610:	f000 f92c 	bl	800486c <_Bfree>
 8004614:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004618:	9f08      	ldr	r7, [sp, #32]
 800461a:	ea43 0102 	orr.w	r1, r3, r2
 800461e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004620:	430b      	orrs	r3, r1
 8004622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004624:	d10d      	bne.n	8004642 <_dtoa_r+0xa82>
 8004626:	2b39      	cmp	r3, #57	; 0x39
 8004628:	d029      	beq.n	800467e <_dtoa_r+0xabe>
 800462a:	f1b9 0f00 	cmp.w	r9, #0
 800462e:	dd01      	ble.n	8004634 <_dtoa_r+0xa74>
 8004630:	9b06      	ldr	r3, [sp, #24]
 8004632:	3331      	adds	r3, #49	; 0x31
 8004634:	9a04      	ldr	r2, [sp, #16]
 8004636:	7013      	strb	r3, [r2, #0]
 8004638:	e776      	b.n	8004528 <_dtoa_r+0x968>
 800463a:	4630      	mov	r0, r6
 800463c:	e7b9      	b.n	80045b2 <_dtoa_r+0x9f2>
 800463e:	2201      	movs	r2, #1
 8004640:	e7e2      	b.n	8004608 <_dtoa_r+0xa48>
 8004642:	f1b9 0f00 	cmp.w	r9, #0
 8004646:	db06      	blt.n	8004656 <_dtoa_r+0xa96>
 8004648:	9922      	ldr	r1, [sp, #136]	; 0x88
 800464a:	ea41 0909 	orr.w	r9, r1, r9
 800464e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004650:	ea59 0101 	orrs.w	r1, r9, r1
 8004654:	d120      	bne.n	8004698 <_dtoa_r+0xad8>
 8004656:	2a00      	cmp	r2, #0
 8004658:	ddec      	ble.n	8004634 <_dtoa_r+0xa74>
 800465a:	4659      	mov	r1, fp
 800465c:	2201      	movs	r2, #1
 800465e:	4628      	mov	r0, r5
 8004660:	9308      	str	r3, [sp, #32]
 8004662:	f000 fad1 	bl	8004c08 <__lshift>
 8004666:	4621      	mov	r1, r4
 8004668:	4683      	mov	fp, r0
 800466a:	f000 fb3d 	bl	8004ce8 <__mcmp>
 800466e:	2800      	cmp	r0, #0
 8004670:	9b08      	ldr	r3, [sp, #32]
 8004672:	dc02      	bgt.n	800467a <_dtoa_r+0xaba>
 8004674:	d1de      	bne.n	8004634 <_dtoa_r+0xa74>
 8004676:	07da      	lsls	r2, r3, #31
 8004678:	d5dc      	bpl.n	8004634 <_dtoa_r+0xa74>
 800467a:	2b39      	cmp	r3, #57	; 0x39
 800467c:	d1d8      	bne.n	8004630 <_dtoa_r+0xa70>
 800467e:	2339      	movs	r3, #57	; 0x39
 8004680:	9a04      	ldr	r2, [sp, #16]
 8004682:	7013      	strb	r3, [r2, #0]
 8004684:	463b      	mov	r3, r7
 8004686:	461f      	mov	r7, r3
 8004688:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800468c:	3b01      	subs	r3, #1
 800468e:	2a39      	cmp	r2, #57	; 0x39
 8004690:	d050      	beq.n	8004734 <_dtoa_r+0xb74>
 8004692:	3201      	adds	r2, #1
 8004694:	701a      	strb	r2, [r3, #0]
 8004696:	e747      	b.n	8004528 <_dtoa_r+0x968>
 8004698:	2a00      	cmp	r2, #0
 800469a:	dd03      	ble.n	80046a4 <_dtoa_r+0xae4>
 800469c:	2b39      	cmp	r3, #57	; 0x39
 800469e:	d0ee      	beq.n	800467e <_dtoa_r+0xabe>
 80046a0:	3301      	adds	r3, #1
 80046a2:	e7c7      	b.n	8004634 <_dtoa_r+0xa74>
 80046a4:	9a08      	ldr	r2, [sp, #32]
 80046a6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80046a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80046ac:	428a      	cmp	r2, r1
 80046ae:	d02a      	beq.n	8004706 <_dtoa_r+0xb46>
 80046b0:	4659      	mov	r1, fp
 80046b2:	2300      	movs	r3, #0
 80046b4:	220a      	movs	r2, #10
 80046b6:	4628      	mov	r0, r5
 80046b8:	f000 f8fa 	bl	80048b0 <__multadd>
 80046bc:	45b0      	cmp	r8, r6
 80046be:	4683      	mov	fp, r0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	f04f 020a 	mov.w	r2, #10
 80046c8:	4641      	mov	r1, r8
 80046ca:	4628      	mov	r0, r5
 80046cc:	d107      	bne.n	80046de <_dtoa_r+0xb1e>
 80046ce:	f000 f8ef 	bl	80048b0 <__multadd>
 80046d2:	4680      	mov	r8, r0
 80046d4:	4606      	mov	r6, r0
 80046d6:	9b08      	ldr	r3, [sp, #32]
 80046d8:	3301      	adds	r3, #1
 80046da:	9308      	str	r3, [sp, #32]
 80046dc:	e775      	b.n	80045ca <_dtoa_r+0xa0a>
 80046de:	f000 f8e7 	bl	80048b0 <__multadd>
 80046e2:	4631      	mov	r1, r6
 80046e4:	4680      	mov	r8, r0
 80046e6:	2300      	movs	r3, #0
 80046e8:	220a      	movs	r2, #10
 80046ea:	4628      	mov	r0, r5
 80046ec:	f000 f8e0 	bl	80048b0 <__multadd>
 80046f0:	4606      	mov	r6, r0
 80046f2:	e7f0      	b.n	80046d6 <_dtoa_r+0xb16>
 80046f4:	f1b9 0f00 	cmp.w	r9, #0
 80046f8:	bfcc      	ite	gt
 80046fa:	464f      	movgt	r7, r9
 80046fc:	2701      	movle	r7, #1
 80046fe:	f04f 0800 	mov.w	r8, #0
 8004702:	9a03      	ldr	r2, [sp, #12]
 8004704:	4417      	add	r7, r2
 8004706:	4659      	mov	r1, fp
 8004708:	2201      	movs	r2, #1
 800470a:	4628      	mov	r0, r5
 800470c:	9308      	str	r3, [sp, #32]
 800470e:	f000 fa7b 	bl	8004c08 <__lshift>
 8004712:	4621      	mov	r1, r4
 8004714:	4683      	mov	fp, r0
 8004716:	f000 fae7 	bl	8004ce8 <__mcmp>
 800471a:	2800      	cmp	r0, #0
 800471c:	dcb2      	bgt.n	8004684 <_dtoa_r+0xac4>
 800471e:	d102      	bne.n	8004726 <_dtoa_r+0xb66>
 8004720:	9b08      	ldr	r3, [sp, #32]
 8004722:	07db      	lsls	r3, r3, #31
 8004724:	d4ae      	bmi.n	8004684 <_dtoa_r+0xac4>
 8004726:	463b      	mov	r3, r7
 8004728:	461f      	mov	r7, r3
 800472a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800472e:	2a30      	cmp	r2, #48	; 0x30
 8004730:	d0fa      	beq.n	8004728 <_dtoa_r+0xb68>
 8004732:	e6f9      	b.n	8004528 <_dtoa_r+0x968>
 8004734:	9a03      	ldr	r2, [sp, #12]
 8004736:	429a      	cmp	r2, r3
 8004738:	d1a5      	bne.n	8004686 <_dtoa_r+0xac6>
 800473a:	2331      	movs	r3, #49	; 0x31
 800473c:	f10a 0a01 	add.w	sl, sl, #1
 8004740:	e779      	b.n	8004636 <_dtoa_r+0xa76>
 8004742:	4b14      	ldr	r3, [pc, #80]	; (8004794 <_dtoa_r+0xbd4>)
 8004744:	f7ff baa8 	b.w	8003c98 <_dtoa_r+0xd8>
 8004748:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800474a:	2b00      	cmp	r3, #0
 800474c:	f47f aa81 	bne.w	8003c52 <_dtoa_r+0x92>
 8004750:	4b11      	ldr	r3, [pc, #68]	; (8004798 <_dtoa_r+0xbd8>)
 8004752:	f7ff baa1 	b.w	8003c98 <_dtoa_r+0xd8>
 8004756:	f1b9 0f00 	cmp.w	r9, #0
 800475a:	dc03      	bgt.n	8004764 <_dtoa_r+0xba4>
 800475c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800475e:	2b02      	cmp	r3, #2
 8004760:	f73f aecb 	bgt.w	80044fa <_dtoa_r+0x93a>
 8004764:	9f03      	ldr	r7, [sp, #12]
 8004766:	4621      	mov	r1, r4
 8004768:	4658      	mov	r0, fp
 800476a:	f7ff f99b 	bl	8003aa4 <quorem>
 800476e:	9a03      	ldr	r2, [sp, #12]
 8004770:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004774:	f807 3b01 	strb.w	r3, [r7], #1
 8004778:	1aba      	subs	r2, r7, r2
 800477a:	4591      	cmp	r9, r2
 800477c:	ddba      	ble.n	80046f4 <_dtoa_r+0xb34>
 800477e:	4659      	mov	r1, fp
 8004780:	2300      	movs	r3, #0
 8004782:	220a      	movs	r2, #10
 8004784:	4628      	mov	r0, r5
 8004786:	f000 f893 	bl	80048b0 <__multadd>
 800478a:	4683      	mov	fp, r0
 800478c:	e7eb      	b.n	8004766 <_dtoa_r+0xba6>
 800478e:	bf00      	nop
 8004790:	08006083 	.word	0x08006083
 8004794:	08005fe0 	.word	0x08005fe0
 8004798:	08006004 	.word	0x08006004

0800479c <_localeconv_r>:
 800479c:	4800      	ldr	r0, [pc, #0]	; (80047a0 <_localeconv_r+0x4>)
 800479e:	4770      	bx	lr
 80047a0:	20000160 	.word	0x20000160

080047a4 <malloc>:
 80047a4:	4b02      	ldr	r3, [pc, #8]	; (80047b0 <malloc+0xc>)
 80047a6:	4601      	mov	r1, r0
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	f000 bc1d 	b.w	8004fe8 <_malloc_r>
 80047ae:	bf00      	nop
 80047b0:	2000000c 	.word	0x2000000c

080047b4 <memchr>:
 80047b4:	4603      	mov	r3, r0
 80047b6:	b510      	push	{r4, lr}
 80047b8:	b2c9      	uxtb	r1, r1
 80047ba:	4402      	add	r2, r0
 80047bc:	4293      	cmp	r3, r2
 80047be:	4618      	mov	r0, r3
 80047c0:	d101      	bne.n	80047c6 <memchr+0x12>
 80047c2:	2000      	movs	r0, #0
 80047c4:	e003      	b.n	80047ce <memchr+0x1a>
 80047c6:	7804      	ldrb	r4, [r0, #0]
 80047c8:	3301      	adds	r3, #1
 80047ca:	428c      	cmp	r4, r1
 80047cc:	d1f6      	bne.n	80047bc <memchr+0x8>
 80047ce:	bd10      	pop	{r4, pc}

080047d0 <memcpy>:
 80047d0:	440a      	add	r2, r1
 80047d2:	4291      	cmp	r1, r2
 80047d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80047d8:	d100      	bne.n	80047dc <memcpy+0xc>
 80047da:	4770      	bx	lr
 80047dc:	b510      	push	{r4, lr}
 80047de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047e2:	4291      	cmp	r1, r2
 80047e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047e8:	d1f9      	bne.n	80047de <memcpy+0xe>
 80047ea:	bd10      	pop	{r4, pc}

080047ec <_Balloc>:
 80047ec:	b570      	push	{r4, r5, r6, lr}
 80047ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80047f0:	4604      	mov	r4, r0
 80047f2:	460d      	mov	r5, r1
 80047f4:	b976      	cbnz	r6, 8004814 <_Balloc+0x28>
 80047f6:	2010      	movs	r0, #16
 80047f8:	f7ff ffd4 	bl	80047a4 <malloc>
 80047fc:	4602      	mov	r2, r0
 80047fe:	6260      	str	r0, [r4, #36]	; 0x24
 8004800:	b920      	cbnz	r0, 800480c <_Balloc+0x20>
 8004802:	2166      	movs	r1, #102	; 0x66
 8004804:	4b17      	ldr	r3, [pc, #92]	; (8004864 <_Balloc+0x78>)
 8004806:	4818      	ldr	r0, [pc, #96]	; (8004868 <_Balloc+0x7c>)
 8004808:	f000 fdce 	bl	80053a8 <__assert_func>
 800480c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004810:	6006      	str	r6, [r0, #0]
 8004812:	60c6      	str	r6, [r0, #12]
 8004814:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004816:	68f3      	ldr	r3, [r6, #12]
 8004818:	b183      	cbz	r3, 800483c <_Balloc+0x50>
 800481a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004822:	b9b8      	cbnz	r0, 8004854 <_Balloc+0x68>
 8004824:	2101      	movs	r1, #1
 8004826:	fa01 f605 	lsl.w	r6, r1, r5
 800482a:	1d72      	adds	r2, r6, #5
 800482c:	4620      	mov	r0, r4
 800482e:	0092      	lsls	r2, r2, #2
 8004830:	f000 fb5e 	bl	8004ef0 <_calloc_r>
 8004834:	b160      	cbz	r0, 8004850 <_Balloc+0x64>
 8004836:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800483a:	e00e      	b.n	800485a <_Balloc+0x6e>
 800483c:	2221      	movs	r2, #33	; 0x21
 800483e:	2104      	movs	r1, #4
 8004840:	4620      	mov	r0, r4
 8004842:	f000 fb55 	bl	8004ef0 <_calloc_r>
 8004846:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004848:	60f0      	str	r0, [r6, #12]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1e4      	bne.n	800481a <_Balloc+0x2e>
 8004850:	2000      	movs	r0, #0
 8004852:	bd70      	pop	{r4, r5, r6, pc}
 8004854:	6802      	ldr	r2, [r0, #0]
 8004856:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800485a:	2300      	movs	r3, #0
 800485c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004860:	e7f7      	b.n	8004852 <_Balloc+0x66>
 8004862:	bf00      	nop
 8004864:	08006011 	.word	0x08006011
 8004868:	08006094 	.word	0x08006094

0800486c <_Bfree>:
 800486c:	b570      	push	{r4, r5, r6, lr}
 800486e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004870:	4605      	mov	r5, r0
 8004872:	460c      	mov	r4, r1
 8004874:	b976      	cbnz	r6, 8004894 <_Bfree+0x28>
 8004876:	2010      	movs	r0, #16
 8004878:	f7ff ff94 	bl	80047a4 <malloc>
 800487c:	4602      	mov	r2, r0
 800487e:	6268      	str	r0, [r5, #36]	; 0x24
 8004880:	b920      	cbnz	r0, 800488c <_Bfree+0x20>
 8004882:	218a      	movs	r1, #138	; 0x8a
 8004884:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <_Bfree+0x3c>)
 8004886:	4809      	ldr	r0, [pc, #36]	; (80048ac <_Bfree+0x40>)
 8004888:	f000 fd8e 	bl	80053a8 <__assert_func>
 800488c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004890:	6006      	str	r6, [r0, #0]
 8004892:	60c6      	str	r6, [r0, #12]
 8004894:	b13c      	cbz	r4, 80048a6 <_Bfree+0x3a>
 8004896:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004898:	6862      	ldr	r2, [r4, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048a0:	6021      	str	r1, [r4, #0]
 80048a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80048a6:	bd70      	pop	{r4, r5, r6, pc}
 80048a8:	08006011 	.word	0x08006011
 80048ac:	08006094 	.word	0x08006094

080048b0 <__multadd>:
 80048b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b4:	4607      	mov	r7, r0
 80048b6:	460c      	mov	r4, r1
 80048b8:	461e      	mov	r6, r3
 80048ba:	2000      	movs	r0, #0
 80048bc:	690d      	ldr	r5, [r1, #16]
 80048be:	f101 0c14 	add.w	ip, r1, #20
 80048c2:	f8dc 3000 	ldr.w	r3, [ip]
 80048c6:	3001      	adds	r0, #1
 80048c8:	b299      	uxth	r1, r3
 80048ca:	fb02 6101 	mla	r1, r2, r1, r6
 80048ce:	0c1e      	lsrs	r6, r3, #16
 80048d0:	0c0b      	lsrs	r3, r1, #16
 80048d2:	fb02 3306 	mla	r3, r2, r6, r3
 80048d6:	b289      	uxth	r1, r1
 80048d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80048dc:	4285      	cmp	r5, r0
 80048de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80048e2:	f84c 1b04 	str.w	r1, [ip], #4
 80048e6:	dcec      	bgt.n	80048c2 <__multadd+0x12>
 80048e8:	b30e      	cbz	r6, 800492e <__multadd+0x7e>
 80048ea:	68a3      	ldr	r3, [r4, #8]
 80048ec:	42ab      	cmp	r3, r5
 80048ee:	dc19      	bgt.n	8004924 <__multadd+0x74>
 80048f0:	6861      	ldr	r1, [r4, #4]
 80048f2:	4638      	mov	r0, r7
 80048f4:	3101      	adds	r1, #1
 80048f6:	f7ff ff79 	bl	80047ec <_Balloc>
 80048fa:	4680      	mov	r8, r0
 80048fc:	b928      	cbnz	r0, 800490a <__multadd+0x5a>
 80048fe:	4602      	mov	r2, r0
 8004900:	21b5      	movs	r1, #181	; 0xb5
 8004902:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <__multadd+0x84>)
 8004904:	480c      	ldr	r0, [pc, #48]	; (8004938 <__multadd+0x88>)
 8004906:	f000 fd4f 	bl	80053a8 <__assert_func>
 800490a:	6922      	ldr	r2, [r4, #16]
 800490c:	f104 010c 	add.w	r1, r4, #12
 8004910:	3202      	adds	r2, #2
 8004912:	0092      	lsls	r2, r2, #2
 8004914:	300c      	adds	r0, #12
 8004916:	f7ff ff5b 	bl	80047d0 <memcpy>
 800491a:	4621      	mov	r1, r4
 800491c:	4638      	mov	r0, r7
 800491e:	f7ff ffa5 	bl	800486c <_Bfree>
 8004922:	4644      	mov	r4, r8
 8004924:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004928:	3501      	adds	r5, #1
 800492a:	615e      	str	r6, [r3, #20]
 800492c:	6125      	str	r5, [r4, #16]
 800492e:	4620      	mov	r0, r4
 8004930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004934:	08006083 	.word	0x08006083
 8004938:	08006094 	.word	0x08006094

0800493c <__hi0bits>:
 800493c:	0c02      	lsrs	r2, r0, #16
 800493e:	0412      	lsls	r2, r2, #16
 8004940:	4603      	mov	r3, r0
 8004942:	b9ca      	cbnz	r2, 8004978 <__hi0bits+0x3c>
 8004944:	0403      	lsls	r3, r0, #16
 8004946:	2010      	movs	r0, #16
 8004948:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800494c:	bf04      	itt	eq
 800494e:	021b      	lsleq	r3, r3, #8
 8004950:	3008      	addeq	r0, #8
 8004952:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004956:	bf04      	itt	eq
 8004958:	011b      	lsleq	r3, r3, #4
 800495a:	3004      	addeq	r0, #4
 800495c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004960:	bf04      	itt	eq
 8004962:	009b      	lsleq	r3, r3, #2
 8004964:	3002      	addeq	r0, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	db05      	blt.n	8004976 <__hi0bits+0x3a>
 800496a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800496e:	f100 0001 	add.w	r0, r0, #1
 8004972:	bf08      	it	eq
 8004974:	2020      	moveq	r0, #32
 8004976:	4770      	bx	lr
 8004978:	2000      	movs	r0, #0
 800497a:	e7e5      	b.n	8004948 <__hi0bits+0xc>

0800497c <__lo0bits>:
 800497c:	6803      	ldr	r3, [r0, #0]
 800497e:	4602      	mov	r2, r0
 8004980:	f013 0007 	ands.w	r0, r3, #7
 8004984:	d00b      	beq.n	800499e <__lo0bits+0x22>
 8004986:	07d9      	lsls	r1, r3, #31
 8004988:	d421      	bmi.n	80049ce <__lo0bits+0x52>
 800498a:	0798      	lsls	r0, r3, #30
 800498c:	bf49      	itett	mi
 800498e:	085b      	lsrmi	r3, r3, #1
 8004990:	089b      	lsrpl	r3, r3, #2
 8004992:	2001      	movmi	r0, #1
 8004994:	6013      	strmi	r3, [r2, #0]
 8004996:	bf5c      	itt	pl
 8004998:	2002      	movpl	r0, #2
 800499a:	6013      	strpl	r3, [r2, #0]
 800499c:	4770      	bx	lr
 800499e:	b299      	uxth	r1, r3
 80049a0:	b909      	cbnz	r1, 80049a6 <__lo0bits+0x2a>
 80049a2:	2010      	movs	r0, #16
 80049a4:	0c1b      	lsrs	r3, r3, #16
 80049a6:	b2d9      	uxtb	r1, r3
 80049a8:	b909      	cbnz	r1, 80049ae <__lo0bits+0x32>
 80049aa:	3008      	adds	r0, #8
 80049ac:	0a1b      	lsrs	r3, r3, #8
 80049ae:	0719      	lsls	r1, r3, #28
 80049b0:	bf04      	itt	eq
 80049b2:	091b      	lsreq	r3, r3, #4
 80049b4:	3004      	addeq	r0, #4
 80049b6:	0799      	lsls	r1, r3, #30
 80049b8:	bf04      	itt	eq
 80049ba:	089b      	lsreq	r3, r3, #2
 80049bc:	3002      	addeq	r0, #2
 80049be:	07d9      	lsls	r1, r3, #31
 80049c0:	d403      	bmi.n	80049ca <__lo0bits+0x4e>
 80049c2:	085b      	lsrs	r3, r3, #1
 80049c4:	f100 0001 	add.w	r0, r0, #1
 80049c8:	d003      	beq.n	80049d2 <__lo0bits+0x56>
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	4770      	bx	lr
 80049ce:	2000      	movs	r0, #0
 80049d0:	4770      	bx	lr
 80049d2:	2020      	movs	r0, #32
 80049d4:	4770      	bx	lr
	...

080049d8 <__i2b>:
 80049d8:	b510      	push	{r4, lr}
 80049da:	460c      	mov	r4, r1
 80049dc:	2101      	movs	r1, #1
 80049de:	f7ff ff05 	bl	80047ec <_Balloc>
 80049e2:	4602      	mov	r2, r0
 80049e4:	b928      	cbnz	r0, 80049f2 <__i2b+0x1a>
 80049e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80049ea:	4b04      	ldr	r3, [pc, #16]	; (80049fc <__i2b+0x24>)
 80049ec:	4804      	ldr	r0, [pc, #16]	; (8004a00 <__i2b+0x28>)
 80049ee:	f000 fcdb 	bl	80053a8 <__assert_func>
 80049f2:	2301      	movs	r3, #1
 80049f4:	6144      	str	r4, [r0, #20]
 80049f6:	6103      	str	r3, [r0, #16]
 80049f8:	bd10      	pop	{r4, pc}
 80049fa:	bf00      	nop
 80049fc:	08006083 	.word	0x08006083
 8004a00:	08006094 	.word	0x08006094

08004a04 <__multiply>:
 8004a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a08:	4691      	mov	r9, r2
 8004a0a:	690a      	ldr	r2, [r1, #16]
 8004a0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004a10:	460c      	mov	r4, r1
 8004a12:	429a      	cmp	r2, r3
 8004a14:	bfbe      	ittt	lt
 8004a16:	460b      	movlt	r3, r1
 8004a18:	464c      	movlt	r4, r9
 8004a1a:	4699      	movlt	r9, r3
 8004a1c:	6927      	ldr	r7, [r4, #16]
 8004a1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004a22:	68a3      	ldr	r3, [r4, #8]
 8004a24:	6861      	ldr	r1, [r4, #4]
 8004a26:	eb07 060a 	add.w	r6, r7, sl
 8004a2a:	42b3      	cmp	r3, r6
 8004a2c:	b085      	sub	sp, #20
 8004a2e:	bfb8      	it	lt
 8004a30:	3101      	addlt	r1, #1
 8004a32:	f7ff fedb 	bl	80047ec <_Balloc>
 8004a36:	b930      	cbnz	r0, 8004a46 <__multiply+0x42>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	f240 115d 	movw	r1, #349	; 0x15d
 8004a3e:	4b43      	ldr	r3, [pc, #268]	; (8004b4c <__multiply+0x148>)
 8004a40:	4843      	ldr	r0, [pc, #268]	; (8004b50 <__multiply+0x14c>)
 8004a42:	f000 fcb1 	bl	80053a8 <__assert_func>
 8004a46:	f100 0514 	add.w	r5, r0, #20
 8004a4a:	462b      	mov	r3, r5
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004a52:	4543      	cmp	r3, r8
 8004a54:	d321      	bcc.n	8004a9a <__multiply+0x96>
 8004a56:	f104 0314 	add.w	r3, r4, #20
 8004a5a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004a5e:	f109 0314 	add.w	r3, r9, #20
 8004a62:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004a66:	9202      	str	r2, [sp, #8]
 8004a68:	1b3a      	subs	r2, r7, r4
 8004a6a:	3a15      	subs	r2, #21
 8004a6c:	f022 0203 	bic.w	r2, r2, #3
 8004a70:	3204      	adds	r2, #4
 8004a72:	f104 0115 	add.w	r1, r4, #21
 8004a76:	428f      	cmp	r7, r1
 8004a78:	bf38      	it	cc
 8004a7a:	2204      	movcc	r2, #4
 8004a7c:	9201      	str	r2, [sp, #4]
 8004a7e:	9a02      	ldr	r2, [sp, #8]
 8004a80:	9303      	str	r3, [sp, #12]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d80c      	bhi.n	8004aa0 <__multiply+0x9c>
 8004a86:	2e00      	cmp	r6, #0
 8004a88:	dd03      	ble.n	8004a92 <__multiply+0x8e>
 8004a8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d059      	beq.n	8004b46 <__multiply+0x142>
 8004a92:	6106      	str	r6, [r0, #16]
 8004a94:	b005      	add	sp, #20
 8004a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9a:	f843 2b04 	str.w	r2, [r3], #4
 8004a9e:	e7d8      	b.n	8004a52 <__multiply+0x4e>
 8004aa0:	f8b3 a000 	ldrh.w	sl, [r3]
 8004aa4:	f1ba 0f00 	cmp.w	sl, #0
 8004aa8:	d023      	beq.n	8004af2 <__multiply+0xee>
 8004aaa:	46a9      	mov	r9, r5
 8004aac:	f04f 0c00 	mov.w	ip, #0
 8004ab0:	f104 0e14 	add.w	lr, r4, #20
 8004ab4:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004ab8:	f8d9 1000 	ldr.w	r1, [r9]
 8004abc:	fa1f fb82 	uxth.w	fp, r2
 8004ac0:	b289      	uxth	r1, r1
 8004ac2:	fb0a 110b 	mla	r1, sl, fp, r1
 8004ac6:	4461      	add	r1, ip
 8004ac8:	f8d9 c000 	ldr.w	ip, [r9]
 8004acc:	0c12      	lsrs	r2, r2, #16
 8004ace:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004ad2:	fb0a c202 	mla	r2, sl, r2, ip
 8004ad6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004ada:	b289      	uxth	r1, r1
 8004adc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ae0:	4577      	cmp	r7, lr
 8004ae2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004ae6:	f849 1b04 	str.w	r1, [r9], #4
 8004aea:	d8e3      	bhi.n	8004ab4 <__multiply+0xb0>
 8004aec:	9a01      	ldr	r2, [sp, #4]
 8004aee:	f845 c002 	str.w	ip, [r5, r2]
 8004af2:	9a03      	ldr	r2, [sp, #12]
 8004af4:	3304      	adds	r3, #4
 8004af6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004afa:	f1b9 0f00 	cmp.w	r9, #0
 8004afe:	d020      	beq.n	8004b42 <__multiply+0x13e>
 8004b00:	46ae      	mov	lr, r5
 8004b02:	f04f 0a00 	mov.w	sl, #0
 8004b06:	6829      	ldr	r1, [r5, #0]
 8004b08:	f104 0c14 	add.w	ip, r4, #20
 8004b0c:	f8bc b000 	ldrh.w	fp, [ip]
 8004b10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004b14:	b289      	uxth	r1, r1
 8004b16:	fb09 220b 	mla	r2, r9, fp, r2
 8004b1a:	4492      	add	sl, r2
 8004b1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004b20:	f84e 1b04 	str.w	r1, [lr], #4
 8004b24:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004b28:	f8be 1000 	ldrh.w	r1, [lr]
 8004b2c:	0c12      	lsrs	r2, r2, #16
 8004b2e:	fb09 1102 	mla	r1, r9, r2, r1
 8004b32:	4567      	cmp	r7, ip
 8004b34:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004b38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004b3c:	d8e6      	bhi.n	8004b0c <__multiply+0x108>
 8004b3e:	9a01      	ldr	r2, [sp, #4]
 8004b40:	50a9      	str	r1, [r5, r2]
 8004b42:	3504      	adds	r5, #4
 8004b44:	e79b      	b.n	8004a7e <__multiply+0x7a>
 8004b46:	3e01      	subs	r6, #1
 8004b48:	e79d      	b.n	8004a86 <__multiply+0x82>
 8004b4a:	bf00      	nop
 8004b4c:	08006083 	.word	0x08006083
 8004b50:	08006094 	.word	0x08006094

08004b54 <__pow5mult>:
 8004b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b58:	4615      	mov	r5, r2
 8004b5a:	f012 0203 	ands.w	r2, r2, #3
 8004b5e:	4606      	mov	r6, r0
 8004b60:	460f      	mov	r7, r1
 8004b62:	d007      	beq.n	8004b74 <__pow5mult+0x20>
 8004b64:	4c25      	ldr	r4, [pc, #148]	; (8004bfc <__pow5mult+0xa8>)
 8004b66:	3a01      	subs	r2, #1
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b6e:	f7ff fe9f 	bl	80048b0 <__multadd>
 8004b72:	4607      	mov	r7, r0
 8004b74:	10ad      	asrs	r5, r5, #2
 8004b76:	d03d      	beq.n	8004bf4 <__pow5mult+0xa0>
 8004b78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004b7a:	b97c      	cbnz	r4, 8004b9c <__pow5mult+0x48>
 8004b7c:	2010      	movs	r0, #16
 8004b7e:	f7ff fe11 	bl	80047a4 <malloc>
 8004b82:	4602      	mov	r2, r0
 8004b84:	6270      	str	r0, [r6, #36]	; 0x24
 8004b86:	b928      	cbnz	r0, 8004b94 <__pow5mult+0x40>
 8004b88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004b8c:	4b1c      	ldr	r3, [pc, #112]	; (8004c00 <__pow5mult+0xac>)
 8004b8e:	481d      	ldr	r0, [pc, #116]	; (8004c04 <__pow5mult+0xb0>)
 8004b90:	f000 fc0a 	bl	80053a8 <__assert_func>
 8004b94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b98:	6004      	str	r4, [r0, #0]
 8004b9a:	60c4      	str	r4, [r0, #12]
 8004b9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004ba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004ba4:	b94c      	cbnz	r4, 8004bba <__pow5mult+0x66>
 8004ba6:	f240 2171 	movw	r1, #625	; 0x271
 8004baa:	4630      	mov	r0, r6
 8004bac:	f7ff ff14 	bl	80049d8 <__i2b>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	4604      	mov	r4, r0
 8004bb4:	f8c8 0008 	str.w	r0, [r8, #8]
 8004bb8:	6003      	str	r3, [r0, #0]
 8004bba:	f04f 0900 	mov.w	r9, #0
 8004bbe:	07eb      	lsls	r3, r5, #31
 8004bc0:	d50a      	bpl.n	8004bd8 <__pow5mult+0x84>
 8004bc2:	4639      	mov	r1, r7
 8004bc4:	4622      	mov	r2, r4
 8004bc6:	4630      	mov	r0, r6
 8004bc8:	f7ff ff1c 	bl	8004a04 <__multiply>
 8004bcc:	4680      	mov	r8, r0
 8004bce:	4639      	mov	r1, r7
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	f7ff fe4b 	bl	800486c <_Bfree>
 8004bd6:	4647      	mov	r7, r8
 8004bd8:	106d      	asrs	r5, r5, #1
 8004bda:	d00b      	beq.n	8004bf4 <__pow5mult+0xa0>
 8004bdc:	6820      	ldr	r0, [r4, #0]
 8004bde:	b938      	cbnz	r0, 8004bf0 <__pow5mult+0x9c>
 8004be0:	4622      	mov	r2, r4
 8004be2:	4621      	mov	r1, r4
 8004be4:	4630      	mov	r0, r6
 8004be6:	f7ff ff0d 	bl	8004a04 <__multiply>
 8004bea:	6020      	str	r0, [r4, #0]
 8004bec:	f8c0 9000 	str.w	r9, [r0]
 8004bf0:	4604      	mov	r4, r0
 8004bf2:	e7e4      	b.n	8004bbe <__pow5mult+0x6a>
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bfa:	bf00      	nop
 8004bfc:	080061e0 	.word	0x080061e0
 8004c00:	08006011 	.word	0x08006011
 8004c04:	08006094 	.word	0x08006094

08004c08 <__lshift>:
 8004c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	4607      	mov	r7, r0
 8004c10:	4691      	mov	r9, r2
 8004c12:	6923      	ldr	r3, [r4, #16]
 8004c14:	6849      	ldr	r1, [r1, #4]
 8004c16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004c1a:	68a3      	ldr	r3, [r4, #8]
 8004c1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004c20:	f108 0601 	add.w	r6, r8, #1
 8004c24:	42b3      	cmp	r3, r6
 8004c26:	db0b      	blt.n	8004c40 <__lshift+0x38>
 8004c28:	4638      	mov	r0, r7
 8004c2a:	f7ff fddf 	bl	80047ec <_Balloc>
 8004c2e:	4605      	mov	r5, r0
 8004c30:	b948      	cbnz	r0, 8004c46 <__lshift+0x3e>
 8004c32:	4602      	mov	r2, r0
 8004c34:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004c38:	4b29      	ldr	r3, [pc, #164]	; (8004ce0 <__lshift+0xd8>)
 8004c3a:	482a      	ldr	r0, [pc, #168]	; (8004ce4 <__lshift+0xdc>)
 8004c3c:	f000 fbb4 	bl	80053a8 <__assert_func>
 8004c40:	3101      	adds	r1, #1
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	e7ee      	b.n	8004c24 <__lshift+0x1c>
 8004c46:	2300      	movs	r3, #0
 8004c48:	f100 0114 	add.w	r1, r0, #20
 8004c4c:	f100 0210 	add.w	r2, r0, #16
 8004c50:	4618      	mov	r0, r3
 8004c52:	4553      	cmp	r3, sl
 8004c54:	db37      	blt.n	8004cc6 <__lshift+0xbe>
 8004c56:	6920      	ldr	r0, [r4, #16]
 8004c58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004c5c:	f104 0314 	add.w	r3, r4, #20
 8004c60:	f019 091f 	ands.w	r9, r9, #31
 8004c64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004c68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004c6c:	d02f      	beq.n	8004cce <__lshift+0xc6>
 8004c6e:	468a      	mov	sl, r1
 8004c70:	f04f 0c00 	mov.w	ip, #0
 8004c74:	f1c9 0e20 	rsb	lr, r9, #32
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	fa02 f209 	lsl.w	r2, r2, r9
 8004c7e:	ea42 020c 	orr.w	r2, r2, ip
 8004c82:	f84a 2b04 	str.w	r2, [sl], #4
 8004c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c8a:	4298      	cmp	r0, r3
 8004c8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004c90:	d8f2      	bhi.n	8004c78 <__lshift+0x70>
 8004c92:	1b03      	subs	r3, r0, r4
 8004c94:	3b15      	subs	r3, #21
 8004c96:	f023 0303 	bic.w	r3, r3, #3
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	f104 0215 	add.w	r2, r4, #21
 8004ca0:	4290      	cmp	r0, r2
 8004ca2:	bf38      	it	cc
 8004ca4:	2304      	movcc	r3, #4
 8004ca6:	f841 c003 	str.w	ip, [r1, r3]
 8004caa:	f1bc 0f00 	cmp.w	ip, #0
 8004cae:	d001      	beq.n	8004cb4 <__lshift+0xac>
 8004cb0:	f108 0602 	add.w	r6, r8, #2
 8004cb4:	3e01      	subs	r6, #1
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	4621      	mov	r1, r4
 8004cba:	612e      	str	r6, [r5, #16]
 8004cbc:	f7ff fdd6 	bl	800486c <_Bfree>
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8004cca:	3301      	adds	r3, #1
 8004ccc:	e7c1      	b.n	8004c52 <__lshift+0x4a>
 8004cce:	3904      	subs	r1, #4
 8004cd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004cd4:	4298      	cmp	r0, r3
 8004cd6:	f841 2f04 	str.w	r2, [r1, #4]!
 8004cda:	d8f9      	bhi.n	8004cd0 <__lshift+0xc8>
 8004cdc:	e7ea      	b.n	8004cb4 <__lshift+0xac>
 8004cde:	bf00      	nop
 8004ce0:	08006083 	.word	0x08006083
 8004ce4:	08006094 	.word	0x08006094

08004ce8 <__mcmp>:
 8004ce8:	4603      	mov	r3, r0
 8004cea:	690a      	ldr	r2, [r1, #16]
 8004cec:	6900      	ldr	r0, [r0, #16]
 8004cee:	b530      	push	{r4, r5, lr}
 8004cf0:	1a80      	subs	r0, r0, r2
 8004cf2:	d10d      	bne.n	8004d10 <__mcmp+0x28>
 8004cf4:	3314      	adds	r3, #20
 8004cf6:	3114      	adds	r1, #20
 8004cf8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004cfc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004d00:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004d04:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004d08:	4295      	cmp	r5, r2
 8004d0a:	d002      	beq.n	8004d12 <__mcmp+0x2a>
 8004d0c:	d304      	bcc.n	8004d18 <__mcmp+0x30>
 8004d0e:	2001      	movs	r0, #1
 8004d10:	bd30      	pop	{r4, r5, pc}
 8004d12:	42a3      	cmp	r3, r4
 8004d14:	d3f4      	bcc.n	8004d00 <__mcmp+0x18>
 8004d16:	e7fb      	b.n	8004d10 <__mcmp+0x28>
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	e7f8      	b.n	8004d10 <__mcmp+0x28>
	...

08004d20 <__mdiff>:
 8004d20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d24:	460d      	mov	r5, r1
 8004d26:	4607      	mov	r7, r0
 8004d28:	4611      	mov	r1, r2
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	4614      	mov	r4, r2
 8004d2e:	f7ff ffdb 	bl	8004ce8 <__mcmp>
 8004d32:	1e06      	subs	r6, r0, #0
 8004d34:	d111      	bne.n	8004d5a <__mdiff+0x3a>
 8004d36:	4631      	mov	r1, r6
 8004d38:	4638      	mov	r0, r7
 8004d3a:	f7ff fd57 	bl	80047ec <_Balloc>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	b928      	cbnz	r0, 8004d4e <__mdiff+0x2e>
 8004d42:	f240 2132 	movw	r1, #562	; 0x232
 8004d46:	4b3a      	ldr	r3, [pc, #232]	; (8004e30 <__mdiff+0x110>)
 8004d48:	483a      	ldr	r0, [pc, #232]	; (8004e34 <__mdiff+0x114>)
 8004d4a:	f000 fb2d 	bl	80053a8 <__assert_func>
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004d54:	4610      	mov	r0, r2
 8004d56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d5a:	bfa4      	itt	ge
 8004d5c:	4623      	movge	r3, r4
 8004d5e:	462c      	movge	r4, r5
 8004d60:	4638      	mov	r0, r7
 8004d62:	6861      	ldr	r1, [r4, #4]
 8004d64:	bfa6      	itte	ge
 8004d66:	461d      	movge	r5, r3
 8004d68:	2600      	movge	r6, #0
 8004d6a:	2601      	movlt	r6, #1
 8004d6c:	f7ff fd3e 	bl	80047ec <_Balloc>
 8004d70:	4602      	mov	r2, r0
 8004d72:	b918      	cbnz	r0, 8004d7c <__mdiff+0x5c>
 8004d74:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004d78:	4b2d      	ldr	r3, [pc, #180]	; (8004e30 <__mdiff+0x110>)
 8004d7a:	e7e5      	b.n	8004d48 <__mdiff+0x28>
 8004d7c:	f102 0814 	add.w	r8, r2, #20
 8004d80:	46c2      	mov	sl, r8
 8004d82:	f04f 0c00 	mov.w	ip, #0
 8004d86:	6927      	ldr	r7, [r4, #16]
 8004d88:	60c6      	str	r6, [r0, #12]
 8004d8a:	692e      	ldr	r6, [r5, #16]
 8004d8c:	f104 0014 	add.w	r0, r4, #20
 8004d90:	f105 0914 	add.w	r9, r5, #20
 8004d94:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8004d98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004d9c:	3410      	adds	r4, #16
 8004d9e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8004da2:	f859 3b04 	ldr.w	r3, [r9], #4
 8004da6:	fa1f f18b 	uxth.w	r1, fp
 8004daa:	448c      	add	ip, r1
 8004dac:	b299      	uxth	r1, r3
 8004dae:	0c1b      	lsrs	r3, r3, #16
 8004db0:	ebac 0101 	sub.w	r1, ip, r1
 8004db4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004db8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004dbc:	b289      	uxth	r1, r1
 8004dbe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004dc2:	454e      	cmp	r6, r9
 8004dc4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004dc8:	f84a 3b04 	str.w	r3, [sl], #4
 8004dcc:	d8e7      	bhi.n	8004d9e <__mdiff+0x7e>
 8004dce:	1b73      	subs	r3, r6, r5
 8004dd0:	3b15      	subs	r3, #21
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	3515      	adds	r5, #21
 8004dd8:	3304      	adds	r3, #4
 8004dda:	42ae      	cmp	r6, r5
 8004ddc:	bf38      	it	cc
 8004dde:	2304      	movcc	r3, #4
 8004de0:	4418      	add	r0, r3
 8004de2:	4443      	add	r3, r8
 8004de4:	461e      	mov	r6, r3
 8004de6:	4605      	mov	r5, r0
 8004de8:	4575      	cmp	r5, lr
 8004dea:	d30e      	bcc.n	8004e0a <__mdiff+0xea>
 8004dec:	f10e 0103 	add.w	r1, lr, #3
 8004df0:	1a09      	subs	r1, r1, r0
 8004df2:	f021 0103 	bic.w	r1, r1, #3
 8004df6:	3803      	subs	r0, #3
 8004df8:	4586      	cmp	lr, r0
 8004dfa:	bf38      	it	cc
 8004dfc:	2100      	movcc	r1, #0
 8004dfe:	4419      	add	r1, r3
 8004e00:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004e04:	b18b      	cbz	r3, 8004e2a <__mdiff+0x10a>
 8004e06:	6117      	str	r7, [r2, #16]
 8004e08:	e7a4      	b.n	8004d54 <__mdiff+0x34>
 8004e0a:	f855 8b04 	ldr.w	r8, [r5], #4
 8004e0e:	fa1f f188 	uxth.w	r1, r8
 8004e12:	4461      	add	r1, ip
 8004e14:	140c      	asrs	r4, r1, #16
 8004e16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8004e1a:	b289      	uxth	r1, r1
 8004e1c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8004e20:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004e24:	f846 1b04 	str.w	r1, [r6], #4
 8004e28:	e7de      	b.n	8004de8 <__mdiff+0xc8>
 8004e2a:	3f01      	subs	r7, #1
 8004e2c:	e7e8      	b.n	8004e00 <__mdiff+0xe0>
 8004e2e:	bf00      	nop
 8004e30:	08006083 	.word	0x08006083
 8004e34:	08006094 	.word	0x08006094

08004e38 <__d2b>:
 8004e38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8004e42:	4690      	mov	r8, r2
 8004e44:	461d      	mov	r5, r3
 8004e46:	f7ff fcd1 	bl	80047ec <_Balloc>
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	b930      	cbnz	r0, 8004e5c <__d2b+0x24>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	f240 310a 	movw	r1, #778	; 0x30a
 8004e54:	4b24      	ldr	r3, [pc, #144]	; (8004ee8 <__d2b+0xb0>)
 8004e56:	4825      	ldr	r0, [pc, #148]	; (8004eec <__d2b+0xb4>)
 8004e58:	f000 faa6 	bl	80053a8 <__assert_func>
 8004e5c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004e60:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8004e64:	bb2d      	cbnz	r5, 8004eb2 <__d2b+0x7a>
 8004e66:	9301      	str	r3, [sp, #4]
 8004e68:	f1b8 0300 	subs.w	r3, r8, #0
 8004e6c:	d026      	beq.n	8004ebc <__d2b+0x84>
 8004e6e:	4668      	mov	r0, sp
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	f7ff fd83 	bl	800497c <__lo0bits>
 8004e76:	9900      	ldr	r1, [sp, #0]
 8004e78:	b1f0      	cbz	r0, 8004eb8 <__d2b+0x80>
 8004e7a:	9a01      	ldr	r2, [sp, #4]
 8004e7c:	f1c0 0320 	rsb	r3, r0, #32
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	430b      	orrs	r3, r1
 8004e86:	40c2      	lsrs	r2, r0
 8004e88:	6163      	str	r3, [r4, #20]
 8004e8a:	9201      	str	r2, [sp, #4]
 8004e8c:	9b01      	ldr	r3, [sp, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	bf14      	ite	ne
 8004e92:	2102      	movne	r1, #2
 8004e94:	2101      	moveq	r1, #1
 8004e96:	61a3      	str	r3, [r4, #24]
 8004e98:	6121      	str	r1, [r4, #16]
 8004e9a:	b1c5      	cbz	r5, 8004ece <__d2b+0x96>
 8004e9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004ea0:	4405      	add	r5, r0
 8004ea2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004ea6:	603d      	str	r5, [r7, #0]
 8004ea8:	6030      	str	r0, [r6, #0]
 8004eaa:	4620      	mov	r0, r4
 8004eac:	b002      	add	sp, #8
 8004eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eb6:	e7d6      	b.n	8004e66 <__d2b+0x2e>
 8004eb8:	6161      	str	r1, [r4, #20]
 8004eba:	e7e7      	b.n	8004e8c <__d2b+0x54>
 8004ebc:	a801      	add	r0, sp, #4
 8004ebe:	f7ff fd5d 	bl	800497c <__lo0bits>
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	9b01      	ldr	r3, [sp, #4]
 8004ec6:	6121      	str	r1, [r4, #16]
 8004ec8:	6163      	str	r3, [r4, #20]
 8004eca:	3020      	adds	r0, #32
 8004ecc:	e7e5      	b.n	8004e9a <__d2b+0x62>
 8004ece:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8004ed2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004ed6:	6038      	str	r0, [r7, #0]
 8004ed8:	6918      	ldr	r0, [r3, #16]
 8004eda:	f7ff fd2f 	bl	800493c <__hi0bits>
 8004ede:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8004ee2:	6031      	str	r1, [r6, #0]
 8004ee4:	e7e1      	b.n	8004eaa <__d2b+0x72>
 8004ee6:	bf00      	nop
 8004ee8:	08006083 	.word	0x08006083
 8004eec:	08006094 	.word	0x08006094

08004ef0 <_calloc_r>:
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	fba1 5402 	umull	r5, r4, r1, r2
 8004ef6:	b934      	cbnz	r4, 8004f06 <_calloc_r+0x16>
 8004ef8:	4629      	mov	r1, r5
 8004efa:	f000 f875 	bl	8004fe8 <_malloc_r>
 8004efe:	4606      	mov	r6, r0
 8004f00:	b928      	cbnz	r0, 8004f0e <_calloc_r+0x1e>
 8004f02:	4630      	mov	r0, r6
 8004f04:	bd70      	pop	{r4, r5, r6, pc}
 8004f06:	220c      	movs	r2, #12
 8004f08:	2600      	movs	r6, #0
 8004f0a:	6002      	str	r2, [r0, #0]
 8004f0c:	e7f9      	b.n	8004f02 <_calloc_r+0x12>
 8004f0e:	462a      	mov	r2, r5
 8004f10:	4621      	mov	r1, r4
 8004f12:	f7fe f92b 	bl	800316c <memset>
 8004f16:	e7f4      	b.n	8004f02 <_calloc_r+0x12>

08004f18 <_free_r>:
 8004f18:	b538      	push	{r3, r4, r5, lr}
 8004f1a:	4605      	mov	r5, r0
 8004f1c:	2900      	cmp	r1, #0
 8004f1e:	d040      	beq.n	8004fa2 <_free_r+0x8a>
 8004f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f24:	1f0c      	subs	r4, r1, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	bfb8      	it	lt
 8004f2a:	18e4      	addlt	r4, r4, r3
 8004f2c:	f000 fa98 	bl	8005460 <__malloc_lock>
 8004f30:	4a1c      	ldr	r2, [pc, #112]	; (8004fa4 <_free_r+0x8c>)
 8004f32:	6813      	ldr	r3, [r2, #0]
 8004f34:	b933      	cbnz	r3, 8004f44 <_free_r+0x2c>
 8004f36:	6063      	str	r3, [r4, #4]
 8004f38:	6014      	str	r4, [r2, #0]
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f40:	f000 ba94 	b.w	800546c <__malloc_unlock>
 8004f44:	42a3      	cmp	r3, r4
 8004f46:	d908      	bls.n	8004f5a <_free_r+0x42>
 8004f48:	6820      	ldr	r0, [r4, #0]
 8004f4a:	1821      	adds	r1, r4, r0
 8004f4c:	428b      	cmp	r3, r1
 8004f4e:	bf01      	itttt	eq
 8004f50:	6819      	ldreq	r1, [r3, #0]
 8004f52:	685b      	ldreq	r3, [r3, #4]
 8004f54:	1809      	addeq	r1, r1, r0
 8004f56:	6021      	streq	r1, [r4, #0]
 8004f58:	e7ed      	b.n	8004f36 <_free_r+0x1e>
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	b10b      	cbz	r3, 8004f64 <_free_r+0x4c>
 8004f60:	42a3      	cmp	r3, r4
 8004f62:	d9fa      	bls.n	8004f5a <_free_r+0x42>
 8004f64:	6811      	ldr	r1, [r2, #0]
 8004f66:	1850      	adds	r0, r2, r1
 8004f68:	42a0      	cmp	r0, r4
 8004f6a:	d10b      	bne.n	8004f84 <_free_r+0x6c>
 8004f6c:	6820      	ldr	r0, [r4, #0]
 8004f6e:	4401      	add	r1, r0
 8004f70:	1850      	adds	r0, r2, r1
 8004f72:	4283      	cmp	r3, r0
 8004f74:	6011      	str	r1, [r2, #0]
 8004f76:	d1e0      	bne.n	8004f3a <_free_r+0x22>
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	4401      	add	r1, r0
 8004f7e:	6011      	str	r1, [r2, #0]
 8004f80:	6053      	str	r3, [r2, #4]
 8004f82:	e7da      	b.n	8004f3a <_free_r+0x22>
 8004f84:	d902      	bls.n	8004f8c <_free_r+0x74>
 8004f86:	230c      	movs	r3, #12
 8004f88:	602b      	str	r3, [r5, #0]
 8004f8a:	e7d6      	b.n	8004f3a <_free_r+0x22>
 8004f8c:	6820      	ldr	r0, [r4, #0]
 8004f8e:	1821      	adds	r1, r4, r0
 8004f90:	428b      	cmp	r3, r1
 8004f92:	bf01      	itttt	eq
 8004f94:	6819      	ldreq	r1, [r3, #0]
 8004f96:	685b      	ldreq	r3, [r3, #4]
 8004f98:	1809      	addeq	r1, r1, r0
 8004f9a:	6021      	streq	r1, [r4, #0]
 8004f9c:	6063      	str	r3, [r4, #4]
 8004f9e:	6054      	str	r4, [r2, #4]
 8004fa0:	e7cb      	b.n	8004f3a <_free_r+0x22>
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	20000234 	.word	0x20000234

08004fa8 <sbrk_aligned>:
 8004fa8:	b570      	push	{r4, r5, r6, lr}
 8004faa:	4e0e      	ldr	r6, [pc, #56]	; (8004fe4 <sbrk_aligned+0x3c>)
 8004fac:	460c      	mov	r4, r1
 8004fae:	6831      	ldr	r1, [r6, #0]
 8004fb0:	4605      	mov	r5, r0
 8004fb2:	b911      	cbnz	r1, 8004fba <sbrk_aligned+0x12>
 8004fb4:	f000 f9e8 	bl	8005388 <_sbrk_r>
 8004fb8:	6030      	str	r0, [r6, #0]
 8004fba:	4621      	mov	r1, r4
 8004fbc:	4628      	mov	r0, r5
 8004fbe:	f000 f9e3 	bl	8005388 <_sbrk_r>
 8004fc2:	1c43      	adds	r3, r0, #1
 8004fc4:	d00a      	beq.n	8004fdc <sbrk_aligned+0x34>
 8004fc6:	1cc4      	adds	r4, r0, #3
 8004fc8:	f024 0403 	bic.w	r4, r4, #3
 8004fcc:	42a0      	cmp	r0, r4
 8004fce:	d007      	beq.n	8004fe0 <sbrk_aligned+0x38>
 8004fd0:	1a21      	subs	r1, r4, r0
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	f000 f9d8 	bl	8005388 <_sbrk_r>
 8004fd8:	3001      	adds	r0, #1
 8004fda:	d101      	bne.n	8004fe0 <sbrk_aligned+0x38>
 8004fdc:	f04f 34ff 	mov.w	r4, #4294967295
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	bd70      	pop	{r4, r5, r6, pc}
 8004fe4:	20000238 	.word	0x20000238

08004fe8 <_malloc_r>:
 8004fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fec:	1ccd      	adds	r5, r1, #3
 8004fee:	f025 0503 	bic.w	r5, r5, #3
 8004ff2:	3508      	adds	r5, #8
 8004ff4:	2d0c      	cmp	r5, #12
 8004ff6:	bf38      	it	cc
 8004ff8:	250c      	movcc	r5, #12
 8004ffa:	2d00      	cmp	r5, #0
 8004ffc:	4607      	mov	r7, r0
 8004ffe:	db01      	blt.n	8005004 <_malloc_r+0x1c>
 8005000:	42a9      	cmp	r1, r5
 8005002:	d905      	bls.n	8005010 <_malloc_r+0x28>
 8005004:	230c      	movs	r3, #12
 8005006:	2600      	movs	r6, #0
 8005008:	603b      	str	r3, [r7, #0]
 800500a:	4630      	mov	r0, r6
 800500c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005010:	4e2e      	ldr	r6, [pc, #184]	; (80050cc <_malloc_r+0xe4>)
 8005012:	f000 fa25 	bl	8005460 <__malloc_lock>
 8005016:	6833      	ldr	r3, [r6, #0]
 8005018:	461c      	mov	r4, r3
 800501a:	bb34      	cbnz	r4, 800506a <_malloc_r+0x82>
 800501c:	4629      	mov	r1, r5
 800501e:	4638      	mov	r0, r7
 8005020:	f7ff ffc2 	bl	8004fa8 <sbrk_aligned>
 8005024:	1c43      	adds	r3, r0, #1
 8005026:	4604      	mov	r4, r0
 8005028:	d14d      	bne.n	80050c6 <_malloc_r+0xde>
 800502a:	6834      	ldr	r4, [r6, #0]
 800502c:	4626      	mov	r6, r4
 800502e:	2e00      	cmp	r6, #0
 8005030:	d140      	bne.n	80050b4 <_malloc_r+0xcc>
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	4631      	mov	r1, r6
 8005036:	4638      	mov	r0, r7
 8005038:	eb04 0803 	add.w	r8, r4, r3
 800503c:	f000 f9a4 	bl	8005388 <_sbrk_r>
 8005040:	4580      	cmp	r8, r0
 8005042:	d13a      	bne.n	80050ba <_malloc_r+0xd2>
 8005044:	6821      	ldr	r1, [r4, #0]
 8005046:	3503      	adds	r5, #3
 8005048:	1a6d      	subs	r5, r5, r1
 800504a:	f025 0503 	bic.w	r5, r5, #3
 800504e:	3508      	adds	r5, #8
 8005050:	2d0c      	cmp	r5, #12
 8005052:	bf38      	it	cc
 8005054:	250c      	movcc	r5, #12
 8005056:	4638      	mov	r0, r7
 8005058:	4629      	mov	r1, r5
 800505a:	f7ff ffa5 	bl	8004fa8 <sbrk_aligned>
 800505e:	3001      	adds	r0, #1
 8005060:	d02b      	beq.n	80050ba <_malloc_r+0xd2>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	442b      	add	r3, r5
 8005066:	6023      	str	r3, [r4, #0]
 8005068:	e00e      	b.n	8005088 <_malloc_r+0xa0>
 800506a:	6822      	ldr	r2, [r4, #0]
 800506c:	1b52      	subs	r2, r2, r5
 800506e:	d41e      	bmi.n	80050ae <_malloc_r+0xc6>
 8005070:	2a0b      	cmp	r2, #11
 8005072:	d916      	bls.n	80050a2 <_malloc_r+0xba>
 8005074:	1961      	adds	r1, r4, r5
 8005076:	42a3      	cmp	r3, r4
 8005078:	6025      	str	r5, [r4, #0]
 800507a:	bf18      	it	ne
 800507c:	6059      	strne	r1, [r3, #4]
 800507e:	6863      	ldr	r3, [r4, #4]
 8005080:	bf08      	it	eq
 8005082:	6031      	streq	r1, [r6, #0]
 8005084:	5162      	str	r2, [r4, r5]
 8005086:	604b      	str	r3, [r1, #4]
 8005088:	4638      	mov	r0, r7
 800508a:	f104 060b 	add.w	r6, r4, #11
 800508e:	f000 f9ed 	bl	800546c <__malloc_unlock>
 8005092:	f026 0607 	bic.w	r6, r6, #7
 8005096:	1d23      	adds	r3, r4, #4
 8005098:	1af2      	subs	r2, r6, r3
 800509a:	d0b6      	beq.n	800500a <_malloc_r+0x22>
 800509c:	1b9b      	subs	r3, r3, r6
 800509e:	50a3      	str	r3, [r4, r2]
 80050a0:	e7b3      	b.n	800500a <_malloc_r+0x22>
 80050a2:	6862      	ldr	r2, [r4, #4]
 80050a4:	42a3      	cmp	r3, r4
 80050a6:	bf0c      	ite	eq
 80050a8:	6032      	streq	r2, [r6, #0]
 80050aa:	605a      	strne	r2, [r3, #4]
 80050ac:	e7ec      	b.n	8005088 <_malloc_r+0xa0>
 80050ae:	4623      	mov	r3, r4
 80050b0:	6864      	ldr	r4, [r4, #4]
 80050b2:	e7b2      	b.n	800501a <_malloc_r+0x32>
 80050b4:	4634      	mov	r4, r6
 80050b6:	6876      	ldr	r6, [r6, #4]
 80050b8:	e7b9      	b.n	800502e <_malloc_r+0x46>
 80050ba:	230c      	movs	r3, #12
 80050bc:	4638      	mov	r0, r7
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	f000 f9d4 	bl	800546c <__malloc_unlock>
 80050c4:	e7a1      	b.n	800500a <_malloc_r+0x22>
 80050c6:	6025      	str	r5, [r4, #0]
 80050c8:	e7de      	b.n	8005088 <_malloc_r+0xa0>
 80050ca:	bf00      	nop
 80050cc:	20000234 	.word	0x20000234

080050d0 <__ssputs_r>:
 80050d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050d4:	688e      	ldr	r6, [r1, #8]
 80050d6:	4682      	mov	sl, r0
 80050d8:	429e      	cmp	r6, r3
 80050da:	460c      	mov	r4, r1
 80050dc:	4690      	mov	r8, r2
 80050de:	461f      	mov	r7, r3
 80050e0:	d838      	bhi.n	8005154 <__ssputs_r+0x84>
 80050e2:	898a      	ldrh	r2, [r1, #12]
 80050e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050e8:	d032      	beq.n	8005150 <__ssputs_r+0x80>
 80050ea:	6825      	ldr	r5, [r4, #0]
 80050ec:	6909      	ldr	r1, [r1, #16]
 80050ee:	3301      	adds	r3, #1
 80050f0:	eba5 0901 	sub.w	r9, r5, r1
 80050f4:	6965      	ldr	r5, [r4, #20]
 80050f6:	444b      	add	r3, r9
 80050f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005100:	106d      	asrs	r5, r5, #1
 8005102:	429d      	cmp	r5, r3
 8005104:	bf38      	it	cc
 8005106:	461d      	movcc	r5, r3
 8005108:	0553      	lsls	r3, r2, #21
 800510a:	d531      	bpl.n	8005170 <__ssputs_r+0xa0>
 800510c:	4629      	mov	r1, r5
 800510e:	f7ff ff6b 	bl	8004fe8 <_malloc_r>
 8005112:	4606      	mov	r6, r0
 8005114:	b950      	cbnz	r0, 800512c <__ssputs_r+0x5c>
 8005116:	230c      	movs	r3, #12
 8005118:	f04f 30ff 	mov.w	r0, #4294967295
 800511c:	f8ca 3000 	str.w	r3, [sl]
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005126:	81a3      	strh	r3, [r4, #12]
 8005128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800512c:	464a      	mov	r2, r9
 800512e:	6921      	ldr	r1, [r4, #16]
 8005130:	f7ff fb4e 	bl	80047d0 <memcpy>
 8005134:	89a3      	ldrh	r3, [r4, #12]
 8005136:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800513a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800513e:	81a3      	strh	r3, [r4, #12]
 8005140:	6126      	str	r6, [r4, #16]
 8005142:	444e      	add	r6, r9
 8005144:	6026      	str	r6, [r4, #0]
 8005146:	463e      	mov	r6, r7
 8005148:	6165      	str	r5, [r4, #20]
 800514a:	eba5 0509 	sub.w	r5, r5, r9
 800514e:	60a5      	str	r5, [r4, #8]
 8005150:	42be      	cmp	r6, r7
 8005152:	d900      	bls.n	8005156 <__ssputs_r+0x86>
 8005154:	463e      	mov	r6, r7
 8005156:	4632      	mov	r2, r6
 8005158:	4641      	mov	r1, r8
 800515a:	6820      	ldr	r0, [r4, #0]
 800515c:	f000 f966 	bl	800542c <memmove>
 8005160:	68a3      	ldr	r3, [r4, #8]
 8005162:	2000      	movs	r0, #0
 8005164:	1b9b      	subs	r3, r3, r6
 8005166:	60a3      	str	r3, [r4, #8]
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	4433      	add	r3, r6
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	e7db      	b.n	8005128 <__ssputs_r+0x58>
 8005170:	462a      	mov	r2, r5
 8005172:	f000 f981 	bl	8005478 <_realloc_r>
 8005176:	4606      	mov	r6, r0
 8005178:	2800      	cmp	r0, #0
 800517a:	d1e1      	bne.n	8005140 <__ssputs_r+0x70>
 800517c:	4650      	mov	r0, sl
 800517e:	6921      	ldr	r1, [r4, #16]
 8005180:	f7ff feca 	bl	8004f18 <_free_r>
 8005184:	e7c7      	b.n	8005116 <__ssputs_r+0x46>
	...

08005188 <_svfiprintf_r>:
 8005188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800518c:	4698      	mov	r8, r3
 800518e:	898b      	ldrh	r3, [r1, #12]
 8005190:	4607      	mov	r7, r0
 8005192:	061b      	lsls	r3, r3, #24
 8005194:	460d      	mov	r5, r1
 8005196:	4614      	mov	r4, r2
 8005198:	b09d      	sub	sp, #116	; 0x74
 800519a:	d50e      	bpl.n	80051ba <_svfiprintf_r+0x32>
 800519c:	690b      	ldr	r3, [r1, #16]
 800519e:	b963      	cbnz	r3, 80051ba <_svfiprintf_r+0x32>
 80051a0:	2140      	movs	r1, #64	; 0x40
 80051a2:	f7ff ff21 	bl	8004fe8 <_malloc_r>
 80051a6:	6028      	str	r0, [r5, #0]
 80051a8:	6128      	str	r0, [r5, #16]
 80051aa:	b920      	cbnz	r0, 80051b6 <_svfiprintf_r+0x2e>
 80051ac:	230c      	movs	r3, #12
 80051ae:	603b      	str	r3, [r7, #0]
 80051b0:	f04f 30ff 	mov.w	r0, #4294967295
 80051b4:	e0d1      	b.n	800535a <_svfiprintf_r+0x1d2>
 80051b6:	2340      	movs	r3, #64	; 0x40
 80051b8:	616b      	str	r3, [r5, #20]
 80051ba:	2300      	movs	r3, #0
 80051bc:	9309      	str	r3, [sp, #36]	; 0x24
 80051be:	2320      	movs	r3, #32
 80051c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051c4:	2330      	movs	r3, #48	; 0x30
 80051c6:	f04f 0901 	mov.w	r9, #1
 80051ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80051ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005374 <_svfiprintf_r+0x1ec>
 80051d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051d6:	4623      	mov	r3, r4
 80051d8:	469a      	mov	sl, r3
 80051da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051de:	b10a      	cbz	r2, 80051e4 <_svfiprintf_r+0x5c>
 80051e0:	2a25      	cmp	r2, #37	; 0x25
 80051e2:	d1f9      	bne.n	80051d8 <_svfiprintf_r+0x50>
 80051e4:	ebba 0b04 	subs.w	fp, sl, r4
 80051e8:	d00b      	beq.n	8005202 <_svfiprintf_r+0x7a>
 80051ea:	465b      	mov	r3, fp
 80051ec:	4622      	mov	r2, r4
 80051ee:	4629      	mov	r1, r5
 80051f0:	4638      	mov	r0, r7
 80051f2:	f7ff ff6d 	bl	80050d0 <__ssputs_r>
 80051f6:	3001      	adds	r0, #1
 80051f8:	f000 80aa 	beq.w	8005350 <_svfiprintf_r+0x1c8>
 80051fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051fe:	445a      	add	r2, fp
 8005200:	9209      	str	r2, [sp, #36]	; 0x24
 8005202:	f89a 3000 	ldrb.w	r3, [sl]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 80a2 	beq.w	8005350 <_svfiprintf_r+0x1c8>
 800520c:	2300      	movs	r3, #0
 800520e:	f04f 32ff 	mov.w	r2, #4294967295
 8005212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005216:	f10a 0a01 	add.w	sl, sl, #1
 800521a:	9304      	str	r3, [sp, #16]
 800521c:	9307      	str	r3, [sp, #28]
 800521e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005222:	931a      	str	r3, [sp, #104]	; 0x68
 8005224:	4654      	mov	r4, sl
 8005226:	2205      	movs	r2, #5
 8005228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800522c:	4851      	ldr	r0, [pc, #324]	; (8005374 <_svfiprintf_r+0x1ec>)
 800522e:	f7ff fac1 	bl	80047b4 <memchr>
 8005232:	9a04      	ldr	r2, [sp, #16]
 8005234:	b9d8      	cbnz	r0, 800526e <_svfiprintf_r+0xe6>
 8005236:	06d0      	lsls	r0, r2, #27
 8005238:	bf44      	itt	mi
 800523a:	2320      	movmi	r3, #32
 800523c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005240:	0711      	lsls	r1, r2, #28
 8005242:	bf44      	itt	mi
 8005244:	232b      	movmi	r3, #43	; 0x2b
 8005246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800524a:	f89a 3000 	ldrb.w	r3, [sl]
 800524e:	2b2a      	cmp	r3, #42	; 0x2a
 8005250:	d015      	beq.n	800527e <_svfiprintf_r+0xf6>
 8005252:	4654      	mov	r4, sl
 8005254:	2000      	movs	r0, #0
 8005256:	f04f 0c0a 	mov.w	ip, #10
 800525a:	9a07      	ldr	r2, [sp, #28]
 800525c:	4621      	mov	r1, r4
 800525e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005262:	3b30      	subs	r3, #48	; 0x30
 8005264:	2b09      	cmp	r3, #9
 8005266:	d94e      	bls.n	8005306 <_svfiprintf_r+0x17e>
 8005268:	b1b0      	cbz	r0, 8005298 <_svfiprintf_r+0x110>
 800526a:	9207      	str	r2, [sp, #28]
 800526c:	e014      	b.n	8005298 <_svfiprintf_r+0x110>
 800526e:	eba0 0308 	sub.w	r3, r0, r8
 8005272:	fa09 f303 	lsl.w	r3, r9, r3
 8005276:	4313      	orrs	r3, r2
 8005278:	46a2      	mov	sl, r4
 800527a:	9304      	str	r3, [sp, #16]
 800527c:	e7d2      	b.n	8005224 <_svfiprintf_r+0x9c>
 800527e:	9b03      	ldr	r3, [sp, #12]
 8005280:	1d19      	adds	r1, r3, #4
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	9103      	str	r1, [sp, #12]
 8005286:	2b00      	cmp	r3, #0
 8005288:	bfbb      	ittet	lt
 800528a:	425b      	neglt	r3, r3
 800528c:	f042 0202 	orrlt.w	r2, r2, #2
 8005290:	9307      	strge	r3, [sp, #28]
 8005292:	9307      	strlt	r3, [sp, #28]
 8005294:	bfb8      	it	lt
 8005296:	9204      	strlt	r2, [sp, #16]
 8005298:	7823      	ldrb	r3, [r4, #0]
 800529a:	2b2e      	cmp	r3, #46	; 0x2e
 800529c:	d10c      	bne.n	80052b8 <_svfiprintf_r+0x130>
 800529e:	7863      	ldrb	r3, [r4, #1]
 80052a0:	2b2a      	cmp	r3, #42	; 0x2a
 80052a2:	d135      	bne.n	8005310 <_svfiprintf_r+0x188>
 80052a4:	9b03      	ldr	r3, [sp, #12]
 80052a6:	3402      	adds	r4, #2
 80052a8:	1d1a      	adds	r2, r3, #4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	9203      	str	r2, [sp, #12]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	bfb8      	it	lt
 80052b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80052b6:	9305      	str	r3, [sp, #20]
 80052b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005378 <_svfiprintf_r+0x1f0>
 80052bc:	2203      	movs	r2, #3
 80052be:	4650      	mov	r0, sl
 80052c0:	7821      	ldrb	r1, [r4, #0]
 80052c2:	f7ff fa77 	bl	80047b4 <memchr>
 80052c6:	b140      	cbz	r0, 80052da <_svfiprintf_r+0x152>
 80052c8:	2340      	movs	r3, #64	; 0x40
 80052ca:	eba0 000a 	sub.w	r0, r0, sl
 80052ce:	fa03 f000 	lsl.w	r0, r3, r0
 80052d2:	9b04      	ldr	r3, [sp, #16]
 80052d4:	3401      	adds	r4, #1
 80052d6:	4303      	orrs	r3, r0
 80052d8:	9304      	str	r3, [sp, #16]
 80052da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052de:	2206      	movs	r2, #6
 80052e0:	4826      	ldr	r0, [pc, #152]	; (800537c <_svfiprintf_r+0x1f4>)
 80052e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052e6:	f7ff fa65 	bl	80047b4 <memchr>
 80052ea:	2800      	cmp	r0, #0
 80052ec:	d038      	beq.n	8005360 <_svfiprintf_r+0x1d8>
 80052ee:	4b24      	ldr	r3, [pc, #144]	; (8005380 <_svfiprintf_r+0x1f8>)
 80052f0:	bb1b      	cbnz	r3, 800533a <_svfiprintf_r+0x1b2>
 80052f2:	9b03      	ldr	r3, [sp, #12]
 80052f4:	3307      	adds	r3, #7
 80052f6:	f023 0307 	bic.w	r3, r3, #7
 80052fa:	3308      	adds	r3, #8
 80052fc:	9303      	str	r3, [sp, #12]
 80052fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005300:	4433      	add	r3, r6
 8005302:	9309      	str	r3, [sp, #36]	; 0x24
 8005304:	e767      	b.n	80051d6 <_svfiprintf_r+0x4e>
 8005306:	460c      	mov	r4, r1
 8005308:	2001      	movs	r0, #1
 800530a:	fb0c 3202 	mla	r2, ip, r2, r3
 800530e:	e7a5      	b.n	800525c <_svfiprintf_r+0xd4>
 8005310:	2300      	movs	r3, #0
 8005312:	f04f 0c0a 	mov.w	ip, #10
 8005316:	4619      	mov	r1, r3
 8005318:	3401      	adds	r4, #1
 800531a:	9305      	str	r3, [sp, #20]
 800531c:	4620      	mov	r0, r4
 800531e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005322:	3a30      	subs	r2, #48	; 0x30
 8005324:	2a09      	cmp	r2, #9
 8005326:	d903      	bls.n	8005330 <_svfiprintf_r+0x1a8>
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0c5      	beq.n	80052b8 <_svfiprintf_r+0x130>
 800532c:	9105      	str	r1, [sp, #20]
 800532e:	e7c3      	b.n	80052b8 <_svfiprintf_r+0x130>
 8005330:	4604      	mov	r4, r0
 8005332:	2301      	movs	r3, #1
 8005334:	fb0c 2101 	mla	r1, ip, r1, r2
 8005338:	e7f0      	b.n	800531c <_svfiprintf_r+0x194>
 800533a:	ab03      	add	r3, sp, #12
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	462a      	mov	r2, r5
 8005340:	4638      	mov	r0, r7
 8005342:	4b10      	ldr	r3, [pc, #64]	; (8005384 <_svfiprintf_r+0x1fc>)
 8005344:	a904      	add	r1, sp, #16
 8005346:	f7fd ffb7 	bl	80032b8 <_printf_float>
 800534a:	1c42      	adds	r2, r0, #1
 800534c:	4606      	mov	r6, r0
 800534e:	d1d6      	bne.n	80052fe <_svfiprintf_r+0x176>
 8005350:	89ab      	ldrh	r3, [r5, #12]
 8005352:	065b      	lsls	r3, r3, #25
 8005354:	f53f af2c 	bmi.w	80051b0 <_svfiprintf_r+0x28>
 8005358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800535a:	b01d      	add	sp, #116	; 0x74
 800535c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005360:	ab03      	add	r3, sp, #12
 8005362:	9300      	str	r3, [sp, #0]
 8005364:	462a      	mov	r2, r5
 8005366:	4638      	mov	r0, r7
 8005368:	4b06      	ldr	r3, [pc, #24]	; (8005384 <_svfiprintf_r+0x1fc>)
 800536a:	a904      	add	r1, sp, #16
 800536c:	f7fe fa40 	bl	80037f0 <_printf_i>
 8005370:	e7eb      	b.n	800534a <_svfiprintf_r+0x1c2>
 8005372:	bf00      	nop
 8005374:	080061ec 	.word	0x080061ec
 8005378:	080061f2 	.word	0x080061f2
 800537c:	080061f6 	.word	0x080061f6
 8005380:	080032b9 	.word	0x080032b9
 8005384:	080050d1 	.word	0x080050d1

08005388 <_sbrk_r>:
 8005388:	b538      	push	{r3, r4, r5, lr}
 800538a:	2300      	movs	r3, #0
 800538c:	4d05      	ldr	r5, [pc, #20]	; (80053a4 <_sbrk_r+0x1c>)
 800538e:	4604      	mov	r4, r0
 8005390:	4608      	mov	r0, r1
 8005392:	602b      	str	r3, [r5, #0]
 8005394:	f7fc f9a0 	bl	80016d8 <_sbrk>
 8005398:	1c43      	adds	r3, r0, #1
 800539a:	d102      	bne.n	80053a2 <_sbrk_r+0x1a>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	b103      	cbz	r3, 80053a2 <_sbrk_r+0x1a>
 80053a0:	6023      	str	r3, [r4, #0]
 80053a2:	bd38      	pop	{r3, r4, r5, pc}
 80053a4:	2000023c 	.word	0x2000023c

080053a8 <__assert_func>:
 80053a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053aa:	4614      	mov	r4, r2
 80053ac:	461a      	mov	r2, r3
 80053ae:	4b09      	ldr	r3, [pc, #36]	; (80053d4 <__assert_func+0x2c>)
 80053b0:	4605      	mov	r5, r0
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68d8      	ldr	r0, [r3, #12]
 80053b6:	b14c      	cbz	r4, 80053cc <__assert_func+0x24>
 80053b8:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <__assert_func+0x30>)
 80053ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80053be:	9100      	str	r1, [sp, #0]
 80053c0:	462b      	mov	r3, r5
 80053c2:	4906      	ldr	r1, [pc, #24]	; (80053dc <__assert_func+0x34>)
 80053c4:	f000 f80e 	bl	80053e4 <fiprintf>
 80053c8:	f000 faaa 	bl	8005920 <abort>
 80053cc:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <__assert_func+0x38>)
 80053ce:	461c      	mov	r4, r3
 80053d0:	e7f3      	b.n	80053ba <__assert_func+0x12>
 80053d2:	bf00      	nop
 80053d4:	2000000c 	.word	0x2000000c
 80053d8:	080061fd 	.word	0x080061fd
 80053dc:	0800620a 	.word	0x0800620a
 80053e0:	08006238 	.word	0x08006238

080053e4 <fiprintf>:
 80053e4:	b40e      	push	{r1, r2, r3}
 80053e6:	b503      	push	{r0, r1, lr}
 80053e8:	4601      	mov	r1, r0
 80053ea:	ab03      	add	r3, sp, #12
 80053ec:	4805      	ldr	r0, [pc, #20]	; (8005404 <fiprintf+0x20>)
 80053ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80053f2:	6800      	ldr	r0, [r0, #0]
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	f000 f895 	bl	8005524 <_vfiprintf_r>
 80053fa:	b002      	add	sp, #8
 80053fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005400:	b003      	add	sp, #12
 8005402:	4770      	bx	lr
 8005404:	2000000c 	.word	0x2000000c

08005408 <__ascii_mbtowc>:
 8005408:	b082      	sub	sp, #8
 800540a:	b901      	cbnz	r1, 800540e <__ascii_mbtowc+0x6>
 800540c:	a901      	add	r1, sp, #4
 800540e:	b142      	cbz	r2, 8005422 <__ascii_mbtowc+0x1a>
 8005410:	b14b      	cbz	r3, 8005426 <__ascii_mbtowc+0x1e>
 8005412:	7813      	ldrb	r3, [r2, #0]
 8005414:	600b      	str	r3, [r1, #0]
 8005416:	7812      	ldrb	r2, [r2, #0]
 8005418:	1e10      	subs	r0, r2, #0
 800541a:	bf18      	it	ne
 800541c:	2001      	movne	r0, #1
 800541e:	b002      	add	sp, #8
 8005420:	4770      	bx	lr
 8005422:	4610      	mov	r0, r2
 8005424:	e7fb      	b.n	800541e <__ascii_mbtowc+0x16>
 8005426:	f06f 0001 	mvn.w	r0, #1
 800542a:	e7f8      	b.n	800541e <__ascii_mbtowc+0x16>

0800542c <memmove>:
 800542c:	4288      	cmp	r0, r1
 800542e:	b510      	push	{r4, lr}
 8005430:	eb01 0402 	add.w	r4, r1, r2
 8005434:	d902      	bls.n	800543c <memmove+0x10>
 8005436:	4284      	cmp	r4, r0
 8005438:	4623      	mov	r3, r4
 800543a:	d807      	bhi.n	800544c <memmove+0x20>
 800543c:	1e43      	subs	r3, r0, #1
 800543e:	42a1      	cmp	r1, r4
 8005440:	d008      	beq.n	8005454 <memmove+0x28>
 8005442:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800544a:	e7f8      	b.n	800543e <memmove+0x12>
 800544c:	4601      	mov	r1, r0
 800544e:	4402      	add	r2, r0
 8005450:	428a      	cmp	r2, r1
 8005452:	d100      	bne.n	8005456 <memmove+0x2a>
 8005454:	bd10      	pop	{r4, pc}
 8005456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800545a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800545e:	e7f7      	b.n	8005450 <memmove+0x24>

08005460 <__malloc_lock>:
 8005460:	4801      	ldr	r0, [pc, #4]	; (8005468 <__malloc_lock+0x8>)
 8005462:	f000 bc19 	b.w	8005c98 <__retarget_lock_acquire_recursive>
 8005466:	bf00      	nop
 8005468:	20000240 	.word	0x20000240

0800546c <__malloc_unlock>:
 800546c:	4801      	ldr	r0, [pc, #4]	; (8005474 <__malloc_unlock+0x8>)
 800546e:	f000 bc14 	b.w	8005c9a <__retarget_lock_release_recursive>
 8005472:	bf00      	nop
 8005474:	20000240 	.word	0x20000240

08005478 <_realloc_r>:
 8005478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547c:	4680      	mov	r8, r0
 800547e:	4614      	mov	r4, r2
 8005480:	460e      	mov	r6, r1
 8005482:	b921      	cbnz	r1, 800548e <_realloc_r+0x16>
 8005484:	4611      	mov	r1, r2
 8005486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800548a:	f7ff bdad 	b.w	8004fe8 <_malloc_r>
 800548e:	b92a      	cbnz	r2, 800549c <_realloc_r+0x24>
 8005490:	f7ff fd42 	bl	8004f18 <_free_r>
 8005494:	4625      	mov	r5, r4
 8005496:	4628      	mov	r0, r5
 8005498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800549c:	f000 fc64 	bl	8005d68 <_malloc_usable_size_r>
 80054a0:	4284      	cmp	r4, r0
 80054a2:	4607      	mov	r7, r0
 80054a4:	d802      	bhi.n	80054ac <_realloc_r+0x34>
 80054a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054aa:	d812      	bhi.n	80054d2 <_realloc_r+0x5a>
 80054ac:	4621      	mov	r1, r4
 80054ae:	4640      	mov	r0, r8
 80054b0:	f7ff fd9a 	bl	8004fe8 <_malloc_r>
 80054b4:	4605      	mov	r5, r0
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d0ed      	beq.n	8005496 <_realloc_r+0x1e>
 80054ba:	42bc      	cmp	r4, r7
 80054bc:	4622      	mov	r2, r4
 80054be:	4631      	mov	r1, r6
 80054c0:	bf28      	it	cs
 80054c2:	463a      	movcs	r2, r7
 80054c4:	f7ff f984 	bl	80047d0 <memcpy>
 80054c8:	4631      	mov	r1, r6
 80054ca:	4640      	mov	r0, r8
 80054cc:	f7ff fd24 	bl	8004f18 <_free_r>
 80054d0:	e7e1      	b.n	8005496 <_realloc_r+0x1e>
 80054d2:	4635      	mov	r5, r6
 80054d4:	e7df      	b.n	8005496 <_realloc_r+0x1e>

080054d6 <__sfputc_r>:
 80054d6:	6893      	ldr	r3, [r2, #8]
 80054d8:	b410      	push	{r4}
 80054da:	3b01      	subs	r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	6093      	str	r3, [r2, #8]
 80054e0:	da07      	bge.n	80054f2 <__sfputc_r+0x1c>
 80054e2:	6994      	ldr	r4, [r2, #24]
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	db01      	blt.n	80054ec <__sfputc_r+0x16>
 80054e8:	290a      	cmp	r1, #10
 80054ea:	d102      	bne.n	80054f2 <__sfputc_r+0x1c>
 80054ec:	bc10      	pop	{r4}
 80054ee:	f000 b949 	b.w	8005784 <__swbuf_r>
 80054f2:	6813      	ldr	r3, [r2, #0]
 80054f4:	1c58      	adds	r0, r3, #1
 80054f6:	6010      	str	r0, [r2, #0]
 80054f8:	7019      	strb	r1, [r3, #0]
 80054fa:	4608      	mov	r0, r1
 80054fc:	bc10      	pop	{r4}
 80054fe:	4770      	bx	lr

08005500 <__sfputs_r>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	4606      	mov	r6, r0
 8005504:	460f      	mov	r7, r1
 8005506:	4614      	mov	r4, r2
 8005508:	18d5      	adds	r5, r2, r3
 800550a:	42ac      	cmp	r4, r5
 800550c:	d101      	bne.n	8005512 <__sfputs_r+0x12>
 800550e:	2000      	movs	r0, #0
 8005510:	e007      	b.n	8005522 <__sfputs_r+0x22>
 8005512:	463a      	mov	r2, r7
 8005514:	4630      	mov	r0, r6
 8005516:	f814 1b01 	ldrb.w	r1, [r4], #1
 800551a:	f7ff ffdc 	bl	80054d6 <__sfputc_r>
 800551e:	1c43      	adds	r3, r0, #1
 8005520:	d1f3      	bne.n	800550a <__sfputs_r+0xa>
 8005522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005524 <_vfiprintf_r>:
 8005524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005528:	460d      	mov	r5, r1
 800552a:	4614      	mov	r4, r2
 800552c:	4698      	mov	r8, r3
 800552e:	4606      	mov	r6, r0
 8005530:	b09d      	sub	sp, #116	; 0x74
 8005532:	b118      	cbz	r0, 800553c <_vfiprintf_r+0x18>
 8005534:	6983      	ldr	r3, [r0, #24]
 8005536:	b90b      	cbnz	r3, 800553c <_vfiprintf_r+0x18>
 8005538:	f000 fb10 	bl	8005b5c <__sinit>
 800553c:	4b89      	ldr	r3, [pc, #548]	; (8005764 <_vfiprintf_r+0x240>)
 800553e:	429d      	cmp	r5, r3
 8005540:	d11b      	bne.n	800557a <_vfiprintf_r+0x56>
 8005542:	6875      	ldr	r5, [r6, #4]
 8005544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005546:	07d9      	lsls	r1, r3, #31
 8005548:	d405      	bmi.n	8005556 <_vfiprintf_r+0x32>
 800554a:	89ab      	ldrh	r3, [r5, #12]
 800554c:	059a      	lsls	r2, r3, #22
 800554e:	d402      	bmi.n	8005556 <_vfiprintf_r+0x32>
 8005550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005552:	f000 fba1 	bl	8005c98 <__retarget_lock_acquire_recursive>
 8005556:	89ab      	ldrh	r3, [r5, #12]
 8005558:	071b      	lsls	r3, r3, #28
 800555a:	d501      	bpl.n	8005560 <_vfiprintf_r+0x3c>
 800555c:	692b      	ldr	r3, [r5, #16]
 800555e:	b9eb      	cbnz	r3, 800559c <_vfiprintf_r+0x78>
 8005560:	4629      	mov	r1, r5
 8005562:	4630      	mov	r0, r6
 8005564:	f000 f96e 	bl	8005844 <__swsetup_r>
 8005568:	b1c0      	cbz	r0, 800559c <_vfiprintf_r+0x78>
 800556a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800556c:	07dc      	lsls	r4, r3, #31
 800556e:	d50e      	bpl.n	800558e <_vfiprintf_r+0x6a>
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
 8005574:	b01d      	add	sp, #116	; 0x74
 8005576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557a:	4b7b      	ldr	r3, [pc, #492]	; (8005768 <_vfiprintf_r+0x244>)
 800557c:	429d      	cmp	r5, r3
 800557e:	d101      	bne.n	8005584 <_vfiprintf_r+0x60>
 8005580:	68b5      	ldr	r5, [r6, #8]
 8005582:	e7df      	b.n	8005544 <_vfiprintf_r+0x20>
 8005584:	4b79      	ldr	r3, [pc, #484]	; (800576c <_vfiprintf_r+0x248>)
 8005586:	429d      	cmp	r5, r3
 8005588:	bf08      	it	eq
 800558a:	68f5      	ldreq	r5, [r6, #12]
 800558c:	e7da      	b.n	8005544 <_vfiprintf_r+0x20>
 800558e:	89ab      	ldrh	r3, [r5, #12]
 8005590:	0598      	lsls	r0, r3, #22
 8005592:	d4ed      	bmi.n	8005570 <_vfiprintf_r+0x4c>
 8005594:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005596:	f000 fb80 	bl	8005c9a <__retarget_lock_release_recursive>
 800559a:	e7e9      	b.n	8005570 <_vfiprintf_r+0x4c>
 800559c:	2300      	movs	r3, #0
 800559e:	9309      	str	r3, [sp, #36]	; 0x24
 80055a0:	2320      	movs	r3, #32
 80055a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055a6:	2330      	movs	r3, #48	; 0x30
 80055a8:	f04f 0901 	mov.w	r9, #1
 80055ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80055b0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005770 <_vfiprintf_r+0x24c>
 80055b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055b8:	4623      	mov	r3, r4
 80055ba:	469a      	mov	sl, r3
 80055bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055c0:	b10a      	cbz	r2, 80055c6 <_vfiprintf_r+0xa2>
 80055c2:	2a25      	cmp	r2, #37	; 0x25
 80055c4:	d1f9      	bne.n	80055ba <_vfiprintf_r+0x96>
 80055c6:	ebba 0b04 	subs.w	fp, sl, r4
 80055ca:	d00b      	beq.n	80055e4 <_vfiprintf_r+0xc0>
 80055cc:	465b      	mov	r3, fp
 80055ce:	4622      	mov	r2, r4
 80055d0:	4629      	mov	r1, r5
 80055d2:	4630      	mov	r0, r6
 80055d4:	f7ff ff94 	bl	8005500 <__sfputs_r>
 80055d8:	3001      	adds	r0, #1
 80055da:	f000 80aa 	beq.w	8005732 <_vfiprintf_r+0x20e>
 80055de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055e0:	445a      	add	r2, fp
 80055e2:	9209      	str	r2, [sp, #36]	; 0x24
 80055e4:	f89a 3000 	ldrb.w	r3, [sl]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	f000 80a2 	beq.w	8005732 <_vfiprintf_r+0x20e>
 80055ee:	2300      	movs	r3, #0
 80055f0:	f04f 32ff 	mov.w	r2, #4294967295
 80055f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055f8:	f10a 0a01 	add.w	sl, sl, #1
 80055fc:	9304      	str	r3, [sp, #16]
 80055fe:	9307      	str	r3, [sp, #28]
 8005600:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005604:	931a      	str	r3, [sp, #104]	; 0x68
 8005606:	4654      	mov	r4, sl
 8005608:	2205      	movs	r2, #5
 800560a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800560e:	4858      	ldr	r0, [pc, #352]	; (8005770 <_vfiprintf_r+0x24c>)
 8005610:	f7ff f8d0 	bl	80047b4 <memchr>
 8005614:	9a04      	ldr	r2, [sp, #16]
 8005616:	b9d8      	cbnz	r0, 8005650 <_vfiprintf_r+0x12c>
 8005618:	06d1      	lsls	r1, r2, #27
 800561a:	bf44      	itt	mi
 800561c:	2320      	movmi	r3, #32
 800561e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005622:	0713      	lsls	r3, r2, #28
 8005624:	bf44      	itt	mi
 8005626:	232b      	movmi	r3, #43	; 0x2b
 8005628:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800562c:	f89a 3000 	ldrb.w	r3, [sl]
 8005630:	2b2a      	cmp	r3, #42	; 0x2a
 8005632:	d015      	beq.n	8005660 <_vfiprintf_r+0x13c>
 8005634:	4654      	mov	r4, sl
 8005636:	2000      	movs	r0, #0
 8005638:	f04f 0c0a 	mov.w	ip, #10
 800563c:	9a07      	ldr	r2, [sp, #28]
 800563e:	4621      	mov	r1, r4
 8005640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005644:	3b30      	subs	r3, #48	; 0x30
 8005646:	2b09      	cmp	r3, #9
 8005648:	d94e      	bls.n	80056e8 <_vfiprintf_r+0x1c4>
 800564a:	b1b0      	cbz	r0, 800567a <_vfiprintf_r+0x156>
 800564c:	9207      	str	r2, [sp, #28]
 800564e:	e014      	b.n	800567a <_vfiprintf_r+0x156>
 8005650:	eba0 0308 	sub.w	r3, r0, r8
 8005654:	fa09 f303 	lsl.w	r3, r9, r3
 8005658:	4313      	orrs	r3, r2
 800565a:	46a2      	mov	sl, r4
 800565c:	9304      	str	r3, [sp, #16]
 800565e:	e7d2      	b.n	8005606 <_vfiprintf_r+0xe2>
 8005660:	9b03      	ldr	r3, [sp, #12]
 8005662:	1d19      	adds	r1, r3, #4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	9103      	str	r1, [sp, #12]
 8005668:	2b00      	cmp	r3, #0
 800566a:	bfbb      	ittet	lt
 800566c:	425b      	neglt	r3, r3
 800566e:	f042 0202 	orrlt.w	r2, r2, #2
 8005672:	9307      	strge	r3, [sp, #28]
 8005674:	9307      	strlt	r3, [sp, #28]
 8005676:	bfb8      	it	lt
 8005678:	9204      	strlt	r2, [sp, #16]
 800567a:	7823      	ldrb	r3, [r4, #0]
 800567c:	2b2e      	cmp	r3, #46	; 0x2e
 800567e:	d10c      	bne.n	800569a <_vfiprintf_r+0x176>
 8005680:	7863      	ldrb	r3, [r4, #1]
 8005682:	2b2a      	cmp	r3, #42	; 0x2a
 8005684:	d135      	bne.n	80056f2 <_vfiprintf_r+0x1ce>
 8005686:	9b03      	ldr	r3, [sp, #12]
 8005688:	3402      	adds	r4, #2
 800568a:	1d1a      	adds	r2, r3, #4
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	9203      	str	r2, [sp, #12]
 8005690:	2b00      	cmp	r3, #0
 8005692:	bfb8      	it	lt
 8005694:	f04f 33ff 	movlt.w	r3, #4294967295
 8005698:	9305      	str	r3, [sp, #20]
 800569a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005774 <_vfiprintf_r+0x250>
 800569e:	2203      	movs	r2, #3
 80056a0:	4650      	mov	r0, sl
 80056a2:	7821      	ldrb	r1, [r4, #0]
 80056a4:	f7ff f886 	bl	80047b4 <memchr>
 80056a8:	b140      	cbz	r0, 80056bc <_vfiprintf_r+0x198>
 80056aa:	2340      	movs	r3, #64	; 0x40
 80056ac:	eba0 000a 	sub.w	r0, r0, sl
 80056b0:	fa03 f000 	lsl.w	r0, r3, r0
 80056b4:	9b04      	ldr	r3, [sp, #16]
 80056b6:	3401      	adds	r4, #1
 80056b8:	4303      	orrs	r3, r0
 80056ba:	9304      	str	r3, [sp, #16]
 80056bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056c0:	2206      	movs	r2, #6
 80056c2:	482d      	ldr	r0, [pc, #180]	; (8005778 <_vfiprintf_r+0x254>)
 80056c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056c8:	f7ff f874 	bl	80047b4 <memchr>
 80056cc:	2800      	cmp	r0, #0
 80056ce:	d03f      	beq.n	8005750 <_vfiprintf_r+0x22c>
 80056d0:	4b2a      	ldr	r3, [pc, #168]	; (800577c <_vfiprintf_r+0x258>)
 80056d2:	bb1b      	cbnz	r3, 800571c <_vfiprintf_r+0x1f8>
 80056d4:	9b03      	ldr	r3, [sp, #12]
 80056d6:	3307      	adds	r3, #7
 80056d8:	f023 0307 	bic.w	r3, r3, #7
 80056dc:	3308      	adds	r3, #8
 80056de:	9303      	str	r3, [sp, #12]
 80056e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e2:	443b      	add	r3, r7
 80056e4:	9309      	str	r3, [sp, #36]	; 0x24
 80056e6:	e767      	b.n	80055b8 <_vfiprintf_r+0x94>
 80056e8:	460c      	mov	r4, r1
 80056ea:	2001      	movs	r0, #1
 80056ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80056f0:	e7a5      	b.n	800563e <_vfiprintf_r+0x11a>
 80056f2:	2300      	movs	r3, #0
 80056f4:	f04f 0c0a 	mov.w	ip, #10
 80056f8:	4619      	mov	r1, r3
 80056fa:	3401      	adds	r4, #1
 80056fc:	9305      	str	r3, [sp, #20]
 80056fe:	4620      	mov	r0, r4
 8005700:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005704:	3a30      	subs	r2, #48	; 0x30
 8005706:	2a09      	cmp	r2, #9
 8005708:	d903      	bls.n	8005712 <_vfiprintf_r+0x1ee>
 800570a:	2b00      	cmp	r3, #0
 800570c:	d0c5      	beq.n	800569a <_vfiprintf_r+0x176>
 800570e:	9105      	str	r1, [sp, #20]
 8005710:	e7c3      	b.n	800569a <_vfiprintf_r+0x176>
 8005712:	4604      	mov	r4, r0
 8005714:	2301      	movs	r3, #1
 8005716:	fb0c 2101 	mla	r1, ip, r1, r2
 800571a:	e7f0      	b.n	80056fe <_vfiprintf_r+0x1da>
 800571c:	ab03      	add	r3, sp, #12
 800571e:	9300      	str	r3, [sp, #0]
 8005720:	462a      	mov	r2, r5
 8005722:	4630      	mov	r0, r6
 8005724:	4b16      	ldr	r3, [pc, #88]	; (8005780 <_vfiprintf_r+0x25c>)
 8005726:	a904      	add	r1, sp, #16
 8005728:	f7fd fdc6 	bl	80032b8 <_printf_float>
 800572c:	4607      	mov	r7, r0
 800572e:	1c78      	adds	r0, r7, #1
 8005730:	d1d6      	bne.n	80056e0 <_vfiprintf_r+0x1bc>
 8005732:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005734:	07d9      	lsls	r1, r3, #31
 8005736:	d405      	bmi.n	8005744 <_vfiprintf_r+0x220>
 8005738:	89ab      	ldrh	r3, [r5, #12]
 800573a:	059a      	lsls	r2, r3, #22
 800573c:	d402      	bmi.n	8005744 <_vfiprintf_r+0x220>
 800573e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005740:	f000 faab 	bl	8005c9a <__retarget_lock_release_recursive>
 8005744:	89ab      	ldrh	r3, [r5, #12]
 8005746:	065b      	lsls	r3, r3, #25
 8005748:	f53f af12 	bmi.w	8005570 <_vfiprintf_r+0x4c>
 800574c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800574e:	e711      	b.n	8005574 <_vfiprintf_r+0x50>
 8005750:	ab03      	add	r3, sp, #12
 8005752:	9300      	str	r3, [sp, #0]
 8005754:	462a      	mov	r2, r5
 8005756:	4630      	mov	r0, r6
 8005758:	4b09      	ldr	r3, [pc, #36]	; (8005780 <_vfiprintf_r+0x25c>)
 800575a:	a904      	add	r1, sp, #16
 800575c:	f7fe f848 	bl	80037f0 <_printf_i>
 8005760:	e7e4      	b.n	800572c <_vfiprintf_r+0x208>
 8005762:	bf00      	nop
 8005764:	08006364 	.word	0x08006364
 8005768:	08006384 	.word	0x08006384
 800576c:	08006344 	.word	0x08006344
 8005770:	080061ec 	.word	0x080061ec
 8005774:	080061f2 	.word	0x080061f2
 8005778:	080061f6 	.word	0x080061f6
 800577c:	080032b9 	.word	0x080032b9
 8005780:	08005501 	.word	0x08005501

08005784 <__swbuf_r>:
 8005784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005786:	460e      	mov	r6, r1
 8005788:	4614      	mov	r4, r2
 800578a:	4605      	mov	r5, r0
 800578c:	b118      	cbz	r0, 8005796 <__swbuf_r+0x12>
 800578e:	6983      	ldr	r3, [r0, #24]
 8005790:	b90b      	cbnz	r3, 8005796 <__swbuf_r+0x12>
 8005792:	f000 f9e3 	bl	8005b5c <__sinit>
 8005796:	4b21      	ldr	r3, [pc, #132]	; (800581c <__swbuf_r+0x98>)
 8005798:	429c      	cmp	r4, r3
 800579a:	d12b      	bne.n	80057f4 <__swbuf_r+0x70>
 800579c:	686c      	ldr	r4, [r5, #4]
 800579e:	69a3      	ldr	r3, [r4, #24]
 80057a0:	60a3      	str	r3, [r4, #8]
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	071a      	lsls	r2, r3, #28
 80057a6:	d52f      	bpl.n	8005808 <__swbuf_r+0x84>
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	b36b      	cbz	r3, 8005808 <__swbuf_r+0x84>
 80057ac:	6923      	ldr	r3, [r4, #16]
 80057ae:	6820      	ldr	r0, [r4, #0]
 80057b0:	b2f6      	uxtb	r6, r6
 80057b2:	1ac0      	subs	r0, r0, r3
 80057b4:	6963      	ldr	r3, [r4, #20]
 80057b6:	4637      	mov	r7, r6
 80057b8:	4283      	cmp	r3, r0
 80057ba:	dc04      	bgt.n	80057c6 <__swbuf_r+0x42>
 80057bc:	4621      	mov	r1, r4
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 f938 	bl	8005a34 <_fflush_r>
 80057c4:	bb30      	cbnz	r0, 8005814 <__swbuf_r+0x90>
 80057c6:	68a3      	ldr	r3, [r4, #8]
 80057c8:	3001      	adds	r0, #1
 80057ca:	3b01      	subs	r3, #1
 80057cc:	60a3      	str	r3, [r4, #8]
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	6022      	str	r2, [r4, #0]
 80057d4:	701e      	strb	r6, [r3, #0]
 80057d6:	6963      	ldr	r3, [r4, #20]
 80057d8:	4283      	cmp	r3, r0
 80057da:	d004      	beq.n	80057e6 <__swbuf_r+0x62>
 80057dc:	89a3      	ldrh	r3, [r4, #12]
 80057de:	07db      	lsls	r3, r3, #31
 80057e0:	d506      	bpl.n	80057f0 <__swbuf_r+0x6c>
 80057e2:	2e0a      	cmp	r6, #10
 80057e4:	d104      	bne.n	80057f0 <__swbuf_r+0x6c>
 80057e6:	4621      	mov	r1, r4
 80057e8:	4628      	mov	r0, r5
 80057ea:	f000 f923 	bl	8005a34 <_fflush_r>
 80057ee:	b988      	cbnz	r0, 8005814 <__swbuf_r+0x90>
 80057f0:	4638      	mov	r0, r7
 80057f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057f4:	4b0a      	ldr	r3, [pc, #40]	; (8005820 <__swbuf_r+0x9c>)
 80057f6:	429c      	cmp	r4, r3
 80057f8:	d101      	bne.n	80057fe <__swbuf_r+0x7a>
 80057fa:	68ac      	ldr	r4, [r5, #8]
 80057fc:	e7cf      	b.n	800579e <__swbuf_r+0x1a>
 80057fe:	4b09      	ldr	r3, [pc, #36]	; (8005824 <__swbuf_r+0xa0>)
 8005800:	429c      	cmp	r4, r3
 8005802:	bf08      	it	eq
 8005804:	68ec      	ldreq	r4, [r5, #12]
 8005806:	e7ca      	b.n	800579e <__swbuf_r+0x1a>
 8005808:	4621      	mov	r1, r4
 800580a:	4628      	mov	r0, r5
 800580c:	f000 f81a 	bl	8005844 <__swsetup_r>
 8005810:	2800      	cmp	r0, #0
 8005812:	d0cb      	beq.n	80057ac <__swbuf_r+0x28>
 8005814:	f04f 37ff 	mov.w	r7, #4294967295
 8005818:	e7ea      	b.n	80057f0 <__swbuf_r+0x6c>
 800581a:	bf00      	nop
 800581c:	08006364 	.word	0x08006364
 8005820:	08006384 	.word	0x08006384
 8005824:	08006344 	.word	0x08006344

08005828 <__ascii_wctomb>:
 8005828:	4603      	mov	r3, r0
 800582a:	4608      	mov	r0, r1
 800582c:	b141      	cbz	r1, 8005840 <__ascii_wctomb+0x18>
 800582e:	2aff      	cmp	r2, #255	; 0xff
 8005830:	d904      	bls.n	800583c <__ascii_wctomb+0x14>
 8005832:	228a      	movs	r2, #138	; 0x8a
 8005834:	f04f 30ff 	mov.w	r0, #4294967295
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	4770      	bx	lr
 800583c:	2001      	movs	r0, #1
 800583e:	700a      	strb	r2, [r1, #0]
 8005840:	4770      	bx	lr
	...

08005844 <__swsetup_r>:
 8005844:	4b32      	ldr	r3, [pc, #200]	; (8005910 <__swsetup_r+0xcc>)
 8005846:	b570      	push	{r4, r5, r6, lr}
 8005848:	681d      	ldr	r5, [r3, #0]
 800584a:	4606      	mov	r6, r0
 800584c:	460c      	mov	r4, r1
 800584e:	b125      	cbz	r5, 800585a <__swsetup_r+0x16>
 8005850:	69ab      	ldr	r3, [r5, #24]
 8005852:	b913      	cbnz	r3, 800585a <__swsetup_r+0x16>
 8005854:	4628      	mov	r0, r5
 8005856:	f000 f981 	bl	8005b5c <__sinit>
 800585a:	4b2e      	ldr	r3, [pc, #184]	; (8005914 <__swsetup_r+0xd0>)
 800585c:	429c      	cmp	r4, r3
 800585e:	d10f      	bne.n	8005880 <__swsetup_r+0x3c>
 8005860:	686c      	ldr	r4, [r5, #4]
 8005862:	89a3      	ldrh	r3, [r4, #12]
 8005864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005868:	0719      	lsls	r1, r3, #28
 800586a:	d42c      	bmi.n	80058c6 <__swsetup_r+0x82>
 800586c:	06dd      	lsls	r5, r3, #27
 800586e:	d411      	bmi.n	8005894 <__swsetup_r+0x50>
 8005870:	2309      	movs	r3, #9
 8005872:	6033      	str	r3, [r6, #0]
 8005874:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005878:	f04f 30ff 	mov.w	r0, #4294967295
 800587c:	81a3      	strh	r3, [r4, #12]
 800587e:	e03e      	b.n	80058fe <__swsetup_r+0xba>
 8005880:	4b25      	ldr	r3, [pc, #148]	; (8005918 <__swsetup_r+0xd4>)
 8005882:	429c      	cmp	r4, r3
 8005884:	d101      	bne.n	800588a <__swsetup_r+0x46>
 8005886:	68ac      	ldr	r4, [r5, #8]
 8005888:	e7eb      	b.n	8005862 <__swsetup_r+0x1e>
 800588a:	4b24      	ldr	r3, [pc, #144]	; (800591c <__swsetup_r+0xd8>)
 800588c:	429c      	cmp	r4, r3
 800588e:	bf08      	it	eq
 8005890:	68ec      	ldreq	r4, [r5, #12]
 8005892:	e7e6      	b.n	8005862 <__swsetup_r+0x1e>
 8005894:	0758      	lsls	r0, r3, #29
 8005896:	d512      	bpl.n	80058be <__swsetup_r+0x7a>
 8005898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800589a:	b141      	cbz	r1, 80058ae <__swsetup_r+0x6a>
 800589c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058a0:	4299      	cmp	r1, r3
 80058a2:	d002      	beq.n	80058aa <__swsetup_r+0x66>
 80058a4:	4630      	mov	r0, r6
 80058a6:	f7ff fb37 	bl	8004f18 <_free_r>
 80058aa:	2300      	movs	r3, #0
 80058ac:	6363      	str	r3, [r4, #52]	; 0x34
 80058ae:	89a3      	ldrh	r3, [r4, #12]
 80058b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80058b4:	81a3      	strh	r3, [r4, #12]
 80058b6:	2300      	movs	r3, #0
 80058b8:	6063      	str	r3, [r4, #4]
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	89a3      	ldrh	r3, [r4, #12]
 80058c0:	f043 0308 	orr.w	r3, r3, #8
 80058c4:	81a3      	strh	r3, [r4, #12]
 80058c6:	6923      	ldr	r3, [r4, #16]
 80058c8:	b94b      	cbnz	r3, 80058de <__swsetup_r+0x9a>
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058d4:	d003      	beq.n	80058de <__swsetup_r+0x9a>
 80058d6:	4621      	mov	r1, r4
 80058d8:	4630      	mov	r0, r6
 80058da:	f000 fa05 	bl	8005ce8 <__smakebuf_r>
 80058de:	89a0      	ldrh	r0, [r4, #12]
 80058e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058e4:	f010 0301 	ands.w	r3, r0, #1
 80058e8:	d00a      	beq.n	8005900 <__swsetup_r+0xbc>
 80058ea:	2300      	movs	r3, #0
 80058ec:	60a3      	str	r3, [r4, #8]
 80058ee:	6963      	ldr	r3, [r4, #20]
 80058f0:	425b      	negs	r3, r3
 80058f2:	61a3      	str	r3, [r4, #24]
 80058f4:	6923      	ldr	r3, [r4, #16]
 80058f6:	b943      	cbnz	r3, 800590a <__swsetup_r+0xc6>
 80058f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058fc:	d1ba      	bne.n	8005874 <__swsetup_r+0x30>
 80058fe:	bd70      	pop	{r4, r5, r6, pc}
 8005900:	0781      	lsls	r1, r0, #30
 8005902:	bf58      	it	pl
 8005904:	6963      	ldrpl	r3, [r4, #20]
 8005906:	60a3      	str	r3, [r4, #8]
 8005908:	e7f4      	b.n	80058f4 <__swsetup_r+0xb0>
 800590a:	2000      	movs	r0, #0
 800590c:	e7f7      	b.n	80058fe <__swsetup_r+0xba>
 800590e:	bf00      	nop
 8005910:	2000000c 	.word	0x2000000c
 8005914:	08006364 	.word	0x08006364
 8005918:	08006384 	.word	0x08006384
 800591c:	08006344 	.word	0x08006344

08005920 <abort>:
 8005920:	2006      	movs	r0, #6
 8005922:	b508      	push	{r3, lr}
 8005924:	f000 fa50 	bl	8005dc8 <raise>
 8005928:	2001      	movs	r0, #1
 800592a:	f7fb fe61 	bl	80015f0 <_exit>
	...

08005930 <__sflush_r>:
 8005930:	898a      	ldrh	r2, [r1, #12]
 8005932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005934:	4605      	mov	r5, r0
 8005936:	0710      	lsls	r0, r2, #28
 8005938:	460c      	mov	r4, r1
 800593a:	d457      	bmi.n	80059ec <__sflush_r+0xbc>
 800593c:	684b      	ldr	r3, [r1, #4]
 800593e:	2b00      	cmp	r3, #0
 8005940:	dc04      	bgt.n	800594c <__sflush_r+0x1c>
 8005942:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	dc01      	bgt.n	800594c <__sflush_r+0x1c>
 8005948:	2000      	movs	r0, #0
 800594a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800594c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800594e:	2e00      	cmp	r6, #0
 8005950:	d0fa      	beq.n	8005948 <__sflush_r+0x18>
 8005952:	2300      	movs	r3, #0
 8005954:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005958:	682f      	ldr	r7, [r5, #0]
 800595a:	602b      	str	r3, [r5, #0]
 800595c:	d032      	beq.n	80059c4 <__sflush_r+0x94>
 800595e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005960:	89a3      	ldrh	r3, [r4, #12]
 8005962:	075a      	lsls	r2, r3, #29
 8005964:	d505      	bpl.n	8005972 <__sflush_r+0x42>
 8005966:	6863      	ldr	r3, [r4, #4]
 8005968:	1ac0      	subs	r0, r0, r3
 800596a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800596c:	b10b      	cbz	r3, 8005972 <__sflush_r+0x42>
 800596e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005970:	1ac0      	subs	r0, r0, r3
 8005972:	2300      	movs	r3, #0
 8005974:	4602      	mov	r2, r0
 8005976:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005978:	4628      	mov	r0, r5
 800597a:	6a21      	ldr	r1, [r4, #32]
 800597c:	47b0      	blx	r6
 800597e:	1c43      	adds	r3, r0, #1
 8005980:	89a3      	ldrh	r3, [r4, #12]
 8005982:	d106      	bne.n	8005992 <__sflush_r+0x62>
 8005984:	6829      	ldr	r1, [r5, #0]
 8005986:	291d      	cmp	r1, #29
 8005988:	d82c      	bhi.n	80059e4 <__sflush_r+0xb4>
 800598a:	4a29      	ldr	r2, [pc, #164]	; (8005a30 <__sflush_r+0x100>)
 800598c:	40ca      	lsrs	r2, r1
 800598e:	07d6      	lsls	r6, r2, #31
 8005990:	d528      	bpl.n	80059e4 <__sflush_r+0xb4>
 8005992:	2200      	movs	r2, #0
 8005994:	6062      	str	r2, [r4, #4]
 8005996:	6922      	ldr	r2, [r4, #16]
 8005998:	04d9      	lsls	r1, r3, #19
 800599a:	6022      	str	r2, [r4, #0]
 800599c:	d504      	bpl.n	80059a8 <__sflush_r+0x78>
 800599e:	1c42      	adds	r2, r0, #1
 80059a0:	d101      	bne.n	80059a6 <__sflush_r+0x76>
 80059a2:	682b      	ldr	r3, [r5, #0]
 80059a4:	b903      	cbnz	r3, 80059a8 <__sflush_r+0x78>
 80059a6:	6560      	str	r0, [r4, #84]	; 0x54
 80059a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059aa:	602f      	str	r7, [r5, #0]
 80059ac:	2900      	cmp	r1, #0
 80059ae:	d0cb      	beq.n	8005948 <__sflush_r+0x18>
 80059b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059b4:	4299      	cmp	r1, r3
 80059b6:	d002      	beq.n	80059be <__sflush_r+0x8e>
 80059b8:	4628      	mov	r0, r5
 80059ba:	f7ff faad 	bl	8004f18 <_free_r>
 80059be:	2000      	movs	r0, #0
 80059c0:	6360      	str	r0, [r4, #52]	; 0x34
 80059c2:	e7c2      	b.n	800594a <__sflush_r+0x1a>
 80059c4:	6a21      	ldr	r1, [r4, #32]
 80059c6:	2301      	movs	r3, #1
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b0      	blx	r6
 80059cc:	1c41      	adds	r1, r0, #1
 80059ce:	d1c7      	bne.n	8005960 <__sflush_r+0x30>
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d0c4      	beq.n	8005960 <__sflush_r+0x30>
 80059d6:	2b1d      	cmp	r3, #29
 80059d8:	d001      	beq.n	80059de <__sflush_r+0xae>
 80059da:	2b16      	cmp	r3, #22
 80059dc:	d101      	bne.n	80059e2 <__sflush_r+0xb2>
 80059de:	602f      	str	r7, [r5, #0]
 80059e0:	e7b2      	b.n	8005948 <__sflush_r+0x18>
 80059e2:	89a3      	ldrh	r3, [r4, #12]
 80059e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059e8:	81a3      	strh	r3, [r4, #12]
 80059ea:	e7ae      	b.n	800594a <__sflush_r+0x1a>
 80059ec:	690f      	ldr	r7, [r1, #16]
 80059ee:	2f00      	cmp	r7, #0
 80059f0:	d0aa      	beq.n	8005948 <__sflush_r+0x18>
 80059f2:	0793      	lsls	r3, r2, #30
 80059f4:	bf18      	it	ne
 80059f6:	2300      	movne	r3, #0
 80059f8:	680e      	ldr	r6, [r1, #0]
 80059fa:	bf08      	it	eq
 80059fc:	694b      	ldreq	r3, [r1, #20]
 80059fe:	1bf6      	subs	r6, r6, r7
 8005a00:	600f      	str	r7, [r1, #0]
 8005a02:	608b      	str	r3, [r1, #8]
 8005a04:	2e00      	cmp	r6, #0
 8005a06:	dd9f      	ble.n	8005948 <__sflush_r+0x18>
 8005a08:	4633      	mov	r3, r6
 8005a0a:	463a      	mov	r2, r7
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	6a21      	ldr	r1, [r4, #32]
 8005a10:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005a14:	47e0      	blx	ip
 8005a16:	2800      	cmp	r0, #0
 8005a18:	dc06      	bgt.n	8005a28 <__sflush_r+0xf8>
 8005a1a:	89a3      	ldrh	r3, [r4, #12]
 8005a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a24:	81a3      	strh	r3, [r4, #12]
 8005a26:	e790      	b.n	800594a <__sflush_r+0x1a>
 8005a28:	4407      	add	r7, r0
 8005a2a:	1a36      	subs	r6, r6, r0
 8005a2c:	e7ea      	b.n	8005a04 <__sflush_r+0xd4>
 8005a2e:	bf00      	nop
 8005a30:	20400001 	.word	0x20400001

08005a34 <_fflush_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	690b      	ldr	r3, [r1, #16]
 8005a38:	4605      	mov	r5, r0
 8005a3a:	460c      	mov	r4, r1
 8005a3c:	b913      	cbnz	r3, 8005a44 <_fflush_r+0x10>
 8005a3e:	2500      	movs	r5, #0
 8005a40:	4628      	mov	r0, r5
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	b118      	cbz	r0, 8005a4e <_fflush_r+0x1a>
 8005a46:	6983      	ldr	r3, [r0, #24]
 8005a48:	b90b      	cbnz	r3, 8005a4e <_fflush_r+0x1a>
 8005a4a:	f000 f887 	bl	8005b5c <__sinit>
 8005a4e:	4b14      	ldr	r3, [pc, #80]	; (8005aa0 <_fflush_r+0x6c>)
 8005a50:	429c      	cmp	r4, r3
 8005a52:	d11b      	bne.n	8005a8c <_fflush_r+0x58>
 8005a54:	686c      	ldr	r4, [r5, #4]
 8005a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d0ef      	beq.n	8005a3e <_fflush_r+0xa>
 8005a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a60:	07d0      	lsls	r0, r2, #31
 8005a62:	d404      	bmi.n	8005a6e <_fflush_r+0x3a>
 8005a64:	0599      	lsls	r1, r3, #22
 8005a66:	d402      	bmi.n	8005a6e <_fflush_r+0x3a>
 8005a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a6a:	f000 f915 	bl	8005c98 <__retarget_lock_acquire_recursive>
 8005a6e:	4628      	mov	r0, r5
 8005a70:	4621      	mov	r1, r4
 8005a72:	f7ff ff5d 	bl	8005930 <__sflush_r>
 8005a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a78:	4605      	mov	r5, r0
 8005a7a:	07da      	lsls	r2, r3, #31
 8005a7c:	d4e0      	bmi.n	8005a40 <_fflush_r+0xc>
 8005a7e:	89a3      	ldrh	r3, [r4, #12]
 8005a80:	059b      	lsls	r3, r3, #22
 8005a82:	d4dd      	bmi.n	8005a40 <_fflush_r+0xc>
 8005a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a86:	f000 f908 	bl	8005c9a <__retarget_lock_release_recursive>
 8005a8a:	e7d9      	b.n	8005a40 <_fflush_r+0xc>
 8005a8c:	4b05      	ldr	r3, [pc, #20]	; (8005aa4 <_fflush_r+0x70>)
 8005a8e:	429c      	cmp	r4, r3
 8005a90:	d101      	bne.n	8005a96 <_fflush_r+0x62>
 8005a92:	68ac      	ldr	r4, [r5, #8]
 8005a94:	e7df      	b.n	8005a56 <_fflush_r+0x22>
 8005a96:	4b04      	ldr	r3, [pc, #16]	; (8005aa8 <_fflush_r+0x74>)
 8005a98:	429c      	cmp	r4, r3
 8005a9a:	bf08      	it	eq
 8005a9c:	68ec      	ldreq	r4, [r5, #12]
 8005a9e:	e7da      	b.n	8005a56 <_fflush_r+0x22>
 8005aa0:	08006364 	.word	0x08006364
 8005aa4:	08006384 	.word	0x08006384
 8005aa8:	08006344 	.word	0x08006344

08005aac <std>:
 8005aac:	2300      	movs	r3, #0
 8005aae:	b510      	push	{r4, lr}
 8005ab0:	4604      	mov	r4, r0
 8005ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8005ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005aba:	6083      	str	r3, [r0, #8]
 8005abc:	8181      	strh	r1, [r0, #12]
 8005abe:	6643      	str	r3, [r0, #100]	; 0x64
 8005ac0:	81c2      	strh	r2, [r0, #14]
 8005ac2:	6183      	str	r3, [r0, #24]
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	2208      	movs	r2, #8
 8005ac8:	305c      	adds	r0, #92	; 0x5c
 8005aca:	f7fd fb4f 	bl	800316c <memset>
 8005ace:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <std+0x38>)
 8005ad0:	6224      	str	r4, [r4, #32]
 8005ad2:	6263      	str	r3, [r4, #36]	; 0x24
 8005ad4:	4b04      	ldr	r3, [pc, #16]	; (8005ae8 <std+0x3c>)
 8005ad6:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ad8:	4b04      	ldr	r3, [pc, #16]	; (8005aec <std+0x40>)
 8005ada:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005adc:	4b04      	ldr	r3, [pc, #16]	; (8005af0 <std+0x44>)
 8005ade:	6323      	str	r3, [r4, #48]	; 0x30
 8005ae0:	bd10      	pop	{r4, pc}
 8005ae2:	bf00      	nop
 8005ae4:	08005e01 	.word	0x08005e01
 8005ae8:	08005e23 	.word	0x08005e23
 8005aec:	08005e5b 	.word	0x08005e5b
 8005af0:	08005e7f 	.word	0x08005e7f

08005af4 <_cleanup_r>:
 8005af4:	4901      	ldr	r1, [pc, #4]	; (8005afc <_cleanup_r+0x8>)
 8005af6:	f000 b8af 	b.w	8005c58 <_fwalk_reent>
 8005afa:	bf00      	nop
 8005afc:	08005a35 	.word	0x08005a35

08005b00 <__sfmoreglue>:
 8005b00:	2268      	movs	r2, #104	; 0x68
 8005b02:	b570      	push	{r4, r5, r6, lr}
 8005b04:	1e4d      	subs	r5, r1, #1
 8005b06:	4355      	muls	r5, r2
 8005b08:	460e      	mov	r6, r1
 8005b0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005b0e:	f7ff fa6b 	bl	8004fe8 <_malloc_r>
 8005b12:	4604      	mov	r4, r0
 8005b14:	b140      	cbz	r0, 8005b28 <__sfmoreglue+0x28>
 8005b16:	2100      	movs	r1, #0
 8005b18:	e9c0 1600 	strd	r1, r6, [r0]
 8005b1c:	300c      	adds	r0, #12
 8005b1e:	60a0      	str	r0, [r4, #8]
 8005b20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005b24:	f7fd fb22 	bl	800316c <memset>
 8005b28:	4620      	mov	r0, r4
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}

08005b2c <__sfp_lock_acquire>:
 8005b2c:	4801      	ldr	r0, [pc, #4]	; (8005b34 <__sfp_lock_acquire+0x8>)
 8005b2e:	f000 b8b3 	b.w	8005c98 <__retarget_lock_acquire_recursive>
 8005b32:	bf00      	nop
 8005b34:	20000241 	.word	0x20000241

08005b38 <__sfp_lock_release>:
 8005b38:	4801      	ldr	r0, [pc, #4]	; (8005b40 <__sfp_lock_release+0x8>)
 8005b3a:	f000 b8ae 	b.w	8005c9a <__retarget_lock_release_recursive>
 8005b3e:	bf00      	nop
 8005b40:	20000241 	.word	0x20000241

08005b44 <__sinit_lock_acquire>:
 8005b44:	4801      	ldr	r0, [pc, #4]	; (8005b4c <__sinit_lock_acquire+0x8>)
 8005b46:	f000 b8a7 	b.w	8005c98 <__retarget_lock_acquire_recursive>
 8005b4a:	bf00      	nop
 8005b4c:	20000242 	.word	0x20000242

08005b50 <__sinit_lock_release>:
 8005b50:	4801      	ldr	r0, [pc, #4]	; (8005b58 <__sinit_lock_release+0x8>)
 8005b52:	f000 b8a2 	b.w	8005c9a <__retarget_lock_release_recursive>
 8005b56:	bf00      	nop
 8005b58:	20000242 	.word	0x20000242

08005b5c <__sinit>:
 8005b5c:	b510      	push	{r4, lr}
 8005b5e:	4604      	mov	r4, r0
 8005b60:	f7ff fff0 	bl	8005b44 <__sinit_lock_acquire>
 8005b64:	69a3      	ldr	r3, [r4, #24]
 8005b66:	b11b      	cbz	r3, 8005b70 <__sinit+0x14>
 8005b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b6c:	f7ff bff0 	b.w	8005b50 <__sinit_lock_release>
 8005b70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005b74:	6523      	str	r3, [r4, #80]	; 0x50
 8005b76:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <__sinit+0x68>)
 8005b78:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <__sinit+0x6c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005b7e:	42a3      	cmp	r3, r4
 8005b80:	bf08      	it	eq
 8005b82:	2301      	moveq	r3, #1
 8005b84:	4620      	mov	r0, r4
 8005b86:	bf08      	it	eq
 8005b88:	61a3      	streq	r3, [r4, #24]
 8005b8a:	f000 f81f 	bl	8005bcc <__sfp>
 8005b8e:	6060      	str	r0, [r4, #4]
 8005b90:	4620      	mov	r0, r4
 8005b92:	f000 f81b 	bl	8005bcc <__sfp>
 8005b96:	60a0      	str	r0, [r4, #8]
 8005b98:	4620      	mov	r0, r4
 8005b9a:	f000 f817 	bl	8005bcc <__sfp>
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2104      	movs	r1, #4
 8005ba2:	60e0      	str	r0, [r4, #12]
 8005ba4:	6860      	ldr	r0, [r4, #4]
 8005ba6:	f7ff ff81 	bl	8005aac <std>
 8005baa:	2201      	movs	r2, #1
 8005bac:	2109      	movs	r1, #9
 8005bae:	68a0      	ldr	r0, [r4, #8]
 8005bb0:	f7ff ff7c 	bl	8005aac <std>
 8005bb4:	2202      	movs	r2, #2
 8005bb6:	2112      	movs	r1, #18
 8005bb8:	68e0      	ldr	r0, [r4, #12]
 8005bba:	f7ff ff77 	bl	8005aac <std>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	61a3      	str	r3, [r4, #24]
 8005bc2:	e7d1      	b.n	8005b68 <__sinit+0xc>
 8005bc4:	08005fcc 	.word	0x08005fcc
 8005bc8:	08005af5 	.word	0x08005af5

08005bcc <__sfp>:
 8005bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bce:	4607      	mov	r7, r0
 8005bd0:	f7ff ffac 	bl	8005b2c <__sfp_lock_acquire>
 8005bd4:	4b1e      	ldr	r3, [pc, #120]	; (8005c50 <__sfp+0x84>)
 8005bd6:	681e      	ldr	r6, [r3, #0]
 8005bd8:	69b3      	ldr	r3, [r6, #24]
 8005bda:	b913      	cbnz	r3, 8005be2 <__sfp+0x16>
 8005bdc:	4630      	mov	r0, r6
 8005bde:	f7ff ffbd 	bl	8005b5c <__sinit>
 8005be2:	3648      	adds	r6, #72	; 0x48
 8005be4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	d503      	bpl.n	8005bf4 <__sfp+0x28>
 8005bec:	6833      	ldr	r3, [r6, #0]
 8005bee:	b30b      	cbz	r3, 8005c34 <__sfp+0x68>
 8005bf0:	6836      	ldr	r6, [r6, #0]
 8005bf2:	e7f7      	b.n	8005be4 <__sfp+0x18>
 8005bf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005bf8:	b9d5      	cbnz	r5, 8005c30 <__sfp+0x64>
 8005bfa:	4b16      	ldr	r3, [pc, #88]	; (8005c54 <__sfp+0x88>)
 8005bfc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005c00:	60e3      	str	r3, [r4, #12]
 8005c02:	6665      	str	r5, [r4, #100]	; 0x64
 8005c04:	f000 f847 	bl	8005c96 <__retarget_lock_init_recursive>
 8005c08:	f7ff ff96 	bl	8005b38 <__sfp_lock_release>
 8005c0c:	2208      	movs	r2, #8
 8005c0e:	4629      	mov	r1, r5
 8005c10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005c14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005c18:	6025      	str	r5, [r4, #0]
 8005c1a:	61a5      	str	r5, [r4, #24]
 8005c1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005c20:	f7fd faa4 	bl	800316c <memset>
 8005c24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005c28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005c2c:	4620      	mov	r0, r4
 8005c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c30:	3468      	adds	r4, #104	; 0x68
 8005c32:	e7d9      	b.n	8005be8 <__sfp+0x1c>
 8005c34:	2104      	movs	r1, #4
 8005c36:	4638      	mov	r0, r7
 8005c38:	f7ff ff62 	bl	8005b00 <__sfmoreglue>
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	6030      	str	r0, [r6, #0]
 8005c40:	2800      	cmp	r0, #0
 8005c42:	d1d5      	bne.n	8005bf0 <__sfp+0x24>
 8005c44:	f7ff ff78 	bl	8005b38 <__sfp_lock_release>
 8005c48:	230c      	movs	r3, #12
 8005c4a:	603b      	str	r3, [r7, #0]
 8005c4c:	e7ee      	b.n	8005c2c <__sfp+0x60>
 8005c4e:	bf00      	nop
 8005c50:	08005fcc 	.word	0x08005fcc
 8005c54:	ffff0001 	.word	0xffff0001

08005c58 <_fwalk_reent>:
 8005c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c5c:	4606      	mov	r6, r0
 8005c5e:	4688      	mov	r8, r1
 8005c60:	2700      	movs	r7, #0
 8005c62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005c66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c6a:	f1b9 0901 	subs.w	r9, r9, #1
 8005c6e:	d505      	bpl.n	8005c7c <_fwalk_reent+0x24>
 8005c70:	6824      	ldr	r4, [r4, #0]
 8005c72:	2c00      	cmp	r4, #0
 8005c74:	d1f7      	bne.n	8005c66 <_fwalk_reent+0xe>
 8005c76:	4638      	mov	r0, r7
 8005c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c7c:	89ab      	ldrh	r3, [r5, #12]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d907      	bls.n	8005c92 <_fwalk_reent+0x3a>
 8005c82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c86:	3301      	adds	r3, #1
 8005c88:	d003      	beq.n	8005c92 <_fwalk_reent+0x3a>
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	47c0      	blx	r8
 8005c90:	4307      	orrs	r7, r0
 8005c92:	3568      	adds	r5, #104	; 0x68
 8005c94:	e7e9      	b.n	8005c6a <_fwalk_reent+0x12>

08005c96 <__retarget_lock_init_recursive>:
 8005c96:	4770      	bx	lr

08005c98 <__retarget_lock_acquire_recursive>:
 8005c98:	4770      	bx	lr

08005c9a <__retarget_lock_release_recursive>:
 8005c9a:	4770      	bx	lr

08005c9c <__swhatbuf_r>:
 8005c9c:	b570      	push	{r4, r5, r6, lr}
 8005c9e:	460e      	mov	r6, r1
 8005ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ca4:	4614      	mov	r4, r2
 8005ca6:	2900      	cmp	r1, #0
 8005ca8:	461d      	mov	r5, r3
 8005caa:	b096      	sub	sp, #88	; 0x58
 8005cac:	da08      	bge.n	8005cc0 <__swhatbuf_r+0x24>
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005cb4:	602a      	str	r2, [r5, #0]
 8005cb6:	061a      	lsls	r2, r3, #24
 8005cb8:	d410      	bmi.n	8005cdc <__swhatbuf_r+0x40>
 8005cba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cbe:	e00e      	b.n	8005cde <__swhatbuf_r+0x42>
 8005cc0:	466a      	mov	r2, sp
 8005cc2:	f000 f903 	bl	8005ecc <_fstat_r>
 8005cc6:	2800      	cmp	r0, #0
 8005cc8:	dbf1      	blt.n	8005cae <__swhatbuf_r+0x12>
 8005cca:	9a01      	ldr	r2, [sp, #4]
 8005ccc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005cd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005cd4:	425a      	negs	r2, r3
 8005cd6:	415a      	adcs	r2, r3
 8005cd8:	602a      	str	r2, [r5, #0]
 8005cda:	e7ee      	b.n	8005cba <__swhatbuf_r+0x1e>
 8005cdc:	2340      	movs	r3, #64	; 0x40
 8005cde:	2000      	movs	r0, #0
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	b016      	add	sp, #88	; 0x58
 8005ce4:	bd70      	pop	{r4, r5, r6, pc}
	...

08005ce8 <__smakebuf_r>:
 8005ce8:	898b      	ldrh	r3, [r1, #12]
 8005cea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005cec:	079d      	lsls	r5, r3, #30
 8005cee:	4606      	mov	r6, r0
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	d507      	bpl.n	8005d04 <__smakebuf_r+0x1c>
 8005cf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cf8:	6023      	str	r3, [r4, #0]
 8005cfa:	6123      	str	r3, [r4, #16]
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	6163      	str	r3, [r4, #20]
 8005d00:	b002      	add	sp, #8
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
 8005d04:	466a      	mov	r2, sp
 8005d06:	ab01      	add	r3, sp, #4
 8005d08:	f7ff ffc8 	bl	8005c9c <__swhatbuf_r>
 8005d0c:	9900      	ldr	r1, [sp, #0]
 8005d0e:	4605      	mov	r5, r0
 8005d10:	4630      	mov	r0, r6
 8005d12:	f7ff f969 	bl	8004fe8 <_malloc_r>
 8005d16:	b948      	cbnz	r0, 8005d2c <__smakebuf_r+0x44>
 8005d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d1c:	059a      	lsls	r2, r3, #22
 8005d1e:	d4ef      	bmi.n	8005d00 <__smakebuf_r+0x18>
 8005d20:	f023 0303 	bic.w	r3, r3, #3
 8005d24:	f043 0302 	orr.w	r3, r3, #2
 8005d28:	81a3      	strh	r3, [r4, #12]
 8005d2a:	e7e3      	b.n	8005cf4 <__smakebuf_r+0xc>
 8005d2c:	4b0d      	ldr	r3, [pc, #52]	; (8005d64 <__smakebuf_r+0x7c>)
 8005d2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005d30:	89a3      	ldrh	r3, [r4, #12]
 8005d32:	6020      	str	r0, [r4, #0]
 8005d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d38:	81a3      	strh	r3, [r4, #12]
 8005d3a:	9b00      	ldr	r3, [sp, #0]
 8005d3c:	6120      	str	r0, [r4, #16]
 8005d3e:	6163      	str	r3, [r4, #20]
 8005d40:	9b01      	ldr	r3, [sp, #4]
 8005d42:	b15b      	cbz	r3, 8005d5c <__smakebuf_r+0x74>
 8005d44:	4630      	mov	r0, r6
 8005d46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d4a:	f000 f8d1 	bl	8005ef0 <_isatty_r>
 8005d4e:	b128      	cbz	r0, 8005d5c <__smakebuf_r+0x74>
 8005d50:	89a3      	ldrh	r3, [r4, #12]
 8005d52:	f023 0303 	bic.w	r3, r3, #3
 8005d56:	f043 0301 	orr.w	r3, r3, #1
 8005d5a:	81a3      	strh	r3, [r4, #12]
 8005d5c:	89a0      	ldrh	r0, [r4, #12]
 8005d5e:	4305      	orrs	r5, r0
 8005d60:	81a5      	strh	r5, [r4, #12]
 8005d62:	e7cd      	b.n	8005d00 <__smakebuf_r+0x18>
 8005d64:	08005af5 	.word	0x08005af5

08005d68 <_malloc_usable_size_r>:
 8005d68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d6c:	1f18      	subs	r0, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	bfbc      	itt	lt
 8005d72:	580b      	ldrlt	r3, [r1, r0]
 8005d74:	18c0      	addlt	r0, r0, r3
 8005d76:	4770      	bx	lr

08005d78 <_raise_r>:
 8005d78:	291f      	cmp	r1, #31
 8005d7a:	b538      	push	{r3, r4, r5, lr}
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	460d      	mov	r5, r1
 8005d80:	d904      	bls.n	8005d8c <_raise_r+0x14>
 8005d82:	2316      	movs	r3, #22
 8005d84:	6003      	str	r3, [r0, #0]
 8005d86:	f04f 30ff 	mov.w	r0, #4294967295
 8005d8a:	bd38      	pop	{r3, r4, r5, pc}
 8005d8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005d8e:	b112      	cbz	r2, 8005d96 <_raise_r+0x1e>
 8005d90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005d94:	b94b      	cbnz	r3, 8005daa <_raise_r+0x32>
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 f830 	bl	8005dfc <_getpid_r>
 8005d9c:	462a      	mov	r2, r5
 8005d9e:	4601      	mov	r1, r0
 8005da0:	4620      	mov	r0, r4
 8005da2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005da6:	f000 b817 	b.w	8005dd8 <_kill_r>
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d00a      	beq.n	8005dc4 <_raise_r+0x4c>
 8005dae:	1c59      	adds	r1, r3, #1
 8005db0:	d103      	bne.n	8005dba <_raise_r+0x42>
 8005db2:	2316      	movs	r3, #22
 8005db4:	6003      	str	r3, [r0, #0]
 8005db6:	2001      	movs	r0, #1
 8005db8:	e7e7      	b.n	8005d8a <_raise_r+0x12>
 8005dba:	2400      	movs	r4, #0
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005dc2:	4798      	blx	r3
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	e7e0      	b.n	8005d8a <_raise_r+0x12>

08005dc8 <raise>:
 8005dc8:	4b02      	ldr	r3, [pc, #8]	; (8005dd4 <raise+0xc>)
 8005dca:	4601      	mov	r1, r0
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	f7ff bfd3 	b.w	8005d78 <_raise_r>
 8005dd2:	bf00      	nop
 8005dd4:	2000000c 	.word	0x2000000c

08005dd8 <_kill_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4d06      	ldr	r5, [pc, #24]	; (8005df8 <_kill_r+0x20>)
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	4611      	mov	r1, r2
 8005de4:	602b      	str	r3, [r5, #0]
 8005de6:	f7fb fbf3 	bl	80015d0 <_kill>
 8005dea:	1c43      	adds	r3, r0, #1
 8005dec:	d102      	bne.n	8005df4 <_kill_r+0x1c>
 8005dee:	682b      	ldr	r3, [r5, #0]
 8005df0:	b103      	cbz	r3, 8005df4 <_kill_r+0x1c>
 8005df2:	6023      	str	r3, [r4, #0]
 8005df4:	bd38      	pop	{r3, r4, r5, pc}
 8005df6:	bf00      	nop
 8005df8:	2000023c 	.word	0x2000023c

08005dfc <_getpid_r>:
 8005dfc:	f7fb bbe1 	b.w	80015c2 <_getpid>

08005e00 <__sread>:
 8005e00:	b510      	push	{r4, lr}
 8005e02:	460c      	mov	r4, r1
 8005e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e08:	f000 f894 	bl	8005f34 <_read_r>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	bfab      	itete	ge
 8005e10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e12:	89a3      	ldrhlt	r3, [r4, #12]
 8005e14:	181b      	addge	r3, r3, r0
 8005e16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e1a:	bfac      	ite	ge
 8005e1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e1e:	81a3      	strhlt	r3, [r4, #12]
 8005e20:	bd10      	pop	{r4, pc}

08005e22 <__swrite>:
 8005e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e26:	461f      	mov	r7, r3
 8005e28:	898b      	ldrh	r3, [r1, #12]
 8005e2a:	4605      	mov	r5, r0
 8005e2c:	05db      	lsls	r3, r3, #23
 8005e2e:	460c      	mov	r4, r1
 8005e30:	4616      	mov	r6, r2
 8005e32:	d505      	bpl.n	8005e40 <__swrite+0x1e>
 8005e34:	2302      	movs	r3, #2
 8005e36:	2200      	movs	r2, #0
 8005e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e3c:	f000 f868 	bl	8005f10 <_lseek_r>
 8005e40:	89a3      	ldrh	r3, [r4, #12]
 8005e42:	4632      	mov	r2, r6
 8005e44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e48:	81a3      	strh	r3, [r4, #12]
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	463b      	mov	r3, r7
 8005e4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e56:	f000 b817 	b.w	8005e88 <_write_r>

08005e5a <__sseek>:
 8005e5a:	b510      	push	{r4, lr}
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e62:	f000 f855 	bl	8005f10 <_lseek_r>
 8005e66:	1c43      	adds	r3, r0, #1
 8005e68:	89a3      	ldrh	r3, [r4, #12]
 8005e6a:	bf15      	itete	ne
 8005e6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e76:	81a3      	strheq	r3, [r4, #12]
 8005e78:	bf18      	it	ne
 8005e7a:	81a3      	strhne	r3, [r4, #12]
 8005e7c:	bd10      	pop	{r4, pc}

08005e7e <__sclose>:
 8005e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e82:	f000 b813 	b.w	8005eac <_close_r>
	...

08005e88 <_write_r>:
 8005e88:	b538      	push	{r3, r4, r5, lr}
 8005e8a:	4604      	mov	r4, r0
 8005e8c:	4608      	mov	r0, r1
 8005e8e:	4611      	mov	r1, r2
 8005e90:	2200      	movs	r2, #0
 8005e92:	4d05      	ldr	r5, [pc, #20]	; (8005ea8 <_write_r+0x20>)
 8005e94:	602a      	str	r2, [r5, #0]
 8005e96:	461a      	mov	r2, r3
 8005e98:	f7fb fbd1 	bl	800163e <_write>
 8005e9c:	1c43      	adds	r3, r0, #1
 8005e9e:	d102      	bne.n	8005ea6 <_write_r+0x1e>
 8005ea0:	682b      	ldr	r3, [r5, #0]
 8005ea2:	b103      	cbz	r3, 8005ea6 <_write_r+0x1e>
 8005ea4:	6023      	str	r3, [r4, #0]
 8005ea6:	bd38      	pop	{r3, r4, r5, pc}
 8005ea8:	2000023c 	.word	0x2000023c

08005eac <_close_r>:
 8005eac:	b538      	push	{r3, r4, r5, lr}
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4d05      	ldr	r5, [pc, #20]	; (8005ec8 <_close_r+0x1c>)
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	4608      	mov	r0, r1
 8005eb6:	602b      	str	r3, [r5, #0]
 8005eb8:	f7fb fbdd 	bl	8001676 <_close>
 8005ebc:	1c43      	adds	r3, r0, #1
 8005ebe:	d102      	bne.n	8005ec6 <_close_r+0x1a>
 8005ec0:	682b      	ldr	r3, [r5, #0]
 8005ec2:	b103      	cbz	r3, 8005ec6 <_close_r+0x1a>
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	bd38      	pop	{r3, r4, r5, pc}
 8005ec8:	2000023c 	.word	0x2000023c

08005ecc <_fstat_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	2300      	movs	r3, #0
 8005ed0:	4d06      	ldr	r5, [pc, #24]	; (8005eec <_fstat_r+0x20>)
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	4611      	mov	r1, r2
 8005ed8:	602b      	str	r3, [r5, #0]
 8005eda:	f7fb fbd7 	bl	800168c <_fstat>
 8005ede:	1c43      	adds	r3, r0, #1
 8005ee0:	d102      	bne.n	8005ee8 <_fstat_r+0x1c>
 8005ee2:	682b      	ldr	r3, [r5, #0]
 8005ee4:	b103      	cbz	r3, 8005ee8 <_fstat_r+0x1c>
 8005ee6:	6023      	str	r3, [r4, #0]
 8005ee8:	bd38      	pop	{r3, r4, r5, pc}
 8005eea:	bf00      	nop
 8005eec:	2000023c 	.word	0x2000023c

08005ef0 <_isatty_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	4d05      	ldr	r5, [pc, #20]	; (8005f0c <_isatty_r+0x1c>)
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	f7fb fbd5 	bl	80016aa <_isatty>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_isatty_r+0x1a>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_isatty_r+0x1a>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	2000023c 	.word	0x2000023c

08005f10 <_lseek_r>:
 8005f10:	b538      	push	{r3, r4, r5, lr}
 8005f12:	4604      	mov	r4, r0
 8005f14:	4608      	mov	r0, r1
 8005f16:	4611      	mov	r1, r2
 8005f18:	2200      	movs	r2, #0
 8005f1a:	4d05      	ldr	r5, [pc, #20]	; (8005f30 <_lseek_r+0x20>)
 8005f1c:	602a      	str	r2, [r5, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f7fb fbcd 	bl	80016be <_lseek>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d102      	bne.n	8005f2e <_lseek_r+0x1e>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	b103      	cbz	r3, 8005f2e <_lseek_r+0x1e>
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	2000023c 	.word	0x2000023c

08005f34 <_read_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4604      	mov	r4, r0
 8005f38:	4608      	mov	r0, r1
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	4d05      	ldr	r5, [pc, #20]	; (8005f54 <_read_r+0x20>)
 8005f40:	602a      	str	r2, [r5, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f7fb fb5e 	bl	8001604 <_read>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d102      	bne.n	8005f52 <_read_r+0x1e>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	b103      	cbz	r3, 8005f52 <_read_r+0x1e>
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	bd38      	pop	{r3, r4, r5, pc}
 8005f54:	2000023c 	.word	0x2000023c

08005f58 <_init>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	bf00      	nop
 8005f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5e:	bc08      	pop	{r3}
 8005f60:	469e      	mov	lr, r3
 8005f62:	4770      	bx	lr

08005f64 <_fini>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	bf00      	nop
 8005f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6a:	bc08      	pop	{r3}
 8005f6c:	469e      	mov	lr, r3
 8005f6e:	4770      	bx	lr
